
// Autogenerated by jnigen. DO NOT EDIT!


// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters


import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as _$core;

import 'package:jni/_internal.dart' as _$jni;
import 'package:jni/jni.dart' as _$jni;


/// from: `com.arashivision.sdkcamera.InstaCameraSDK`
class InstaCameraSDK extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<InstaCameraSDK> $type;

  

  @_$jni.internal
  InstaCameraSDK.fromReference(
    
    _$jni.JReference reference,
  ) :
    $type = type,
    super.fromReference(
      
      reference
    );

  static final _class = _$jni.JClass.forName(r'com/arashivision/sdkcamera/InstaCameraSDK');

      /// The type which includes information such as the signature of this class.
static const type = $InstaCameraSDK$Type();
  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_NewObject')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory InstaCameraSDK() {
    
    return InstaCameraSDK.fromReference(
      
      _new$(_class.reference.pointer, _id_new$ as _$jni.JMethodIDPtr).reference
    );
  }

  static final _id_init = _class.staticMethodId(
    r'init',
    r'(Landroid/app/Application;)V',
  );

  static final _init = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>('globalEnv_CallStaticVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();
  /// from: `static public void init(android.app.Application application)`
  static void init(_$jni.JObject application, ){
    
    _init(_class.reference.pointer, _id_init as _$jni.JMethodIDPtr, application.reference.pointer).check();
  }

}
final class $InstaCameraSDK$Type extends _$jni.JObjType<InstaCameraSDK> {
  

  @_$jni.internal
  const $InstaCameraSDK$Type(
    
  );

  @_$jni.internal
  @_$core.override
  String get signature => r'Lcom/arashivision/sdkcamera/InstaCameraSDK;';

  @_$jni.internal
  @_$core.override
  InstaCameraSDK fromReference(_$jni.JReference reference) => InstaCameraSDK.fromReference(
    
    reference
  );

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($InstaCameraSDK$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($InstaCameraSDK$Type) &&
        other is $InstaCameraSDK$Type;
  }
}

/// from: `com.arashivision.sdkcamera.api.bean.CameraActivateRequest`
class CameraActivateRequest extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<CameraActivateRequest> $type;

  

  @_$jni.internal
  CameraActivateRequest.fromReference(
    
    _$jni.JReference reference,
  ) :
    $type = type,
    super.fromReference(
      
      reference
    );

  static final _class = _$jni.JClass.forName(r'com/arashivision/sdkcamera/api/bean/CameraActivateRequest');

      /// The type which includes information such as the signature of this class.
static const type = $CameraActivateRequest$Type();
  static final _id_new$ = _class.constructorId(
    r'(Lcom/arashivision/sdkcamera/api/bean/SecretInfo;Ljava/lang/String;)V',
  );

  static final _new$ = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>, _$jni.Pointer<_$jni.Void>)>)>>('globalEnv_NewObject')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, _$jni.Pointer<_$jni.Void>)>();
  /// from: `public void <init>(com.arashivision.sdkcamera.api.bean.SecretInfo secretInfo, java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  factory CameraActivateRequest(SecretInfo secretInfo, _$jni.JString string, ) {
    
    return CameraActivateRequest.fromReference(
      
      _new$(_class.reference.pointer, _id_new$ as _$jni.JMethodIDPtr, secretInfo.reference.pointer, string.reference.pointer).reference
    );
  }

  static final _id_getSecretInfo = _class.instanceMethodId(
    r'getSecretInfo',
    r'()Lcom/arashivision/sdkcamera/api/bean/SecretInfo;',
  );

  static final _getSecretInfo = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallObjectMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public com.arashivision.sdkcamera.api.bean.SecretInfo getSecretInfo()`
  /// The returned object must be released after use, by calling the [release] method.
  SecretInfo getSecretInfo(){
    
    return _getSecretInfo(reference.pointer, _id_getSecretInfo as _$jni.JMethodIDPtr).object(const $SecretInfo$Type());
  }

  static final _id_setSecretInfo = _class.instanceMethodId(
    r'setSecretInfo',
    r'(Lcom/arashivision/sdkcamera/api/bean/SecretInfo;)V',
  );

  static final _setSecretInfo = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();
  /// from: `public void setSecretInfo(com.arashivision.sdkcamera.api.bean.SecretInfo secretInfo)`
  void setSecretInfo(SecretInfo secretInfo, ){
    
    _setSecretInfo(reference.pointer, _id_setSecretInfo as _$jni.JMethodIDPtr, secretInfo.reference.pointer).check();
  }

  static final _id_getSerial = _class.instanceMethodId(
    r'getSerial',
    r'()Ljava/lang/String;',
  );

  static final _getSerial = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallObjectMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public java.lang.String getSerial()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString getSerial(){
    
    return _getSerial(reference.pointer, _id_getSerial as _$jni.JMethodIDPtr).object(const _$jni.JStringType());
  }

  static final _id_setSerial = _class.instanceMethodId(
    r'setSerial',
    r'(Ljava/lang/String;)V',
  );

  static final _setSerial = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();
  /// from: `public void setSerial(java.lang.String string)`
  void setSerial(_$jni.JString string, ){
    
    _setSerial(reference.pointer, _id_setSerial as _$jni.JMethodIDPtr, string.reference.pointer).check();
  }

}
final class $CameraActivateRequest$Type extends _$jni.JObjType<CameraActivateRequest> {
  

  @_$jni.internal
  const $CameraActivateRequest$Type(
    
  );

  @_$jni.internal
  @_$core.override
  String get signature => r'Lcom/arashivision/sdkcamera/api/bean/CameraActivateRequest;';

  @_$jni.internal
  @_$core.override
  CameraActivateRequest fromReference(_$jni.JReference reference) => CameraActivateRequest.fromReference(
    
    reference
  );

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($CameraActivateRequest$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($CameraActivateRequest$Type) &&
        other is $CameraActivateRequest$Type;
  }
}

/// from: `com.arashivision.sdkcamera.api.bean.CameraActivateResponse$ActivateBean`
class CameraActivateResponse_ActivateBean extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<CameraActivateResponse_ActivateBean> $type;

  

  @_$jni.internal
  CameraActivateResponse_ActivateBean.fromReference(
    
    _$jni.JReference reference,
  ) :
    $type = type,
    super.fromReference(
      
      reference
    );

  static final _class = _$jni.JClass.forName(r'com/arashivision/sdkcamera/api/bean/CameraActivateResponse$ActivateBean');

      /// The type which includes information such as the signature of this class.
static const type = $CameraActivateResponse_ActivateBean$Type();
  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_NewObject')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory CameraActivateResponse_ActivateBean() {
    
    return CameraActivateResponse_ActivateBean.fromReference(
      
      _new$(_class.reference.pointer, _id_new$ as _$jni.JMethodIDPtr).reference
    );
  }

  static final _id_getCreate_time = _class.instanceMethodId(
    r'getCreate_time',
    r'()J',
  );

  static final _getCreate_time = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallLongMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public long getCreate_time()`
  int getCreate_time(){
    
    return _getCreate_time(reference.pointer, _id_getCreate_time as _$jni.JMethodIDPtr).long;
  }

  static final _id_setCreate_time = _class.instanceMethodId(
    r'setCreate_time',
    r'(J)V',
  );

  static final _setCreate_time = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int64,)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();
  /// from: `public void setCreate_time(long j)`
  void setCreate_time(int j, ){
    
    _setCreate_time(reference.pointer, _id_setCreate_time as _$jni.JMethodIDPtr, j).check();
  }

  static final _id_getDevice_type = _class.instanceMethodId(
    r'getDevice_type',
    r'()Ljava/lang/String;',
  );

  static final _getDevice_type = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallObjectMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public java.lang.String getDevice_type()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString getDevice_type(){
    
    return _getDevice_type(reference.pointer, _id_getDevice_type as _$jni.JMethodIDPtr).object(const _$jni.JStringType());
  }

  static final _id_setDevice_type = _class.instanceMethodId(
    r'setDevice_type',
    r'(Ljava/lang/String;)V',
  );

  static final _setDevice_type = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();
  /// from: `public void setDevice_type(java.lang.String string)`
  void setDevice_type(_$jni.JString string, ){
    
    _setDevice_type(reference.pointer, _id_setDevice_type as _$jni.JMethodIDPtr, string.reference.pointer).check();
  }

  static final _id_getSerial = _class.instanceMethodId(
    r'getSerial',
    r'()Ljava/lang/String;',
  );

  static final _getSerial = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallObjectMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public java.lang.String getSerial()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString getSerial(){
    
    return _getSerial(reference.pointer, _id_getSerial as _$jni.JMethodIDPtr).object(const _$jni.JStringType());
  }

  static final _id_setSerial = _class.instanceMethodId(
    r'setSerial',
    r'(Ljava/lang/String;)V',
  );

  static final _setSerial = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();
  /// from: `public void setSerial(java.lang.String string)`
  void setSerial(_$jni.JString string, ){
    
    _setSerial(reference.pointer, _id_setSerial as _$jni.JMethodIDPtr, string.reference.pointer).check();
  }

  static final _id_toString$1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString$1 = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallObjectMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public java.lang.String toString()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString toString$1(){
    
    return _toString$1(reference.pointer, _id_toString$1 as _$jni.JMethodIDPtr).object(const _$jni.JStringType());
  }

}
final class $CameraActivateResponse_ActivateBean$Type extends _$jni.JObjType<CameraActivateResponse_ActivateBean> {
  

  @_$jni.internal
  const $CameraActivateResponse_ActivateBean$Type(
    
  );

  @_$jni.internal
  @_$core.override
  String get signature => r'Lcom/arashivision/sdkcamera/api/bean/CameraActivateResponse$ActivateBean;';

  @_$jni.internal
  @_$core.override
  CameraActivateResponse_ActivateBean fromReference(_$jni.JReference reference) => CameraActivateResponse_ActivateBean.fromReference(
    
    reference
  );

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($CameraActivateResponse_ActivateBean$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($CameraActivateResponse_ActivateBean$Type) &&
        other is $CameraActivateResponse_ActivateBean$Type;
  }
}

/// from: `com.arashivision.sdkcamera.api.bean.CameraActivateResponse$DataBean`
class CameraActivateResponse_DataBean extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<CameraActivateResponse_DataBean> $type;

  

  @_$jni.internal
  CameraActivateResponse_DataBean.fromReference(
    
    _$jni.JReference reference,
  ) :
    $type = type,
    super.fromReference(
      
      reference
    );

  static final _class = _$jni.JClass.forName(r'com/arashivision/sdkcamera/api/bean/CameraActivateResponse$DataBean');

      /// The type which includes information such as the signature of this class.
static const type = $CameraActivateResponse_DataBean$Type();
  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_NewObject')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory CameraActivateResponse_DataBean() {
    
    return CameraActivateResponse_DataBean.fromReference(
      
      _new$(_class.reference.pointer, _id_new$ as _$jni.JMethodIDPtr).reference
    );
  }

  static final _id_getActivation = _class.instanceMethodId(
    r'getActivation',
    r'()Lcom/arashivision/sdkcamera/api/bean/CameraActivateResponse$ActivateBean;',
  );

  static final _getActivation = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallObjectMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public com.arashivision.sdkcamera.api.bean.CameraActivateResponse$ActivateBean getActivation()`
  /// The returned object must be released after use, by calling the [release] method.
  CameraActivateResponse_ActivateBean getActivation(){
    
    return _getActivation(reference.pointer, _id_getActivation as _$jni.JMethodIDPtr).object(const $CameraActivateResponse_ActivateBean$Type());
  }

  static final _id_setActivation = _class.instanceMethodId(
    r'setActivation',
    r'(Lcom/arashivision/sdkcamera/api/bean/CameraActivateResponse$ActivateBean;)V',
  );

  static final _setActivation = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();
  /// from: `public void setActivation(com.arashivision.sdkcamera.api.bean.CameraActivateResponse$ActivateBean activateBean)`
  void setActivation(CameraActivateResponse_ActivateBean activateBean, ){
    
    _setActivation(reference.pointer, _id_setActivation as _$jni.JMethodIDPtr, activateBean.reference.pointer).check();
  }

  static final _id_toString$1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString$1 = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallObjectMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public java.lang.String toString()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString toString$1(){
    
    return _toString$1(reference.pointer, _id_toString$1 as _$jni.JMethodIDPtr).object(const _$jni.JStringType());
  }

}
final class $CameraActivateResponse_DataBean$Type extends _$jni.JObjType<CameraActivateResponse_DataBean> {
  

  @_$jni.internal
  const $CameraActivateResponse_DataBean$Type(
    
  );

  @_$jni.internal
  @_$core.override
  String get signature => r'Lcom/arashivision/sdkcamera/api/bean/CameraActivateResponse$DataBean;';

  @_$jni.internal
  @_$core.override
  CameraActivateResponse_DataBean fromReference(_$jni.JReference reference) => CameraActivateResponse_DataBean.fromReference(
    
    reference
  );

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($CameraActivateResponse_DataBean$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($CameraActivateResponse_DataBean$Type) &&
        other is $CameraActivateResponse_DataBean$Type;
  }
}

/// from: `com.arashivision.sdkcamera.api.bean.CameraActivateResponse`
class CameraActivateResponse extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<CameraActivateResponse> $type;

  

  @_$jni.internal
  CameraActivateResponse.fromReference(
    
    _$jni.JReference reference,
  ) :
    $type = type,
    super.fromReference(
      
      reference
    );

  static final _class = _$jni.JClass.forName(r'com/arashivision/sdkcamera/api/bean/CameraActivateResponse');

      /// The type which includes information such as the signature of this class.
static const type = $CameraActivateResponse$Type();
  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_NewObject')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory CameraActivateResponse() {
    
    return CameraActivateResponse.fromReference(
      
      _new$(_class.reference.pointer, _id_new$ as _$jni.JMethodIDPtr).reference
    );
  }

  static final _id_getCode = _class.instanceMethodId(
    r'getCode',
    r'()I',
  );

  static final _getCode = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallIntMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public int getCode()`
  int getCode(){
    
    return _getCode(reference.pointer, _id_getCode as _$jni.JMethodIDPtr).integer;
  }

  static final _id_setCode = _class.instanceMethodId(
    r'setCode',
    r'(I)V',
  );

  static final _setCode = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();
  /// from: `public void setCode(int i)`
  void setCode(int i, ){
    
    _setCode(reference.pointer, _id_setCode as _$jni.JMethodIDPtr, i).check();
  }

  static final _id_getData = _class.instanceMethodId(
    r'getData',
    r'()Lcom/arashivision/sdkcamera/api/bean/CameraActivateResponse$DataBean;',
  );

  static final _getData = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallObjectMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public com.arashivision.sdkcamera.api.bean.CameraActivateResponse$DataBean getData()`
  /// The returned object must be released after use, by calling the [release] method.
  CameraActivateResponse_DataBean getData(){
    
    return _getData(reference.pointer, _id_getData as _$jni.JMethodIDPtr).object(const $CameraActivateResponse_DataBean$Type());
  }

  static final _id_setData = _class.instanceMethodId(
    r'setData',
    r'(Lcom/arashivision/sdkcamera/api/bean/CameraActivateResponse$DataBean;)V',
  );

  static final _setData = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();
  /// from: `public void setData(com.arashivision.sdkcamera.api.bean.CameraActivateResponse$DataBean dataBean)`
  void setData(CameraActivateResponse_DataBean dataBean, ){
    
    _setData(reference.pointer, _id_setData as _$jni.JMethodIDPtr, dataBean.reference.pointer).check();
  }

  static final _id_getError = _class.instanceMethodId(
    r'getError',
    r'()Ljava/lang/String;',
  );

  static final _getError = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallObjectMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public java.lang.String getError()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString getError(){
    
    return _getError(reference.pointer, _id_getError as _$jni.JMethodIDPtr).object(const _$jni.JStringType());
  }

  static final _id_setError = _class.instanceMethodId(
    r'setError',
    r'(Ljava/lang/String;)V',
  );

  static final _setError = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();
  /// from: `public void setError(java.lang.String string)`
  void setError(_$jni.JString string, ){
    
    _setError(reference.pointer, _id_setError as _$jni.JMethodIDPtr, string.reference.pointer).check();
  }

  static final _id_getErrorData = _class.instanceMethodId(
    r'getErrorData',
    r'()Lcom/arashivision/sdkcamera/api/bean/CameraActivateResponse$DataBean;',
  );

  static final _getErrorData = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallObjectMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public com.arashivision.sdkcamera.api.bean.CameraActivateResponse$DataBean getErrorData()`
  /// The returned object must be released after use, by calling the [release] method.
  CameraActivateResponse_DataBean getErrorData(){
    
    return _getErrorData(reference.pointer, _id_getErrorData as _$jni.JMethodIDPtr).object(const $CameraActivateResponse_DataBean$Type());
  }

  static final _id_setErrorData = _class.instanceMethodId(
    r'setErrorData',
    r'(Lcom/arashivision/sdkcamera/api/bean/CameraActivateResponse$DataBean;)V',
  );

  static final _setErrorData = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();
  /// from: `public void setErrorData(com.arashivision.sdkcamera.api.bean.CameraActivateResponse$DataBean dataBean)`
  void setErrorData(CameraActivateResponse_DataBean dataBean, ){
    
    _setErrorData(reference.pointer, _id_setErrorData as _$jni.JMethodIDPtr, dataBean.reference.pointer).check();
  }

  static final _id_getMsg = _class.instanceMethodId(
    r'getMsg',
    r'()Ljava/lang/String;',
  );

  static final _getMsg = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallObjectMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public java.lang.String getMsg()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString getMsg(){
    
    return _getMsg(reference.pointer, _id_getMsg as _$jni.JMethodIDPtr).object(const _$jni.JStringType());
  }

  static final _id_setMsg = _class.instanceMethodId(
    r'setMsg',
    r'(Ljava/lang/String;)V',
  );

  static final _setMsg = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();
  /// from: `public void setMsg(java.lang.String string)`
  void setMsg(_$jni.JString string, ){
    
    _setMsg(reference.pointer, _id_setMsg as _$jni.JMethodIDPtr, string.reference.pointer).check();
  }

  static final _id_toString$1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString$1 = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallObjectMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public java.lang.String toString()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString toString$1(){
    
    return _toString$1(reference.pointer, _id_toString$1 as _$jni.JMethodIDPtr).object(const _$jni.JStringType());
  }

}
final class $CameraActivateResponse$Type extends _$jni.JObjType<CameraActivateResponse> {
  

  @_$jni.internal
  const $CameraActivateResponse$Type(
    
  );

  @_$jni.internal
  @_$core.override
  String get signature => r'Lcom/arashivision/sdkcamera/api/bean/CameraActivateResponse;';

  @_$jni.internal
  @_$core.override
  CameraActivateResponse fromReference(_$jni.JReference reference) => CameraActivateResponse.fromReference(
    
    reference
  );

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($CameraActivateResponse$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($CameraActivateResponse$Type) &&
        other is $CameraActivateResponse$Type;
  }
}

/// from: `com.arashivision.sdkcamera.api.bean.SecretInfo`
class SecretInfo extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<SecretInfo> $type;

  

  @_$jni.internal
  SecretInfo.fromReference(
    
    _$jni.JReference reference,
  ) :
    $type = type,
    super.fromReference(
      
      reference
    );

  static final _class = _$jni.JClass.forName(r'com/arashivision/sdkcamera/api/bean/SecretInfo');

      /// The type which includes information such as the signature of this class.
static const type = $SecretInfo$Type();
  static final _id_new$ = _class.constructorId(
    r'(Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _new$ = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>, _$jni.Pointer<_$jni.Void>)>)>>('globalEnv_NewObject')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, _$jni.Pointer<_$jni.Void>)>();
  /// from: `public void <init>(java.lang.String string, java.lang.String string1)`
  /// The returned object must be released after use, by calling the [release] method.
  factory SecretInfo(_$jni.JString string, _$jni.JString string1, ) {
    
    return SecretInfo.fromReference(
      
      _new$(_class.reference.pointer, _id_new$ as _$jni.JMethodIDPtr, string.reference.pointer, string1.reference.pointer).reference
    );
  }

  static final _id_getAppId = _class.instanceMethodId(
    r'getAppId',
    r'()Ljava/lang/String;',
  );

  static final _getAppId = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallObjectMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public java.lang.String getAppId()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString getAppId(){
    
    return _getAppId(reference.pointer, _id_getAppId as _$jni.JMethodIDPtr).object(const _$jni.JStringType());
  }

  static final _id_getSecret = _class.instanceMethodId(
    r'getSecret',
    r'()Ljava/lang/String;',
  );

  static final _getSecret = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallObjectMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public java.lang.String getSecret()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString getSecret(){
    
    return _getSecret(reference.pointer, _id_getSecret as _$jni.JMethodIDPtr).object(const _$jni.JStringType());
  }

}
final class $SecretInfo$Type extends _$jni.JObjType<SecretInfo> {
  

  @_$jni.internal
  const $SecretInfo$Type(
    
  );

  @_$jni.internal
  @_$core.override
  String get signature => r'Lcom/arashivision/sdkcamera/api/bean/SecretInfo;';

  @_$jni.internal
  @_$core.override
  SecretInfo fromReference(_$jni.JReference reference) => SecretInfo.fromReference(
    
    reference
  );

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($SecretInfo$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($SecretInfo$Type) &&
        other is $SecretInfo$Type;
  }
}

/// from: `com.arashivision.sdkcamera.camera.InstaCameraManager$IActivateCameraCallback`
class InstaCameraManager_IActivateCameraCallback extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<InstaCameraManager_IActivateCameraCallback> $type;

  

  @_$jni.internal
  InstaCameraManager_IActivateCameraCallback.fromReference(
    
    _$jni.JReference reference,
  ) :
    $type = type,
    super.fromReference(
      
      reference
    );

  static final _class = _$jni.JClass.forName(r'com/arashivision/sdkcamera/camera/InstaCameraManager$IActivateCameraCallback');

      /// The type which includes information such as the signature of this class.
static const type = $InstaCameraManager_IActivateCameraCallback$Type();
  static final _id_onStart = _class.instanceMethodId(
    r'onStart',
    r'()V',
  );

  static final _onStart = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public abstract void onStart()`
  void onStart(){
    
    _onStart(reference.pointer, _id_onStart as _$jni.JMethodIDPtr).check();
  }

  static final _id_onSuccess = _class.instanceMethodId(
    r'onSuccess',
    r'()V',
  );

  static final _onSuccess = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public abstract void onSuccess()`
  void onSuccess(){
    
    _onSuccess(reference.pointer, _id_onSuccess as _$jni.JMethodIDPtr).check();
  }

  static final _id_onFailed = _class.instanceMethodId(
    r'onFailed',
    r'(Ljava/lang/String;)V',
  );

  static final _onFailed = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();
  /// from: `public abstract void onFailed(java.lang.String string)`
  void onFailed(_$jni.JString string, ){
    
    _onFailed(reference.pointer, _id_onFailed as _$jni.JMethodIDPtr, string.reference.pointer).check();
  }

  /// Maps a specific port to the implemented interface.
  static final _$core.Map<int, $InstaCameraManager_IActivateCameraCallback> _$impls = {};
  static _$jni.JObjectPtr _$invoke(
    int port,
    _$jni.JObjectPtr descriptor,
    _$jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      _$jni.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final _$jni.Pointer<
          _$jni.NativeFunction<
              _$jni.JObjectPtr Function(
                  _$jni.Int64, _$jni.JObjectPtr, _$jni.JObjectPtr)>>
      _$invokePointer = _$jni.Pointer.fromFunction(_$invoke);

  static _$jni.Pointer<_$jni.Void> _$invokeMethod(
    int $p,
    _$jni.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
            if ($d == r'onStart()V') {
          _$impls[$p]!.onStart(
          );
          return _$jni.nullptr;
        }
        if ($d == r'onSuccess()V') {
          _$impls[$p]!.onSuccess(
          );
          return _$jni.nullptr;
        }
        if ($d == r'onFailed(Ljava/lang/String;)V') {
          _$impls[$p]!.onFailed(
$a[0].as(const _$jni.JStringType(), releaseOriginal: true),
          );
          return _$jni.nullptr;
        }
    } catch (e) {
      return _$jni.ProtectedJniExtensions.newDartException(e);
    }
    return _$jni.nullptr;
  }

  static void implementIn(
    _$jni.JImplementer implementer,
    $InstaCameraManager_IActivateCameraCallback $impl,
  ) {
    late final _$jni.RawReceivePort $p;
    $p = _$jni.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = _$jni.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      _$jni.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'com.arashivision.sdkcamera.camera.InstaCameraManager$IActivateCameraCallback',
      $p,
      _$invokePointer,
      [
        if ($impl.onStart$async) r'onStart()V',
        if ($impl.onSuccess$async) r'onSuccess()V',
        if ($impl.onFailed$async) r'onFailed(Ljava/lang/String;)V',
      ],
    );
    final $a = $p.sendPort.nativePort; 
    _$impls[$a] = $impl;
  }

  factory InstaCameraManager_IActivateCameraCallback.implement(
    $InstaCameraManager_IActivateCameraCallback $impl,
  ) {
    final $i = _$jni.JImplementer();
    implementIn($i, $impl);
    return InstaCameraManager_IActivateCameraCallback.fromReference(
      
      $i.implementReference(),
    );
  }
  }
abstract base mixin class $InstaCameraManager_IActivateCameraCallback {
  factory $InstaCameraManager_IActivateCameraCallback(
    {required void Function() onStart, bool onStart$async,
    required void Function() onSuccess, bool onSuccess$async,
    required void Function(_$jni.JString string) onFailed, bool onFailed$async,}
  ) = _$InstaCameraManager_IActivateCameraCallback;

  

  void onStart();
  bool get onStart$async => false;
  void onSuccess();
  bool get onSuccess$async => false;
  void onFailed(_$jni.JString string);
  bool get onFailed$async => false;
}

final class _$InstaCameraManager_IActivateCameraCallback with $InstaCameraManager_IActivateCameraCallback {
  _$InstaCameraManager_IActivateCameraCallback(
    {required void Function() onStart, this.onStart$async = false,
    required void Function() onSuccess, this.onSuccess$async = false,
    required void Function(_$jni.JString string) onFailed, this.onFailed$async = false,}
  ) :  _onStart = onStart, _onSuccess = onSuccess, _onFailed = onFailed;

  

  final void Function() _onStart;
  final bool onStart$async;
  final void Function() _onSuccess;
  final bool onSuccess$async;
  final void Function(_$jni.JString string) _onFailed;
  final bool onFailed$async;

  void onStart() {
    return _onStart();
  }  void onSuccess() {
    return _onSuccess();
  }  void onFailed(_$jni.JString string) {
    return _onFailed(string);
  }}
final class $InstaCameraManager_IActivateCameraCallback$Type extends _$jni.JObjType<InstaCameraManager_IActivateCameraCallback> {
  

  @_$jni.internal
  const $InstaCameraManager_IActivateCameraCallback$Type(
    
  );

  @_$jni.internal
  @_$core.override
  String get signature => r'Lcom/arashivision/sdkcamera/camera/InstaCameraManager$IActivateCameraCallback;';

  @_$jni.internal
  @_$core.override
  InstaCameraManager_IActivateCameraCallback fromReference(_$jni.JReference reference) => InstaCameraManager_IActivateCameraCallback.fromReference(
    
    reference
  );

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($InstaCameraManager_IActivateCameraCallback$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($InstaCameraManager_IActivateCameraCallback$Type) &&
        other is $InstaCameraManager_IActivateCameraCallback$Type;
  }
}

/// from: `com.arashivision.sdkcamera.camera.InstaCameraManager`
class InstaCameraManager extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<InstaCameraManager> $type;

  

  @_$jni.internal
  InstaCameraManager.fromReference(
    
    _$jni.JReference reference,
  ) :
    $type = type,
    super.fromReference(
      
      reference
    );

  static final _class = _$jni.JClass.forName(r'com/arashivision/sdkcamera/camera/InstaCameraManager');

      /// The type which includes information such as the signature of this class.
static const type = $InstaCameraManager$Type();
  /// from: `static public final int CONNECT_TYPE_NONE`
  static const CONNECT_TYPE_NONE = -1;
  /// from: `static public final int CONNECT_TYPE_USB`
  static const CONNECT_TYPE_USB = 1;
  /// from: `static public final int CONNECT_TYPE_WIFI`
  static const CONNECT_TYPE_WIFI = 2;
  /// from: `static public final int CONNECT_TYPE_BLE`
  static const CONNECT_TYPE_BLE = 3;
  /// from: `static public final int PREVIEW_TYPE_NORMAL`
  static const PREVIEW_TYPE_NORMAL = 0;
  /// from: `static public final int PREVIEW_TYPE_RECORD`
  static const PREVIEW_TYPE_RECORD = 1;
  /// from: `static public final int PREVIEW_TYPE_LIVE`
  static const PREVIEW_TYPE_LIVE = 2;
  /// from: `static public final int CAPTURE_TYPE_IDLE`
  static const CAPTURE_TYPE_IDLE = -1;
  /// from: `static public final int CAPTURE_TYPE_UNKNOWN`
  static const CAPTURE_TYPE_UNKNOWN = 0;
  /// from: `static public final int CAPTURE_TYPE_NORMAL_CAPTURE`
  static const CAPTURE_TYPE_NORMAL_CAPTURE = 1000;
  /// from: `static public final int CAPTURE_TYPE_HDR_CAPTURE`
  static const CAPTURE_TYPE_HDR_CAPTURE = 1001;
  /// from: `static public final int CAPTURE_TYPE_INTERVAL_SHOOTING`
  static const CAPTURE_TYPE_INTERVAL_SHOOTING = 1002;
  /// from: `static public final int CAPTURE_TYPE_NORMAL_RECORD`
  static const CAPTURE_TYPE_NORMAL_RECORD = 1003;
  /// from: `static public final int CAPTURE_TYPE_HDR_RECORD`
  static const CAPTURE_TYPE_HDR_RECORD = 1004;
  /// from: `static public final int CAPTURE_TYPE_TIMELAPSE`
  static const CAPTURE_TYPE_TIMELAPSE = 1005;
  /// from: `static public final int CAPTURE_TYPE_NIGHT_SCENE_CAPTURE`
  static const CAPTURE_TYPE_NIGHT_SCENE_CAPTURE = 1006;
  /// from: `static public final int CAPTURE_TYPE_BURST_CAPTURE`
  static const CAPTURE_TYPE_BURST_CAPTURE = 1007;
  /// from: `static public final int CAPTURE_TYPE_BULLET_TIME_RECORD`
  static const CAPTURE_TYPE_BULLET_TIME_RECORD = 1008;
  /// from: `static public final int CAPTURE_TYPE_TIME_SHIFT_RECORD`
  static const CAPTURE_TYPE_TIME_SHIFT_RECORD = 1009;
  /// from: `static public final int CAPTURE_TYPE_INTERVAL_RECORD`
  static const CAPTURE_TYPE_INTERVAL_RECORD = 1010;
  /// from: `static public final int CAPTURE_TYPE_STATIC_TIMELAPSE`
  static const CAPTURE_TYPE_STATIC_TIMELAPSE = 1011;
  /// from: `static public final int CAPTURE_TYPE_NORMAL_PANO_CAPTURE`
  static const CAPTURE_TYPE_NORMAL_PANO_CAPTURE = 1012;
  /// from: `static public final int CAPTURE_TYPE_HDR_PANO_CAPTURE`
  static const CAPTURE_TYPE_HDR_PANO_CAPTURE = 1013;
  /// from: `static public final int CAPTURE_TYPE_STARLAPSE_SHOOTING`
  static const CAPTURE_TYPE_STARLAPSE_SHOOTING = 1014;
  /// from: `static public final int CAPTURE_TYPE_SUPER_RECORD`
  static const CAPTURE_TYPE_SUPER_RECORD = 1015;
  /// from: `static public final int CAPTURE_TYPE_LOOPER_RECORD`
  static const CAPTURE_TYPE_LOOPER_RECORD = 1016;
  /// from: `static public final int CAPTURE_TYPE_FPV_RECORD`
  static const CAPTURE_TYPE_FPV_RECORD = 1017;
  /// from: `static public final int CAPTURE_TYPE_MOVIE_RECORD`
  static const CAPTURE_TYPE_MOVIE_RECORD = 1018;
  /// from: `static public final int CAPTURE_TYPE_SLOW_MOTION_RECORD`
  static const CAPTURE_TYPE_SLOW_MOTION_RECORD = 1019;
  /// from: `static public final int CAPTURE_TYPE_SELFIE_RECORD`
  static const CAPTURE_TYPE_SELFIE_RECORD = 1020;
  /// from: `static public final int CAMERA_MODE_SINGLE_FRONT`
  static const CAMERA_MODE_SINGLE_FRONT = 1;
  /// from: `static public final int CAMERA_MODE_SINGLE_REAR`
  static const CAMERA_MODE_SINGLE_REAR = 2;
  /// from: `static public final int CAMERA_MODE_PANORAMA`
  static const CAMERA_MODE_PANORAMA = 3;
  /// from: `static public final int FOCUS_SENSOR_FRONT`
  static const FOCUS_SENSOR_FRONT = 1;
  /// from: `static public final int FOCUS_SENSOR_REAR`
  static const FOCUS_SENSOR_REAR = 2;
  /// from: `static public final int FOCUS_SENSOR_ALL`
  static const FOCUS_SENSOR_ALL = 3;
  /// from: `static public final int FOV_TYPE_WIDE`
  static const FOV_TYPE_WIDE = 0;
  /// from: `static public final int FOV_TYPE_NARROW`
  static const FOV_TYPE_NARROW = 3;
  /// from: `static public final int FOV_TYPE_LINEAR`
  static const FOV_TYPE_LINEAR = 1;
  /// from: `static public final int FOV_TYPE_ULTRA_WIDE`
  static const FOV_TYPE_ULTRA_WIDE = 2;
  /// from: `static public final int GAMMA_MODE_STAND`
  static const GAMMA_MODE_STAND = 0;
  /// from: `static public final int GAMMA_MODE_LOG`
  static const GAMMA_MODE_LOG = 1;
  /// from: `static public final int GAMMA_MODE_VIVID`
  static const GAMMA_MODE_VIVID = 2;
  /// from: `static public final int FUNCTION_MODE_PREVIEW_STREAM`
  static const FUNCTION_MODE_PREVIEW_STREAM = 1;
  /// from: `static public final int FUNCTION_MODE_CAPTURE_NORMAL`
  static const FUNCTION_MODE_CAPTURE_NORMAL = 6;
  /// from: `static public final int FUNCTION_MODE_CAPTURE_NORMAL_PANO`
  static const FUNCTION_MODE_CAPTURE_NORMAL_PANO = 14;
  /// from: `static public final int FUNCTION_MODE_HDR_CAPTURE`
  static const FUNCTION_MODE_HDR_CAPTURE = 8;
  /// from: `static public final int FUNCTION_MODE_HDR_PANO_CAPTURE`
  static const FUNCTION_MODE_HDR_PANO_CAPTURE = 15;
  /// from: `static public final int FUNCTION_MODE_NIGHT_SCENE`
  static const FUNCTION_MODE_NIGHT_SCENE = 13;
  /// from: `static public final int FUNCTION_MODE_BURST`
  static const FUNCTION_MODE_BURST = 5;
  /// from: `static public final int FUNCTION_MODE_INTERVAL_SHOOTING`
  static const FUNCTION_MODE_INTERVAL_SHOOTING = 3;
  /// from: `static public final int FUNCTION_MODE_STARLAPSE_SHOOTING`
  static const FUNCTION_MODE_STARLAPSE_SHOOTING = 18;
  /// from: `static public final int FUNCTION_MODE_RECORD_NORMAL`
  static const FUNCTION_MODE_RECORD_NORMAL = 7;
  /// from: `static public final int FUNCTION_MODE_SUPER_RECORD`
  static const FUNCTION_MODE_SUPER_RECORD = 16;
  /// from: `static public final int FUNCTION_MODE_HDR_RECORD`
  static const FUNCTION_MODE_HDR_RECORD = 9;
  /// from: `static public final int FUNCTION_MODE_BULLETTIME`
  static const FUNCTION_MODE_BULLETTIME = 4;
  /// from: `static public final int FUNCTION_MODE_TIMELAPSE`
  static const FUNCTION_MODE_TIMELAPSE = 2;
  /// from: `static public final int FUNCTION_MODE_TIME_SHIFT`
  static const FUNCTION_MODE_TIME_SHIFT = 12;
  /// from: `static public final int FUNCTION_MODE_LOOPER_RECORD`
  static const FUNCTION_MODE_LOOPER_RECORD = 17;
  /// from: `static public final int FUNCTION_MODE_FPV_RECORD`
  static const FUNCTION_MODE_FPV_RECORD = 19;
  /// from: `static public final int FUNCTION_MODE_MOVIE_RECORD`
  static const FUNCTION_MODE_MOVIE_RECORD = 20;
  /// from: `static public final int FUNCTION_MODE_SLOW_MOTION_RECORD`
  static const FUNCTION_MODE_SLOW_MOTION_RECORD = 21;
  /// from: `static public final int FUNCTION_MODE_SELFIE_RECORD`
  static const FUNCTION_MODE_SELFIE_RECORD = 22;
  /// from: `static public final int EXPOSURE_MODE_AUTO`
  static const EXPOSURE_MODE_AUTO = 0;
  /// from: `static public final int EXPOSURE_MODE_ISO_FIRST`
  static const EXPOSURE_MODE_ISO_FIRST = 1;
  /// from: `static public final int EXPOSURE_MODE_SHUTTER_FIRST`
  static const EXPOSURE_MODE_SHUTTER_FIRST = 2;
  /// from: `static public final int EXPOSURE_MODE_MANUAL`
  static const EXPOSURE_MODE_MANUAL = 3;
  /// from: `static public final int EXPOSURE_MODE_ADAPTIVE`
  static const EXPOSURE_MODE_ADAPTIVE = 4;
  /// from: `static public final int SHUTTER_MODE_OFF`
  static const SHUTTER_MODE_OFF = 0;
  /// from: `static public final int SHUTTER_MODE_SPORT`
  static const SHUTTER_MODE_SPORT = 1;
  /// from: `static public final int SHUTTER_MODE_FASTER`
  static const SHUTTER_MODE_FASTER = 2;
  /// from: `static public final int WHITE_BALANCE_AUTO`
  static const WHITE_BALANCE_AUTO = 0;
  /// from: `static public final int WHITE_BALANCE_2700K`
  static const WHITE_BALANCE_2700K = 1;
  /// from: `static public final int WHITE_BALANCE_4000K`
  static const WHITE_BALANCE_4000K = 2;
  /// from: `static public final int WHITE_BALANCE_5000K`
  static const WHITE_BALANCE_5000K = 3;
  /// from: `static public final int WHITE_BALANCE_6500K`
  static const WHITE_BALANCE_6500K = 4;
  /// from: `static public final int WHITE_BALANCE_7500K`
  static const WHITE_BALANCE_7500K = 5;
  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_NewObject')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory InstaCameraManager() {
    
    return InstaCameraManager.fromReference(
      
      _new$(_class.reference.pointer, _id_new$ as _$jni.JMethodIDPtr).reference
    );
  }

  static final _id_getInstance = _class.staticMethodId(
    r'getInstance',
    r'()Lcom/arashivision/sdkcamera/camera/InstaCameraManager;',
  );

  static final _getInstance = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallStaticObjectMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `static public com.arashivision.sdkcamera.camera.InstaCameraManager getInstance()`
  /// The returned object must be released after use, by calling the [release] method.
  static InstaCameraManager getInstance(){
    
    return _getInstance(_class.reference.pointer, _id_getInstance as _$jni.JMethodIDPtr).object(const $InstaCameraManager$Type());
  }


  static final _id_registerCameraChangedCallback = _class.instanceMethodId(
    r'registerCameraChangedCallback',
    r'(Lcom/arashivision/sdkcamera/camera/callback/ICameraChangedCallback;)V',
  );

  static final _registerCameraChangedCallback = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();
  /// from: `public void registerCameraChangedCallback(com.arashivision.sdkcamera.camera.callback.ICameraChangedCallback iCameraChangedCallback)`
  void registerCameraChangedCallback(ICameraChangedCallback iCameraChangedCallback, ){
    
    _registerCameraChangedCallback(reference.pointer, _id_registerCameraChangedCallback as _$jni.JMethodIDPtr, iCameraChangedCallback.reference.pointer).check();
  }

  static final _id_unregisterCameraChangedCallback = _class.instanceMethodId(
    r'unregisterCameraChangedCallback',
    r'(Lcom/arashivision/sdkcamera/camera/callback/ICameraChangedCallback;)V',
  );

  static final _unregisterCameraChangedCallback = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();
  /// from: `public void unregisterCameraChangedCallback(com.arashivision.sdkcamera.camera.callback.ICameraChangedCallback iCameraChangedCallback)`
  void unregisterCameraChangedCallback(ICameraChangedCallback iCameraChangedCallback, ){
    
    _unregisterCameraChangedCallback(reference.pointer, _id_unregisterCameraChangedCallback as _$jni.JMethodIDPtr, iCameraChangedCallback.reference.pointer).check();
  }

  static final _id_openCamera = _class.instanceMethodId(
    r'openCamera',
    r'(I)V',
  );

  static final _openCamera = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();
  /// from: `public void openCamera(int i)`
  void openCamera(int i, ){
    
    _openCamera(reference.pointer, _id_openCamera as _$jni.JMethodIDPtr, i).check();
  }

  static final _id_closeCamera = _class.instanceMethodId(
    r'closeCamera',
    r'()V',
  );

  static final _closeCamera = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public void closeCamera()`
  void closeCamera(){
    
    _closeCamera(reference.pointer, _id_closeCamera as _$jni.JMethodIDPtr).check();
  }

  static final _id_getCameraConnectedType = _class.instanceMethodId(
    r'getCameraConnectedType',
    r'()I',
  );

  static final _getCameraConnectedType = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallIntMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public int getCameraConnectedType()`
  int getCameraConnectedType(){
    
    return _getCameraConnectedType(reference.pointer, _id_getCameraConnectedType as _$jni.JMethodIDPtr).integer;
  }

  static final _id_setScanBleListener = _class.instanceMethodId(
    r'setScanBleListener',
    r'(Lcom/arashivision/sdkcamera/camera/callback/IScanBleListener;)V',
  );

  static final _setScanBleListener = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();
  /// from: `public void setScanBleListener(com.arashivision.sdkcamera.camera.callback.IScanBleListener iScanBleListener)`
  void setScanBleListener(IScanBleListener iScanBleListener, ){
    
    _setScanBleListener(reference.pointer, _id_setScanBleListener as _$jni.JMethodIDPtr, iScanBleListener.reference.pointer).check();
  }

  static final _id_startBleScan = _class.instanceMethodId(
    r'startBleScan',
    r'(J)V',
  );

  static final _startBleScan = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int64,)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();
  /// from: `public void startBleScan(long j)`
  void startBleScan(int j, ){
    
    _startBleScan(reference.pointer, _id_startBleScan as _$jni.JMethodIDPtr, j).check();
  }

  static final _id_stopBleScan = _class.instanceMethodId(
    r'stopBleScan',
    r'()V',
  );

  static final _stopBleScan = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public void stopBleScan()`
  void stopBleScan(){
    
    _stopBleScan(reference.pointer, _id_stopBleScan as _$jni.JMethodIDPtr).check();
  }

  static final _id_isBleScanning = _class.instanceMethodId(
    r'isBleScanning',
    r'()Z',
  );

  static final _isBleScanning = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallBooleanMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public boolean isBleScanning()`
  bool isBleScanning(){
    
    return _isBleScanning(reference.pointer, _id_isBleScanning as _$jni.JMethodIDPtr).boolean;
  }

  static final _id_connectBle = _class.instanceMethodId(
    r'connectBle',
    r'(Lcom/clj/fastble/data/BleDevice;)V',
  );

  static final _connectBle = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();
  /// from: `public void connectBle(com.clj.fastble.data.BleDevice bleDevice)`
  void connectBle(_$jni.JObject bleDevice, ){
    
    _connectBle(reference.pointer, _id_connectBle as _$jni.JMethodIDPtr, bleDevice.reference.pointer).check();
  }

  static final _id_disconnectBle = _class.instanceMethodId(
    r'disconnectBle',
    r'()V',
  );

  static final _disconnectBle = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public void disconnectBle()`
  void disconnectBle(){
    
    _disconnectBle(reference.pointer, _id_disconnectBle as _$jni.JMethodIDPtr).check();
  }

  static final _id_fetchCameraOptions = _class.instanceMethodId(
    r'fetchCameraOptions',
    r'(Lcom/arashivision/sdkcamera/camera/callback/ICameraOperateCallback;)V',
  );

  static final _fetchCameraOptions = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();
  /// from: `public void fetchCameraOptions(com.arashivision.sdkcamera.camera.callback.ICameraOperateCallback iCameraOperateCallback)`
  void fetchCameraOptions(ICameraOperateCallback iCameraOperateCallback, ){
    
    _fetchCameraOptions(reference.pointer, _id_fetchCameraOptions as _$jni.JMethodIDPtr, iCameraOperateCallback.reference.pointer).check();
  }

  static final _id_getWifiInfo = _class.instanceMethodId(
    r'getWifiInfo',
    r'()Lcom/arashivision/onecamera/camerarequest/WifiInfo;',
  );

  static final _getWifiInfo = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallObjectMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public com.arashivision.onecamera.camerarequest.WifiInfo getWifiInfo()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getWifiInfo(){
    
    return _getWifiInfo(reference.pointer, _id_getWifiInfo as _$jni.JMethodIDPtr).object(const _$jni.JObjectType());
  }

  static final _id_getWindowCropInfo = _class.instanceMethodId(
    r'getWindowCropInfo',
    r'()Lcom/arashivision/onecamera/camerarequest/WindowCropInfo;',
  );

  static final _getWindowCropInfo = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallObjectMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public com.arashivision.onecamera.camerarequest.WindowCropInfo getWindowCropInfo()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getWindowCropInfo(){
    
    return _getWindowCropInfo(reference.pointer, _id_getWindowCropInfo as _$jni.JMethodIDPtr).object(const _$jni.JObjectType());
  }

  static final _id_getCameraType = _class.instanceMethodId(
    r'getCameraType',
    r'()Ljava/lang/String;',
  );

  static final _getCameraType = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallObjectMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public java.lang.String getCameraType()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString getCameraType(){
    
    return _getCameraType(reference.pointer, _id_getCameraType as _$jni.JMethodIDPtr).object(const _$jni.JStringType());
  }

  static final _id_getCameraVersion = _class.instanceMethodId(
    r'getCameraVersion',
    r'()Ljava/lang/String;',
  );

  static final _getCameraVersion = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallObjectMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public java.lang.String getCameraVersion()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString getCameraVersion(){
    
    return _getCameraVersion(reference.pointer, _id_getCameraVersion as _$jni.JMethodIDPtr).object(const _$jni.JStringType());
  }

  static final _id_getCameraSerial = _class.instanceMethodId(
    r'getCameraSerial',
    r'()Ljava/lang/String;',
  );

  static final _getCameraSerial = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallObjectMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public java.lang.String getCameraSerial()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString getCameraSerial(){
    
    return _getCameraSerial(reference.pointer, _id_getCameraSerial as _$jni.JMethodIDPtr).object(const _$jni.JStringType());
  }

  static final _id_getMediaOffset = _class.instanceMethodId(
    r'getMediaOffset',
    r'()Ljava/lang/String;',
  );

  static final _getMediaOffset = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallObjectMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public java.lang.String getMediaOffset()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString getMediaOffset(){
    
    return _getMediaOffset(reference.pointer, _id_getMediaOffset as _$jni.JMethodIDPtr).object(const _$jni.JStringType());
  }

  static final _id_getMediaOffsetV2 = _class.instanceMethodId(
    r'getMediaOffsetV2',
    r'()Ljava/lang/String;',
  );

  static final _getMediaOffsetV2 = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallObjectMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public java.lang.String getMediaOffsetV2()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString getMediaOffsetV2(){
    
    return _getMediaOffsetV2(reference.pointer, _id_getMediaOffsetV2 as _$jni.JMethodIDPtr).object(const _$jni.JStringType());
  }

  static final _id_getMediaOffsetV3 = _class.instanceMethodId(
    r'getMediaOffsetV3',
    r'()Ljava/lang/String;',
  );

  static final _getMediaOffsetV3 = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallObjectMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public java.lang.String getMediaOffsetV3()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString getMediaOffsetV3(){
    
    return _getMediaOffsetV3(reference.pointer, _id_getMediaOffsetV3 as _$jni.JMethodIDPtr).object(const _$jni.JStringType());
  }

  static final _id_isCameraSelfie = _class.instanceMethodId(
    r'isCameraSelfie',
    r'()Z',
  );

  static final _isCameraSelfie = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallBooleanMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public boolean isCameraSelfie()`
  bool isCameraSelfie(){
    
    return _isCameraSelfie(reference.pointer, _id_isCameraSelfie as _$jni.JMethodIDPtr).boolean;
  }

  static final _id_getGyroTimeStamp = _class.instanceMethodId(
    r'getGyroTimeStamp',
    r'()D',
  );

  static final _getGyroTimeStamp = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallDoubleMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public double getGyroTimeStamp()`
  double getGyroTimeStamp(){
    
    return _getGyroTimeStamp(reference.pointer, _id_getGyroTimeStamp as _$jni.JMethodIDPtr).doubleFloat;
  }

  static final _id_getBatteryType = _class.instanceMethodId(
    r'getBatteryType',
    r'()I',
  );

  static final _getBatteryType = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallIntMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public int getBatteryType()`
  int getBatteryType(){
    
    return _getBatteryType(reference.pointer, _id_getBatteryType as _$jni.JMethodIDPtr).integer;
  }

  static final _id_getCameraCurrentBatteryLevel = _class.instanceMethodId(
    r'getCameraCurrentBatteryLevel',
    r'()I',
  );

  static final _getCameraCurrentBatteryLevel = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallIntMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public int getCameraCurrentBatteryLevel()`
  int getCameraCurrentBatteryLevel(){
    
    return _getCameraCurrentBatteryLevel(reference.pointer, _id_getCameraCurrentBatteryLevel as _$jni.JMethodIDPtr).integer;
  }

  static final _id_isCameraCharging = _class.instanceMethodId(
    r'isCameraCharging',
    r'()Z',
  );

  static final _isCameraCharging = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallBooleanMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public boolean isCameraCharging()`
  bool isCameraCharging(){
    
    return _isCameraCharging(reference.pointer, _id_isCameraCharging as _$jni.JMethodIDPtr).boolean;
  }

  static final _id_fetchCameraBatteryState = _class.instanceMethodId(
    r'fetchCameraBatteryState',
    r'()V',
  );

  static final _fetchCameraBatteryState = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public void fetchCameraBatteryState()`
  void fetchCameraBatteryState(){
    
    _fetchCameraBatteryState(reference.pointer, _id_fetchCameraBatteryState as _$jni.JMethodIDPtr).check();
  }

  static final _id_getCameraStorageTotalSpace = _class.instanceMethodId(
    r'getCameraStorageTotalSpace',
    r'()J',
  );

  static final _getCameraStorageTotalSpace = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallLongMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public long getCameraStorageTotalSpace()`
  int getCameraStorageTotalSpace(){
    
    return _getCameraStorageTotalSpace(reference.pointer, _id_getCameraStorageTotalSpace as _$jni.JMethodIDPtr).long;
  }

  static final _id_getCameraStorageFreeSpace = _class.instanceMethodId(
    r'getCameraStorageFreeSpace',
    r'()J',
  );

  static final _getCameraStorageFreeSpace = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallLongMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public long getCameraStorageFreeSpace()`
  int getCameraStorageFreeSpace(){
    
    return _getCameraStorageFreeSpace(reference.pointer, _id_getCameraStorageFreeSpace as _$jni.JMethodIDPtr).long;
  }

  static final _id_isSdCardEnabled = _class.instanceMethodId(
    r'isSdCardEnabled',
    r'()Z',
  );

  static final _isSdCardEnabled = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallBooleanMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public boolean isSdCardEnabled()`
  bool isSdCardEnabled(){
    
    return _isSdCardEnabled(reference.pointer, _id_isSdCardEnabled as _$jni.JMethodIDPtr).boolean;
  }

  static final _id_fetchCameraStorageState = _class.instanceMethodId(
    r'fetchCameraStorageState',
    r'()V',
  );

  static final _fetchCameraStorageState = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public void fetchCameraStorageState()`
  void fetchCameraStorageState(){
    
    _fetchCameraStorageState(reference.pointer, _id_fetchCameraStorageState as _$jni.JMethodIDPtr).check();
  }

  static final _id_setNetIdToCamera = _class.instanceMethodId(
    r'setNetIdToCamera',
    r'(J)V',
  );

  static final _setNetIdToCamera = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int64,)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();
  /// from: `public void setNetIdToCamera(long j)`
  void setNetIdToCamera(int j, ){
    
    _setNetIdToCamera(reference.pointer, _id_setNetIdToCamera as _$jni.JMethodIDPtr, j).check();
  }

  static final _id_getCameraHttpPrefix = _class.instanceMethodId(
    r'getCameraHttpPrefix',
    r'()Ljava/lang/String;',
  );

  static final _getCameraHttpPrefix = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallObjectMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public java.lang.String getCameraHttpPrefix()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString getCameraHttpPrefix(){
    
    return _getCameraHttpPrefix(reference.pointer, _id_getCameraHttpPrefix as _$jni.JMethodIDPtr).object(const _$jni.JStringType());
  }

  static final _id_getAllUrlList = _class.instanceMethodId(
    r'getAllUrlList',
    r'()Ljava/util/List;',
  );

  static final _getAllUrlList = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallObjectMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public java.util.List getAllUrlList()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JList<_$jni.JString> getAllUrlList(){
    
    return _getAllUrlList(reference.pointer, _id_getAllUrlList as _$jni.JMethodIDPtr).object(const _$jni.JListType(_$jni.JStringType()));
  }

  static final _id_getAllUrlListIncludeRecording = _class.instanceMethodId(
    r'getAllUrlListIncludeRecording',
    r'()Ljava/util/List;',
  );

  static final _getAllUrlListIncludeRecording = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallObjectMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public java.util.List getAllUrlListIncludeRecording()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JList<_$jni.JString> getAllUrlListIncludeRecording(){
    
    return _getAllUrlListIncludeRecording(reference.pointer, _id_getAllUrlListIncludeRecording as _$jni.JMethodIDPtr).object(const _$jni.JListType(_$jni.JStringType()));
  }

  static final _id_getRawUrlList = _class.instanceMethodId(
    r'getRawUrlList',
    r'()Ljava/util/List;',
  );

  static final _getRawUrlList = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallObjectMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public java.util.List getRawUrlList()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JList<_$jni.JString> getRawUrlList(){
    
    return _getRawUrlList(reference.pointer, _id_getRawUrlList as _$jni.JMethodIDPtr).object(const _$jni.JListType(_$jni.JStringType()));
  }

  static final _id_getAllInsDataList = _class.instanceMethodId(
    r'getAllInsDataList',
    r'()Ljava/util/List;',
  );

  static final _getAllInsDataList = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallObjectMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public java.util.List getAllInsDataList()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JList<_$jni.JString> getAllInsDataList(){
    
    return _getAllInsDataList(reference.pointer, _id_getAllInsDataList as _$jni.JMethodIDPtr).object(const _$jni.JListType(_$jni.JStringType()));
  }

  static final _id_getCameraInfoMap = _class.instanceMethodId(
    r'getCameraInfoMap',
    r'()Ljava/util/HashMap;',
  );

  static final _getCameraInfoMap = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallObjectMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public java.util.HashMap getCameraInfoMap()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getCameraInfoMap(){
    
    return _getCameraInfoMap(reference.pointer, _id_getCameraInfoMap as _$jni.JMethodIDPtr).object(const _$jni.JObjectType());
  }

  static final _id_deleteFile = _class.instanceMethodId(
    r'deleteFile',
    r'(Ljava/lang/String;Lcom/arashivision/sdkcamera/camera/callback/ICameraOperateCallback;)V',
  );

  static final _deleteFile = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>, _$jni.Pointer<_$jni.Void>)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, _$jni.Pointer<_$jni.Void>)>();
  /// from: `public void deleteFile(java.lang.String string, com.arashivision.sdkcamera.camera.callback.ICameraOperateCallback iCameraOperateCallback)`
  void deleteFile(_$jni.JString string, ICameraOperateCallback iCameraOperateCallback, ){
    
    _deleteFile(reference.pointer, _id_deleteFile as _$jni.JMethodIDPtr, string.reference.pointer, iCameraOperateCallback.reference.pointer).check();
  }

  static final _id_deleteFileList = _class.instanceMethodId(
    r'deleteFileList',
    r'(Ljava/util/List;Lcom/arashivision/sdkcamera/camera/callback/ICameraOperateCallback;)V',
  );

  static final _deleteFileList = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>, _$jni.Pointer<_$jni.Void>)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, _$jni.Pointer<_$jni.Void>)>();
  /// from: `public void deleteFileList(java.util.List list, com.arashivision.sdkcamera.camera.callback.ICameraOperateCallback iCameraOperateCallback)`
  void deleteFileList(_$jni.JList<_$jni.JString> list, ICameraOperateCallback iCameraOperateCallback, ){
    
    _deleteFileList(reference.pointer, _id_deleteFileList as _$jni.JMethodIDPtr, list.reference.pointer, iCameraOperateCallback.reference.pointer).check();
  }

  static final _id_activateCamera = _class.instanceMethodId(
    r'activateCamera',
    r'(Lcom/arashivision/sdkcamera/api/bean/SecretInfo;Lcom/arashivision/sdkcamera/camera/InstaCameraManager$IActivateCameraCallback;)V',
  );

  static final _activateCamera = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>, _$jni.Pointer<_$jni.Void>)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, _$jni.Pointer<_$jni.Void>)>();
  /// from: `public void activateCamera(com.arashivision.sdkcamera.api.bean.SecretInfo secretInfo, com.arashivision.sdkcamera.camera.InstaCameraManager$IActivateCameraCallback iActivateCameraCallback)`
  void activateCamera(SecretInfo secretInfo, InstaCameraManager_IActivateCameraCallback iActivateCameraCallback, ){
    
    _activateCamera(reference.pointer, _id_activateCamera as _$jni.JMethodIDPtr, secretInfo.reference.pointer, iActivateCameraCallback.reference.pointer).check();
  }

  static final _id_startPreviewStream = _class.instanceMethodId(
    r'startPreviewStream',
    r'()V',
  );

  static final _startPreviewStream = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public void startPreviewStream()`
  void startPreviewStream(){
    
    _startPreviewStream(reference.pointer, _id_startPreviewStream as _$jni.JMethodIDPtr).check();
  }

  static final _id_startPreviewStream$1 = _class.instanceMethodId(
    r'startPreviewStream',
    r'(Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;)V',
  );

  static final _startPreviewStream$1 = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();
  /// from: `public void startPreviewStream(com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution previewStreamResolution)`
  void startPreviewStream$1(PreviewStreamResolution previewStreamResolution, ){
    
    _startPreviewStream$1(reference.pointer, _id_startPreviewStream$1 as _$jni.JMethodIDPtr, previewStreamResolution.reference.pointer).check();
  }

  static final _id_startPreviewStream$2 = _class.instanceMethodId(
    r'startPreviewStream',
    r'(Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;I)V',
  );

  static final _startPreviewStream$2 = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>, _$jni.Int32)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, int)>();
  /// from: `public void startPreviewStream(com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution previewStreamResolution, int i)`
  void startPreviewStream$2(PreviewStreamResolution previewStreamResolution, int i, ){
    
    _startPreviewStream$2(reference.pointer, _id_startPreviewStream$2 as _$jni.JMethodIDPtr, previewStreamResolution.reference.pointer, i).check();
  }

  static final _id_startPreviewStream$3 = _class.instanceMethodId(
    r'startPreviewStream',
    r'(Lcom/arashivision/sdkcamera/camera/preview/PreviewParamsBuilder;)V',
  );

  static final _startPreviewStream$3 = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();
  /// from: `public void startPreviewStream(com.arashivision.sdkcamera.camera.preview.PreviewParamsBuilder previewParamsBuilder)`
  void startPreviewStream$3(PreviewParamsBuilder previewParamsBuilder, ){
    
    _startPreviewStream$3(reference.pointer, _id_startPreviewStream$3 as _$jni.JMethodIDPtr, previewParamsBuilder.reference.pointer).check();
  }

  static final _id_getSupportedPreviewStreamResolution = _class.instanceMethodId(
    r'getSupportedPreviewStreamResolution',
    r'(I)Ljava/util/List;',
  );

  static final _getSupportedPreviewStreamResolution = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallObjectMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();
  /// from: `public java.util.List getSupportedPreviewStreamResolution(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JList<PreviewStreamResolution> getSupportedPreviewStreamResolution(int i, ){
    
    return _getSupportedPreviewStreamResolution(reference.pointer, _id_getSupportedPreviewStreamResolution as _$jni.JMethodIDPtr, i).object(const _$jni.JListType($PreviewStreamResolution$Type()));
  }

  static final _id_closePreviewStream = _class.instanceMethodId(
    r'closePreviewStream',
    r'()V',
  );

  static final _closePreviewStream = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public void closePreviewStream()`
  void closePreviewStream(){
    
    _closePreviewStream(reference.pointer, _id_closePreviewStream as _$jni.JMethodIDPtr).check();
  }

  static final _id_setPreviewStatusChangedListener = _class.instanceMethodId(
    r'setPreviewStatusChangedListener',
    r'(Lcom/arashivision/sdkcamera/camera/callback/IPreviewStatusListener;)V',
  );

  static final _setPreviewStatusChangedListener = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();
  /// from: `public void setPreviewStatusChangedListener(com.arashivision.sdkcamera.camera.callback.IPreviewStatusListener iPreviewStatusListener)`
  void setPreviewStatusChangedListener(IPreviewStatusListener iPreviewStatusListener, ){
    
    _setPreviewStatusChangedListener(reference.pointer, _id_setPreviewStatusChangedListener as _$jni.JMethodIDPtr, iPreviewStatusListener.reference.pointer).check();
  }

  static final _id_setStreamEncode = _class.instanceMethodId(
    r'setStreamEncode',
    r'()V',
  );

  static final _setStreamEncode = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public void setStreamEncode()`
  void setStreamEncode(){
    
    _setStreamEncode(reference.pointer, _id_setStreamEncode as _$jni.JMethodIDPtr).check();
  }

  static final _id_setPipeline = _class.instanceMethodId(
    r'setPipeline',
    r'(Ljava/lang/Object;)V',
  );

  static final _setPipeline = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();
  /// from: `public void setPipeline(java.lang.Object object)`
  void setPipeline(_$jni.JObject object, ){
    
    _setPipeline(reference.pointer, _id_setPipeline as _$jni.JMethodIDPtr, object.reference.pointer).check();
  }

  static final _id_startLive = _class.instanceMethodId(
    r'startLive',
    r'(Lcom/arashivision/sdkcamera/camera/live/LiveParamsBuilder;Lcom/arashivision/sdkcamera/camera/callback/ILiveStatusListener;)V',
  );

  static final _startLive = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>, _$jni.Pointer<_$jni.Void>)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, _$jni.Pointer<_$jni.Void>)>();
  /// from: `public void startLive(com.arashivision.sdkcamera.camera.live.LiveParamsBuilder liveParamsBuilder, com.arashivision.sdkcamera.camera.callback.ILiveStatusListener iLiveStatusListener)`
  void startLive(LiveParamsBuilder liveParamsBuilder, ILiveStatusListener iLiveStatusListener, ){
    
    _startLive(reference.pointer, _id_startLive as _$jni.JMethodIDPtr, liveParamsBuilder.reference.pointer, iLiveStatusListener.reference.pointer).check();
  }

  static final _id_stopLive = _class.instanceMethodId(
    r'stopLive',
    r'()V',
  );

  static final _stopLive = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public void stopLive()`
  void stopLive(){
    
    _stopLive(reference.pointer, _id_stopLive as _$jni.JMethodIDPtr).check();
  }

  static final _id_setCaptureStatusListener = _class.instanceMethodId(
    r'setCaptureStatusListener',
    r'(Lcom/arashivision/sdkcamera/camera/callback/ICaptureStatusListener;)V',
  );

  static final _setCaptureStatusListener = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();
  /// from: `public void setCaptureStatusListener(com.arashivision.sdkcamera.camera.callback.ICaptureStatusListener iCaptureStatusListener)`
  void setCaptureStatusListener(ICaptureStatusListener iCaptureStatusListener, ){
    
    _setCaptureStatusListener(reference.pointer, _id_setCaptureStatusListener as _$jni.JMethodIDPtr, iCaptureStatusListener.reference.pointer).check();
  }

  static final _id_getCurrentCaptureType = _class.instanceMethodId(
    r'getCurrentCaptureType',
    r'()I',
  );

  static final _getCurrentCaptureType = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallIntMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public int getCurrentCaptureType()`
  int getCurrentCaptureType(){
    
    return _getCurrentCaptureType(reference.pointer, _id_getCurrentCaptureType as _$jni.JMethodIDPtr).integer;
  }

  static final _id_getCurrentCaptureCount = _class.instanceMethodId(
    r'getCurrentCaptureCount',
    r'()I',
  );

  static final _getCurrentCaptureCount = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallIntMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public int getCurrentCaptureCount()`
  int getCurrentCaptureCount(){
    
    return _getCurrentCaptureCount(reference.pointer, _id_getCurrentCaptureCount as _$jni.JMethodIDPtr).integer;
  }

  static final _id_getCurrentRecordTime = _class.instanceMethodId(
    r'getCurrentRecordTime',
    r'()J',
  );

  static final _getCurrentRecordTime = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallLongMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public long getCurrentRecordTime()`
  int getCurrentRecordTime(){
    
    return _getCurrentRecordTime(reference.pointer, _id_getCurrentRecordTime as _$jni.JMethodIDPtr).long;
  }

  static final _id_startNormalCapture = _class.instanceMethodId(
    r'startNormalCapture',
    r'(I)V',
  );

  static final _startNormalCapture = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();
  /// from: `public void startNormalCapture(int i)`
  void startNormalCapture(int i, ){
    
    _startNormalCapture(reference.pointer, _id_startNormalCapture as _$jni.JMethodIDPtr, i).check();
  }

  static final _id_startNormalCapture$1 = _class.instanceMethodId(
    r'startNormalCapture',
    r'(II)V',
  );

  static final _startNormalCapture$1 = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32, _$jni.Int32)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int, int)>();
  /// from: `public void startNormalCapture(int i, int i1)`
  void startNormalCapture$1(int i, int i1, ){
    
    _startNormalCapture$1(reference.pointer, _id_startNormalCapture$1 as _$jni.JMethodIDPtr, i, i1).check();
  }

  static final _id_startNormalCapture$2 = _class.instanceMethodId(
    r'startNormalCapture',
    r'(I[BI)V',
  );

  static final _startNormalCapture$2 = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32, _$jni.Pointer<_$jni.Void>, _$jni.Int32)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int, _$jni.Pointer<_$jni.Void>, int)>();
  /// from: `public void startNormalCapture(int i, byte[] bs, int i1)`
  void startNormalCapture$2(int i, _$jni.JArray<_$jni.jbyte> bs, int i1, ){
    
    _startNormalCapture$2(reference.pointer, _id_startNormalCapture$2 as _$jni.JMethodIDPtr, i, bs.reference.pointer, i1).check();
  }

  static final _id_startNormalPanoCapture = _class.instanceMethodId(
    r'startNormalPanoCapture',
    r'(II)V',
  );

  static final _startNormalPanoCapture = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32, _$jni.Int32)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int, int)>();
  /// from: `public void startNormalPanoCapture(int i, int i1)`
  void startNormalPanoCapture(int i, int i1, ){
    
    _startNormalPanoCapture(reference.pointer, _id_startNormalPanoCapture as _$jni.JMethodIDPtr, i, i1).check();
  }

  static final _id_startNormalPanoCapture$1 = _class.instanceMethodId(
    r'startNormalPanoCapture',
    r'(III)V',
  );

  static final _startNormalPanoCapture$1 = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32, _$jni.Int32, _$jni.Int32)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int, int, int)>();
  /// from: `public void startNormalPanoCapture(int i, int i1, int i2)`
  void startNormalPanoCapture$1(int i, int i1, int i2, ){
    
    _startNormalPanoCapture$1(reference.pointer, _id_startNormalPanoCapture$1 as _$jni.JMethodIDPtr, i, i1, i2).check();
  }

  static final _id_startNormalPanoCapture$2 = _class.instanceMethodId(
    r'startNormalPanoCapture',
    r'(II[BI)V',
  );

  static final _startNormalPanoCapture$2 = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32, _$jni.Int32, _$jni.Pointer<_$jni.Void>, _$jni.Int32)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int, int, _$jni.Pointer<_$jni.Void>, int)>();
  /// from: `public void startNormalPanoCapture(int i, int i1, byte[] bs, int i2)`
  void startNormalPanoCapture$2(int i, int i1, _$jni.JArray<_$jni.jbyte> bs, int i2, ){
    
    _startNormalPanoCapture$2(reference.pointer, _id_startNormalPanoCapture$2 as _$jni.JMethodIDPtr, i, i1, bs.reference.pointer, i2).check();
  }

  static final _id_startHDRCapture = _class.instanceMethodId(
    r'startHDRCapture',
    r'(I)V',
  );

  static final _startHDRCapture = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();
  /// from: `public void startHDRCapture(int i)`
  void startHDRCapture(int i, ){
    
    _startHDRCapture(reference.pointer, _id_startHDRCapture as _$jni.JMethodIDPtr, i).check();
  }

  static final _id_startHDRCapture$1 = _class.instanceMethodId(
    r'startHDRCapture',
    r'(II)V',
  );

  static final _startHDRCapture$1 = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32, _$jni.Int32)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int, int)>();
  /// from: `public void startHDRCapture(int i, int i1)`
  void startHDRCapture$1(int i, int i1, ){
    
    _startHDRCapture$1(reference.pointer, _id_startHDRCapture$1 as _$jni.JMethodIDPtr, i, i1).check();
  }

  static final _id_startHDRCapture$2 = _class.instanceMethodId(
    r'startHDRCapture',
    r'(I[BI)V',
  );

  static final _startHDRCapture$2 = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32, _$jni.Pointer<_$jni.Void>, _$jni.Int32)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int, _$jni.Pointer<_$jni.Void>, int)>();
  /// from: `public void startHDRCapture(int i, byte[] bs, int i1)`
  void startHDRCapture$2(int i, _$jni.JArray<_$jni.jbyte> bs, int i1, ){
    
    _startHDRCapture$2(reference.pointer, _id_startHDRCapture$2 as _$jni.JMethodIDPtr, i, bs.reference.pointer, i1).check();
  }

  static final _id_startHDRPanoCapture = _class.instanceMethodId(
    r'startHDRPanoCapture',
    r'(II)V',
  );

  static final _startHDRPanoCapture = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32, _$jni.Int32)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int, int)>();
  /// from: `public void startHDRPanoCapture(int i, int i1)`
  void startHDRPanoCapture(int i, int i1, ){
    
    _startHDRPanoCapture(reference.pointer, _id_startHDRPanoCapture as _$jni.JMethodIDPtr, i, i1).check();
  }

  static final _id_startHDRPanoCapture$1 = _class.instanceMethodId(
    r'startHDRPanoCapture',
    r'(III)V',
  );

  static final _startHDRPanoCapture$1 = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32, _$jni.Int32, _$jni.Int32)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int, int, int)>();
  /// from: `public void startHDRPanoCapture(int i, int i1, int i2)`
  void startHDRPanoCapture$1(int i, int i1, int i2, ){
    
    _startHDRPanoCapture$1(reference.pointer, _id_startHDRPanoCapture$1 as _$jni.JMethodIDPtr, i, i1, i2).check();
  }

  static final _id_startHDRPanoCapture$2 = _class.instanceMethodId(
    r'startHDRPanoCapture',
    r'(II[BI)V',
  );

  static final _startHDRPanoCapture$2 = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32, _$jni.Int32, _$jni.Pointer<_$jni.Void>, _$jni.Int32)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int, int, _$jni.Pointer<_$jni.Void>, int)>();
  /// from: `public void startHDRPanoCapture(int i, int i1, byte[] bs, int i2)`
  void startHDRPanoCapture$2(int i, int i1, _$jni.JArray<_$jni.jbyte> bs, int i2, ){
    
    _startHDRPanoCapture$2(reference.pointer, _id_startHDRPanoCapture$2 as _$jni.JMethodIDPtr, i, i1, bs.reference.pointer, i2).check();
  }

  static final _id_startNightScene = _class.instanceMethodId(
    r'startNightScene',
    r'(II)V',
  );

  static final _startNightScene = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32, _$jni.Int32)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int, int)>();
  /// from: `public void startNightScene(int i, int i1)`
  void startNightScene(int i, int i1, ){
    
    _startNightScene(reference.pointer, _id_startNightScene as _$jni.JMethodIDPtr, i, i1).check();
  }

  static final _id_startNightScene$1 = _class.instanceMethodId(
    r'startNightScene',
    r'(I[BI)V',
  );

  static final _startNightScene$1 = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32, _$jni.Pointer<_$jni.Void>, _$jni.Int32)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int, _$jni.Pointer<_$jni.Void>, int)>();
  /// from: `public void startNightScene(int i, byte[] bs, int i1)`
  void startNightScene$1(int i, _$jni.JArray<_$jni.jbyte> bs, int i1, ){
    
    _startNightScene$1(reference.pointer, _id_startNightScene$1 as _$jni.JMethodIDPtr, i, bs.reference.pointer, i1).check();
  }

  static final _id_startIntervalShooting = _class.instanceMethodId(
    r'startIntervalShooting',
    r'()V',
  );

  static final _startIntervalShooting = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public void startIntervalShooting()`
  void startIntervalShooting(){
    
    _startIntervalShooting(reference.pointer, _id_startIntervalShooting as _$jni.JMethodIDPtr).check();
  }

  static final _id_startIntervalShooting$1 = _class.instanceMethodId(
    r'startIntervalShooting',
    r'([B)V',
  );

  static final _startIntervalShooting$1 = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();
  /// from: `public void startIntervalShooting(byte[] bs)`
  void startIntervalShooting$1(_$jni.JArray<_$jni.jbyte> bs, ){
    
    _startIntervalShooting$1(reference.pointer, _id_startIntervalShooting$1 as _$jni.JMethodIDPtr, bs.reference.pointer).check();
  }

  static final _id_stopIntervalShooting = _class.instanceMethodId(
    r'stopIntervalShooting',
    r'()V',
  );

  static final _stopIntervalShooting = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public void stopIntervalShooting()`
  void stopIntervalShooting(){
    
    _stopIntervalShooting(reference.pointer, _id_stopIntervalShooting as _$jni.JMethodIDPtr).check();
  }

  static final _id_setIntervalShootingTime = _class.instanceMethodId(
    r'setIntervalShootingTime',
    r'(I)V',
  );

  static final _setIntervalShootingTime = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();
  /// from: `public void setIntervalShootingTime(int i)`
  void setIntervalShootingTime(int i, ){
    
    _setIntervalShootingTime(reference.pointer, _id_setIntervalShootingTime as _$jni.JMethodIDPtr, i).check();
  }

  static final _id_startBurstCapture = _class.instanceMethodId(
    r'startBurstCapture',
    r'(I)V',
  );

  static final _startBurstCapture = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();
  /// from: `public void startBurstCapture(int i)`
  void startBurstCapture(int i, ){
    
    _startBurstCapture(reference.pointer, _id_startBurstCapture as _$jni.JMethodIDPtr, i).check();
  }

  static final _id_startBurstCapture$1 = _class.instanceMethodId(
    r'startBurstCapture',
    r'(II)V',
  );

  static final _startBurstCapture$1 = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32, _$jni.Int32)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int, int)>();
  /// from: `public void startBurstCapture(int i, int i1)`
  void startBurstCapture$1(int i, int i1, ){
    
    _startBurstCapture$1(reference.pointer, _id_startBurstCapture$1 as _$jni.JMethodIDPtr, i, i1).check();
  }

  static final _id_startBurstCapture$2 = _class.instanceMethodId(
    r'startBurstCapture',
    r'(I[BI)V',
  );

  static final _startBurstCapture$2 = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32, _$jni.Pointer<_$jni.Void>, _$jni.Int32)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int, _$jni.Pointer<_$jni.Void>, int)>();
  /// from: `public void startBurstCapture(int i, byte[] bs, int i1)`
  void startBurstCapture$2(int i, _$jni.JArray<_$jni.jbyte> bs, int i1, ){
    
    _startBurstCapture$2(reference.pointer, _id_startBurstCapture$2 as _$jni.JMethodIDPtr, i, bs.reference.pointer, i1).check();
  }

  static final _id_startNormalRecord = _class.instanceMethodId(
    r'startNormalRecord',
    r'()V',
  );

  static final _startNormalRecord = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public void startNormalRecord()`
  void startNormalRecord(){
    
    _startNormalRecord(reference.pointer, _id_startNormalRecord as _$jni.JMethodIDPtr).check();
  }

  static final _id_stopNormalRecord = _class.instanceMethodId(
    r'stopNormalRecord',
    r'()V',
  );

  static final _stopNormalRecord = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public void stopNormalRecord()`
  void stopNormalRecord(){
    
    _stopNormalRecord(reference.pointer, _id_stopNormalRecord as _$jni.JMethodIDPtr).check();
  }

  static final _id_stopNormalRecord$1 = _class.instanceMethodId(
    r'stopNormalRecord',
    r'([B)V',
  );

  static final _stopNormalRecord$1 = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();
  /// from: `public void stopNormalRecord(byte[] bs)`
  void stopNormalRecord$1(_$jni.JArray<_$jni.jbyte> bs, ){
    
    _stopNormalRecord$1(reference.pointer, _id_stopNormalRecord$1 as _$jni.JMethodIDPtr, bs.reference.pointer).check();
  }

  static final _id_startHDRRecord = _class.instanceMethodId(
    r'startHDRRecord',
    r'()V',
  );

  static final _startHDRRecord = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public void startHDRRecord()`
  void startHDRRecord(){
    
    _startHDRRecord(reference.pointer, _id_startHDRRecord as _$jni.JMethodIDPtr).check();
  }

  static final _id_stopHDRRecord = _class.instanceMethodId(
    r'stopHDRRecord',
    r'()V',
  );

  static final _stopHDRRecord = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public void stopHDRRecord()`
  void stopHDRRecord(){
    
    _stopHDRRecord(reference.pointer, _id_stopHDRRecord as _$jni.JMethodIDPtr).check();
  }

  static final _id_stopHDRRecord$1 = _class.instanceMethodId(
    r'stopHDRRecord',
    r'([B)V',
  );

  static final _stopHDRRecord$1 = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();
  /// from: `public void stopHDRRecord(byte[] bs)`
  void stopHDRRecord$1(_$jni.JArray<_$jni.jbyte> bs, ){
    
    _stopHDRRecord$1(reference.pointer, _id_stopHDRRecord$1 as _$jni.JMethodIDPtr, bs.reference.pointer).check();
  }

  static final _id_startBulletTime = _class.instanceMethodId(
    r'startBulletTime',
    r'()V',
  );

  static final _startBulletTime = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public void startBulletTime()`
  void startBulletTime(){
    
    _startBulletTime(reference.pointer, _id_startBulletTime as _$jni.JMethodIDPtr).check();
  }

  static final _id_stopBulletTime = _class.instanceMethodId(
    r'stopBulletTime',
    r'()V',
  );

  static final _stopBulletTime = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public void stopBulletTime()`
  void stopBulletTime(){
    
    _stopBulletTime(reference.pointer, _id_stopBulletTime as _$jni.JMethodIDPtr).check();
  }

  static final _id_stopBulletTime$1 = _class.instanceMethodId(
    r'stopBulletTime',
    r'([B)V',
  );

  static final _stopBulletTime$1 = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();
  /// from: `public void stopBulletTime(byte[] bs)`
  void stopBulletTime$1(_$jni.JArray<_$jni.jbyte> bs, ){
    
    _stopBulletTime$1(reference.pointer, _id_stopBulletTime$1 as _$jni.JMethodIDPtr, bs.reference.pointer).check();
  }

  static final _id_startTimeShift = _class.instanceMethodId(
    r'startTimeShift',
    r'()V',
  );

  static final _startTimeShift = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public void startTimeShift()`
  void startTimeShift(){
    
    _startTimeShift(reference.pointer, _id_startTimeShift as _$jni.JMethodIDPtr).check();
  }

  static final _id_stopTimeShift = _class.instanceMethodId(
    r'stopTimeShift',
    r'()V',
  );

  static final _stopTimeShift = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public void stopTimeShift()`
  void stopTimeShift(){
    
    _stopTimeShift(reference.pointer, _id_stopTimeShift as _$jni.JMethodIDPtr).check();
  }

  static final _id_stopTimeShift$1 = _class.instanceMethodId(
    r'stopTimeShift',
    r'([B)V',
  );

  static final _stopTimeShift$1 = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();
  /// from: `public void stopTimeShift(byte[] bs)`
  void stopTimeShift$1(_$jni.JArray<_$jni.jbyte> bs, ){
    
    _stopTimeShift$1(reference.pointer, _id_stopTimeShift$1 as _$jni.JMethodIDPtr, bs.reference.pointer).check();
  }

  static final _id_startLooperRecord = _class.instanceMethodId(
    r'startLooperRecord',
    r'()V',
  );

  static final _startLooperRecord = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public void startLooperRecord()`
  void startLooperRecord(){
    
    _startLooperRecord(reference.pointer, _id_startLooperRecord as _$jni.JMethodIDPtr).check();
  }

  static final _id_stopLooperRecord = _class.instanceMethodId(
    r'stopLooperRecord',
    r'()V',
  );

  static final _stopLooperRecord = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public void stopLooperRecord()`
  void stopLooperRecord(){
    
    _stopLooperRecord(reference.pointer, _id_stopLooperRecord as _$jni.JMethodIDPtr).check();
  }

  static final _id_stopLooperRecord$1 = _class.instanceMethodId(
    r'stopLooperRecord',
    r'([B)V',
  );

  static final _stopLooperRecord$1 = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();
  /// from: `public void stopLooperRecord(byte[] bs)`
  void stopLooperRecord$1(_$jni.JArray<_$jni.jbyte> bs, ){
    
    _stopLooperRecord$1(reference.pointer, _id_stopLooperRecord$1 as _$jni.JMethodIDPtr, bs.reference.pointer).check();
  }

  static final _id_startFpvRecord = _class.instanceMethodId(
    r'startFpvRecord',
    r'()V',
  );

  static final _startFpvRecord = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public void startFpvRecord()`
  void startFpvRecord(){
    
    _startFpvRecord(reference.pointer, _id_startFpvRecord as _$jni.JMethodIDPtr).check();
  }

  static final _id_stopFpvRecord = _class.instanceMethodId(
    r'stopFpvRecord',
    r'()V',
  );

  static final _stopFpvRecord = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public void stopFpvRecord()`
  void stopFpvRecord(){
    
    _stopFpvRecord(reference.pointer, _id_stopFpvRecord as _$jni.JMethodIDPtr).check();
  }

  static final _id_stopFpvRecord$1 = _class.instanceMethodId(
    r'stopFpvRecord',
    r'([B)V',
  );

  static final _stopFpvRecord$1 = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();
  /// from: `public void stopFpvRecord(byte[] bs)`
  void stopFpvRecord$1(_$jni.JArray<_$jni.jbyte> bs, ){
    
    _stopFpvRecord$1(reference.pointer, _id_stopFpvRecord$1 as _$jni.JMethodIDPtr, bs.reference.pointer).check();
  }

  static final _id_startMovieRecord = _class.instanceMethodId(
    r'startMovieRecord',
    r'()V',
  );

  static final _startMovieRecord = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public void startMovieRecord()`
  void startMovieRecord(){
    
    _startMovieRecord(reference.pointer, _id_startMovieRecord as _$jni.JMethodIDPtr).check();
  }

  static final _id_stopMovieRecord = _class.instanceMethodId(
    r'stopMovieRecord',
    r'()V',
  );

  static final _stopMovieRecord = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public void stopMovieRecord()`
  void stopMovieRecord(){
    
    _stopMovieRecord(reference.pointer, _id_stopMovieRecord as _$jni.JMethodIDPtr).check();
  }

  static final _id_stopMovieRecord$1 = _class.instanceMethodId(
    r'stopMovieRecord',
    r'([B)V',
  );

  static final _stopMovieRecord$1 = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();
  /// from: `public void stopMovieRecord(byte[] bs)`
  void stopMovieRecord$1(_$jni.JArray<_$jni.jbyte> bs, ){
    
    _stopMovieRecord$1(reference.pointer, _id_stopMovieRecord$1 as _$jni.JMethodIDPtr, bs.reference.pointer).check();
  }

  static final _id_startSlowMotionRecord = _class.instanceMethodId(
    r'startSlowMotionRecord',
    r'()V',
  );

  static final _startSlowMotionRecord = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public void startSlowMotionRecord()`
  void startSlowMotionRecord(){
    
    _startSlowMotionRecord(reference.pointer, _id_startSlowMotionRecord as _$jni.JMethodIDPtr).check();
  }

  static final _id_stopSlowMotionRecord = _class.instanceMethodId(
    r'stopSlowMotionRecord',
    r'()V',
  );

  static final _stopSlowMotionRecord = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public void stopSlowMotionRecord()`
  void stopSlowMotionRecord(){
    
    _stopSlowMotionRecord(reference.pointer, _id_stopSlowMotionRecord as _$jni.JMethodIDPtr).check();
  }

  static final _id_stopSlowMotionRecord$1 = _class.instanceMethodId(
    r'stopSlowMotionRecord',
    r'([B)V',
  );

  static final _stopSlowMotionRecord$1 = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();
  /// from: `public void stopSlowMotionRecord(byte[] bs)`
  void stopSlowMotionRecord$1(_$jni.JArray<_$jni.jbyte> bs, ){
    
    _stopSlowMotionRecord$1(reference.pointer, _id_stopSlowMotionRecord$1 as _$jni.JMethodIDPtr, bs.reference.pointer).check();
  }

  static final _id_startSelfieRecord = _class.instanceMethodId(
    r'startSelfieRecord',
    r'()V',
  );

  static final _startSelfieRecord = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public void startSelfieRecord()`
  void startSelfieRecord(){
    
    _startSelfieRecord(reference.pointer, _id_startSelfieRecord as _$jni.JMethodIDPtr).check();
  }

  static final _id_stopSelfieRecord = _class.instanceMethodId(
    r'stopSelfieRecord',
    r'()V',
  );

  static final _stopSelfieRecord = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public void stopSelfieRecord()`
  void stopSelfieRecord(){
    
    _stopSelfieRecord(reference.pointer, _id_stopSelfieRecord as _$jni.JMethodIDPtr).check();
  }

  static final _id_stopSelfieRecord$1 = _class.instanceMethodId(
    r'stopSelfieRecord',
    r'([B)V',
  );

  static final _stopSelfieRecord$1 = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();
  /// from: `public void stopSelfieRecord(byte[] bs)`
  void stopSelfieRecord$1(_$jni.JArray<_$jni.jbyte> bs, ){
    
    _stopSelfieRecord$1(reference.pointer, _id_stopSelfieRecord$1 as _$jni.JMethodIDPtr, bs.reference.pointer).check();
  }

  static final _id_startIntervalRecord = _class.instanceMethodId(
    r'startIntervalRecord',
    r'()V',
  );

  static final _startIntervalRecord = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public void startIntervalRecord()`
  void startIntervalRecord(){
    
    _startIntervalRecord(reference.pointer, _id_startIntervalRecord as _$jni.JMethodIDPtr).check();
  }

  static final _id_startIntervalRecord$1 = _class.instanceMethodId(
    r'startIntervalRecord',
    r'([B)V',
  );

  static final _startIntervalRecord$1 = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();
  /// from: `public void startIntervalRecord(byte[] bs)`
  void startIntervalRecord$1(_$jni.JArray<_$jni.jbyte> bs, ){
    
    _startIntervalRecord$1(reference.pointer, _id_startIntervalRecord$1 as _$jni.JMethodIDPtr, bs.reference.pointer).check();
  }

  static final _id_stopIntervalRecord = _class.instanceMethodId(
    r'stopIntervalRecord',
    r'()V',
  );

  static final _stopIntervalRecord = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public void stopIntervalRecord()`
  void stopIntervalRecord(){
    
    _stopIntervalRecord(reference.pointer, _id_stopIntervalRecord as _$jni.JMethodIDPtr).check();
  }

  static final _id_setIntervalRecordTime = _class.instanceMethodId(
    r'setIntervalRecordTime',
    r'(I)V',
  );

  static final _setIntervalRecordTime = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();
  /// from: `public void setIntervalRecordTime(int i)`
  void setIntervalRecordTime(int i, ){
    
    _setIntervalRecordTime(reference.pointer, _id_setIntervalRecordTime as _$jni.JMethodIDPtr, i).check();
  }

  static final _id_startTimeLapse = _class.instanceMethodId(
    r'startTimeLapse',
    r'()V',
  );

  static final _startTimeLapse = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public void startTimeLapse()`
  void startTimeLapse(){
    
    _startTimeLapse(reference.pointer, _id_startTimeLapse as _$jni.JMethodIDPtr).check();
  }

  static final _id_stopTimeLapse = _class.instanceMethodId(
    r'stopTimeLapse',
    r'()V',
  );

  static final _stopTimeLapse = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public void stopTimeLapse()`
  void stopTimeLapse(){
    
    _stopTimeLapse(reference.pointer, _id_stopTimeLapse as _$jni.JMethodIDPtr).check();
  }

  static final _id_stopTimeLapse$1 = _class.instanceMethodId(
    r'stopTimeLapse',
    r'([B)V',
  );

  static final _stopTimeLapse$1 = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();
  /// from: `public void stopTimeLapse(byte[] bs)`
  void stopTimeLapse$1(_$jni.JArray<_$jni.jbyte> bs, ){
    
    _stopTimeLapse$1(reference.pointer, _id_stopTimeLapse$1 as _$jni.JMethodIDPtr, bs.reference.pointer).check();
  }

  static final _id_setTimeLapseInterval = _class.instanceMethodId(
    r'setTimeLapseInterval',
    r'(I)V',
  );

  static final _setTimeLapseInterval = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();
  /// from: `public void setTimeLapseInterval(int i)`
  void setTimeLapseInterval(int i, ){
    
    _setTimeLapseInterval(reference.pointer, _id_setTimeLapseInterval as _$jni.JMethodIDPtr, i).check();
  }

  static final _id_startStaticTimeLapse = _class.instanceMethodId(
    r'startStaticTimeLapse',
    r'()V',
  );

  static final _startStaticTimeLapse = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public void startStaticTimeLapse()`
  void startStaticTimeLapse(){
    
    _startStaticTimeLapse(reference.pointer, _id_startStaticTimeLapse as _$jni.JMethodIDPtr).check();
  }

  static final _id_stopStaticTimeLapse = _class.instanceMethodId(
    r'stopStaticTimeLapse',
    r'()V',
  );

  static final _stopStaticTimeLapse = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public void stopStaticTimeLapse()`
  void stopStaticTimeLapse(){
    
    _stopStaticTimeLapse(reference.pointer, _id_stopStaticTimeLapse as _$jni.JMethodIDPtr).check();
  }

  static final _id_stopStaticTimeLapse$1 = _class.instanceMethodId(
    r'stopStaticTimeLapse',
    r'([B)V',
  );

  static final _stopStaticTimeLapse$1 = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();
  /// from: `public void stopStaticTimeLapse(byte[] bs)`
  void stopStaticTimeLapse$1(_$jni.JArray<_$jni.jbyte> bs, ){
    
    _stopStaticTimeLapse$1(reference.pointer, _id_stopStaticTimeLapse$1 as _$jni.JMethodIDPtr, bs.reference.pointer).check();
  }

  static final _id_setStaticTimeLapseInterval = _class.instanceMethodId(
    r'setStaticTimeLapseInterval',
    r'(I)V',
  );

  static final _setStaticTimeLapseInterval = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();
  /// from: `public void setStaticTimeLapseInterval(int i)`
  void setStaticTimeLapseInterval(int i, ){
    
    _setStaticTimeLapseInterval(reference.pointer, _id_setStaticTimeLapseInterval as _$jni.JMethodIDPtr, i).check();
  }

  static final _id_getCurrentCameraMode = _class.instanceMethodId(
    r'getCurrentCameraMode',
    r'()I',
  );

  static final _getCurrentCameraMode = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallIntMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public int getCurrentCameraMode()`
  int getCurrentCameraMode(){
    
    return _getCurrentCameraMode(reference.pointer, _id_getCurrentCameraMode as _$jni.JMethodIDPtr).integer;
  }

  static final _id_getCurrentFocusSensor = _class.instanceMethodId(
    r'getCurrentFocusSensor',
    r'()I',
  );

  static final _getCurrentFocusSensor = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallIntMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public int getCurrentFocusSensor()`
  int getCurrentFocusSensor(){
    
    return _getCurrentFocusSensor(reference.pointer, _id_getCurrentFocusSensor as _$jni.JMethodIDPtr).integer;
  }

  static final _id_switchCameraMode = _class.instanceMethodId(
    r'switchCameraMode',
    r'(IILcom/arashivision/sdkcamera/camera/callback/ICameraOperateCallback;)V',
  );

  static final _switchCameraMode = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32, _$jni.Int32, _$jni.Pointer<_$jni.Void>)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int, int, _$jni.Pointer<_$jni.Void>)>();
  /// from: `public void switchCameraMode(int i, int i1, com.arashivision.sdkcamera.camera.callback.ICameraOperateCallback iCameraOperateCallback)`
  void switchCameraMode(int i, int i1, ICameraOperateCallback iCameraOperateCallback, ){
    
    _switchCameraMode(reference.pointer, _id_switchCameraMode as _$jni.JMethodIDPtr, i, i1, iCameraOperateCallback.reference.pointer).check();
  }

  static final _id_beginSettingOptions = _class.instanceMethodId(
    r'beginSettingOptions',
    r'()V',
  );

  static final _beginSettingOptions = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public void beginSettingOptions()`
  void beginSettingOptions(){
    
    _beginSettingOptions(reference.pointer, _id_beginSettingOptions as _$jni.JMethodIDPtr).check();
  }

  static final _id_commitSettingOptions = _class.instanceMethodId(
    r'commitSettingOptions',
    r'()V',
  );

  static final _commitSettingOptions = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public void commitSettingOptions()`
  void commitSettingOptions(){
    
    _commitSettingOptions(reference.pointer, _id_commitSettingOptions as _$jni.JMethodIDPtr).check();
  }

  static final _id_setResolutionToCamera = _class.instanceMethodId(
    r'setResolutionToCamera',
    r'(ILcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;)V',
  );

  static final _setResolutionToCamera = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32, _$jni.Pointer<_$jni.Void>)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int, _$jni.Pointer<_$jni.Void>)>();
  /// from: `public void setResolutionToCamera(int i, com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution previewStreamResolution)`
  void setResolutionToCamera(int i, PreviewStreamResolution previewStreamResolution, ){
    
    _setResolutionToCamera(reference.pointer, _id_setResolutionToCamera as _$jni.JMethodIDPtr, i, previewStreamResolution.reference.pointer).check();
  }

  static final _id_getResolutionFromCamera = _class.instanceMethodId(
    r'getResolutionFromCamera',
    r'(I)Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
  );

  static final _getResolutionFromCamera = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallObjectMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();
  /// from: `public com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution getResolutionFromCamera(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  PreviewStreamResolution getResolutionFromCamera(int i, ){
    
    return _getResolutionFromCamera(reference.pointer, _id_getResolutionFromCamera as _$jni.JMethodIDPtr, i).object(const $PreviewStreamResolution$Type());
  }

  static final _id_setPhotoResolutionToCamera = _class.instanceMethodId(
    r'setPhotoResolutionToCamera',
    r'(ILcom/arashivision/sdkcamera/camera/resolution/PhotoResolution;)V',
  );

  static final _setPhotoResolutionToCamera = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32, _$jni.Pointer<_$jni.Void>)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int, _$jni.Pointer<_$jni.Void>)>();
  /// from: `public void setPhotoResolutionToCamera(int i, com.arashivision.sdkcamera.camera.resolution.PhotoResolution photoResolution)`
  void setPhotoResolutionToCamera(int i, PhotoResolution photoResolution, ){
    
    _setPhotoResolutionToCamera(reference.pointer, _id_setPhotoResolutionToCamera as _$jni.JMethodIDPtr, i, photoResolution.reference.pointer).check();
  }

  static final _id_getPhotoResolutionFromCamera = _class.instanceMethodId(
    r'getPhotoResolutionFromCamera',
    r'(I)Lcom/arashivision/sdkcamera/camera/resolution/PhotoResolution;',
  );

  static final _getPhotoResolutionFromCamera = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallObjectMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();
  /// from: `public com.arashivision.sdkcamera.camera.resolution.PhotoResolution getPhotoResolutionFromCamera(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  PhotoResolution getPhotoResolutionFromCamera(int i, ){
    
    return _getPhotoResolutionFromCamera(reference.pointer, _id_getPhotoResolutionFromCamera as _$jni.JMethodIDPtr, i).object(const $PhotoResolution$Type());
  }

  static final _id_setPhotoSizeToCamera = _class.instanceMethodId(
    r'setPhotoSizeToCamera',
    r'(III)V',
  );

  static final _setPhotoSizeToCamera = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32, _$jni.Int32, _$jni.Int32)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int, int, int)>();
  /// from: `public void setPhotoSizeToCamera(int i, int i1, int i2)`
  void setPhotoSizeToCamera(int i, int i1, int i2, ){
    
    _setPhotoSizeToCamera(reference.pointer, _id_setPhotoSizeToCamera as _$jni.JMethodIDPtr, i, i1, i2).check();
  }

  static final _id_setFovTypeToCamera = _class.instanceMethodId(
    r'setFovTypeToCamera',
    r'(II)V',
  );

  static final _setFovTypeToCamera = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32, _$jni.Int32)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int, int)>();
  /// from: `public void setFovTypeToCamera(int i, int i1)`
  void setFovTypeToCamera(int i, int i1, ){
    
    _setFovTypeToCamera(reference.pointer, _id_setFovTypeToCamera as _$jni.JMethodIDPtr, i, i1).check();
  }

  static final _id_getFovTypeFromCamera = _class.instanceMethodId(
    r'getFovTypeFromCamera',
    r'(I)I',
  );

  static final _getFovTypeFromCamera = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallIntMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();
  /// from: `public int getFovTypeFromCamera(int i)`
  int getFovTypeFromCamera(int i, ){
    
    return _getFovTypeFromCamera(reference.pointer, _id_getFovTypeFromCamera as _$jni.JMethodIDPtr, i).integer;
  }

  static final _id_setGammaModeToCamera = _class.instanceMethodId(
    r'setGammaModeToCamera',
    r'(II)V',
  );

  static final _setGammaModeToCamera = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32, _$jni.Int32)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int, int)>();
  /// from: `public void setGammaModeToCamera(int i, int i1)`
  void setGammaModeToCamera(int i, int i1, ){
    
    _setGammaModeToCamera(reference.pointer, _id_setGammaModeToCamera as _$jni.JMethodIDPtr, i, i1).check();
  }

  static final _id_getGammaModeFromCamera = _class.instanceMethodId(
    r'getGammaModeFromCamera',
    r'(I)I',
  );

  static final _getGammaModeFromCamera = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallIntMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();
  /// from: `public int getGammaModeFromCamera(int i)`
  int getGammaModeFromCamera(int i, ){
    
    return _getGammaModeFromCamera(reference.pointer, _id_getGammaModeFromCamera as _$jni.JMethodIDPtr, i).integer;
  }

  static final _id_setLogToCamera = _class.instanceMethodId(
    r'setLogToCamera',
    r'(IZ)V',
  );

  static final _setLogToCamera = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32, _$jni.Int32)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int, int)>();
  /// from: `public void setLogToCamera(int i, boolean z)`
  void setLogToCamera(int i, bool z, ){
    
    _setLogToCamera(reference.pointer, _id_setLogToCamera as _$jni.JMethodIDPtr, i, z ? 1 : 0).check();
  }

  static final _id_getIsLogInCamera = _class.instanceMethodId(
    r'getIsLogInCamera',
    r'(I)Z',
  );

  static final _getIsLogInCamera = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallBooleanMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();
  /// from: `public boolean getIsLogInCamera(int i)`
  bool getIsLogInCamera(int i, ){
    
    return _getIsLogInCamera(reference.pointer, _id_getIsLogInCamera as _$jni.JMethodIDPtr, i).boolean;
  }

  static final _id_setRawToCamera = _class.instanceMethodId(
    r'setRawToCamera',
    r'(II)V',
  );

  static final _setRawToCamera = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32, _$jni.Int32)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int, int)>();
  /// from: `public void setRawToCamera(int i, int i1)`
  void setRawToCamera(int i, int i1, ){
    
    _setRawToCamera(reference.pointer, _id_setRawToCamera as _$jni.JMethodIDPtr, i, i1).check();
  }

  static final _id_getRawTyPeInCamera = _class.instanceMethodId(
    r'getRawTyPeInCamera',
    r'(I)I',
  );

  static final _getRawTyPeInCamera = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallIntMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();
  /// from: `public int getRawTyPeInCamera(int i)`
  int getRawTyPeInCamera(int i, ){
    
    return _getRawTyPeInCamera(reference.pointer, _id_getRawTyPeInCamera as _$jni.JMethodIDPtr, i).integer;
  }

  static final _id_setRawType = _class.instanceMethodId(
    r'setRawType',
    r'(ILcom/arashivision/sdkcamera/camera/model/RawType;)V',
  );

  static final _setRawType = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32, _$jni.Pointer<_$jni.Void>)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int, _$jni.Pointer<_$jni.Void>)>();
  /// from: `public void setRawType(int i, com.arashivision.sdkcamera.camera.model.RawType rawType)`
  void setRawType(int i, RawType rawType, ){
    
    _setRawType(reference.pointer, _id_setRawType as _$jni.JMethodIDPtr, i, rawType.reference.pointer).check();
  }

  static final _id_getSupportRawTypeList = _class.instanceMethodId(
    r'getSupportRawTypeList',
    r'(I)Ljava/util/List;',
  );

  static final _getSupportRawTypeList = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallObjectMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();
  /// from: `public java.util.List getSupportRawTypeList(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JList<RawType> getSupportRawTypeList(int i, ){
    
    return _getSupportRawTypeList(reference.pointer, _id_getSupportRawTypeList as _$jni.JMethodIDPtr, i).object(const _$jni.JListType($RawType$Type()));
  }

  static final _id_setLatencyToCamera = _class.instanceMethodId(
    r'setLatencyToCamera',
    r'(II)V',
  );

  static final _setLatencyToCamera = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32, _$jni.Int32)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int, int)>();
  /// from: `public void setLatencyToCamera(int i, int i1)`
  void setLatencyToCamera(int i, int i1, ){
    
    _setLatencyToCamera(reference.pointer, _id_setLatencyToCamera as _$jni.JMethodIDPtr, i, i1).check();
  }

  static final _id_getLatencyFromCamera = _class.instanceMethodId(
    r'getLatencyFromCamera',
    r'(I)I',
  );

  static final _getLatencyFromCamera = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallIntMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();
  /// from: `public int getLatencyFromCamera(int i)`
  int getLatencyFromCamera(int i, ){
    
    return _getLatencyFromCamera(reference.pointer, _id_getLatencyFromCamera as _$jni.JMethodIDPtr, i).integer;
  }

  static final _id_setFunctionModeToCamera = _class.instanceMethodId(
    r'setFunctionModeToCamera',
    r'(I)V',
  );

  static final _setFunctionModeToCamera = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();
  /// from: `public void setFunctionModeToCamera(int i)`
  void setFunctionModeToCamera(int i, ){
    
    _setFunctionModeToCamera(reference.pointer, _id_setFunctionModeToCamera as _$jni.JMethodIDPtr, i).check();
  }

  static final _id_getPhotoFunctionMode = _class.instanceMethodId(
    r'getPhotoFunctionMode',
    r'()I',
  );

  static final _getPhotoFunctionMode = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallIntMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public int getPhotoFunctionMode()`
  int getPhotoFunctionMode(){
    
    return _getPhotoFunctionMode(reference.pointer, _id_getPhotoFunctionMode as _$jni.JMethodIDPtr).integer;
  }

  static final _id_getVideoFunctionMode = _class.instanceMethodId(
    r'getVideoFunctionMode',
    r'()I',
  );

  static final _getVideoFunctionMode = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallIntMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public int getVideoFunctionMode()`
  int getVideoFunctionMode(){
    
    return _getVideoFunctionMode(reference.pointer, _id_getVideoFunctionMode as _$jni.JMethodIDPtr).integer;
  }

  static final _id_setExposureMode = _class.instanceMethodId(
    r'setExposureMode',
    r'(II)V',
  );

  static final _setExposureMode = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32, _$jni.Int32)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int, int)>();
  /// from: `public void setExposureMode(int i, int i1)`
  void setExposureMode(int i, int i1, ){
    
    _setExposureMode(reference.pointer, _id_setExposureMode as _$jni.JMethodIDPtr, i, i1).check();
  }

  static final _id_getExposureMode = _class.instanceMethodId(
    r'getExposureMode',
    r'(I)I',
  );

  static final _getExposureMode = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallIntMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();
  /// from: `public int getExposureMode(int i)`
  int getExposureMode(int i, ){
    
    return _getExposureMode(reference.pointer, _id_getExposureMode as _$jni.JMethodIDPtr, i).integer;
  }

  static final _id_setISO = _class.instanceMethodId(
    r'setISO',
    r'(II)V',
  );

  static final _setISO = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32, _$jni.Int32)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int, int)>();
  /// from: `public void setISO(int i, int i1)`
  void setISO(int i, int i1, ){
    
    _setISO(reference.pointer, _id_setISO as _$jni.JMethodIDPtr, i, i1).check();
  }

  static final _id_getISO = _class.instanceMethodId(
    r'getISO',
    r'(I)I',
  );

  static final _getISO = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallIntMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();
  /// from: `public int getISO(int i)`
  int getISO(int i, ){
    
    return _getISO(reference.pointer, _id_getISO as _$jni.JMethodIDPtr, i).integer;
  }

  static final _id_setISOTopLimit = _class.instanceMethodId(
    r'setISOTopLimit',
    r'(II)V',
  );

  static final _setISOTopLimit = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32, _$jni.Int32)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int, int)>();
  /// from: `public void setISOTopLimit(int i, int i1)`
  void setISOTopLimit(int i, int i1, ){
    
    _setISOTopLimit(reference.pointer, _id_setISOTopLimit as _$jni.JMethodIDPtr, i, i1).check();
  }

  static final _id_getISOTopLimit = _class.instanceMethodId(
    r'getISOTopLimit',
    r'(I)I',
  );

  static final _getISOTopLimit = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallIntMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();
  /// from: `public int getISOTopLimit(int i)`
  int getISOTopLimit(int i, ){
    
    return _getISOTopLimit(reference.pointer, _id_getISOTopLimit as _$jni.JMethodIDPtr, i).integer;
  }

  static final _id_setShutterMode = _class.instanceMethodId(
    r'setShutterMode',
    r'(II)V',
  );

  static final _setShutterMode = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32, _$jni.Int32)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int, int)>();
  /// from: `public void setShutterMode(int i, int i1)`
  void setShutterMode(int i, int i1, ){
    
    _setShutterMode(reference.pointer, _id_setShutterMode as _$jni.JMethodIDPtr, i, i1).check();
  }

  static final _id_getShutterMode = _class.instanceMethodId(
    r'getShutterMode',
    r'(I)I',
  );

  static final _getShutterMode = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallIntMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();
  /// from: `public int getShutterMode(int i)`
  int getShutterMode(int i, ){
    
    return _getShutterMode(reference.pointer, _id_getShutterMode as _$jni.JMethodIDPtr, i).integer;
  }

  static final _id_setShutterSpeed = _class.instanceMethodId(
    r'setShutterSpeed',
    r'(ID)V',
  );

  static final _setShutterSpeed = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32, _$jni.Double)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int, double)>();
  /// from: `public void setShutterSpeed(int i, double d)`
  void setShutterSpeed(int i, double d, ){
    
    _setShutterSpeed(reference.pointer, _id_setShutterSpeed as _$jni.JMethodIDPtr, i, d).check();
  }

  static final _id_getShutterSpeed = _class.instanceMethodId(
    r'getShutterSpeed',
    r'(I)D',
  );

  static final _getShutterSpeed = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallDoubleMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();
  /// from: `public double getShutterSpeed(int i)`
  double getShutterSpeed(int i, ){
    
    return _getShutterSpeed(reference.pointer, _id_getShutterSpeed as _$jni.JMethodIDPtr, i).doubleFloat;
  }

  static final _id_setExposureEV = _class.instanceMethodId(
    r'setExposureEV',
    r'(IF)V',
  );

  static final _setExposureEV = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32, _$jni.Double)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int, double)>();
  /// from: `public void setExposureEV(int i, float f)`
  void setExposureEV(int i, double f, ){
    
    _setExposureEV(reference.pointer, _id_setExposureEV as _$jni.JMethodIDPtr, i, f).check();
  }

  static final _id_setHDRExposureEVStep = _class.instanceMethodId(
    r'setHDRExposureEVStep',
    r'(F)V',
  );

  static final _setHDRExposureEVStep = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Double,)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, double)>();
  /// from: `public void setHDRExposureEVStep(float f)`
  void setHDRExposureEVStep(double f, ){
    
    _setHDRExposureEVStep(reference.pointer, _id_setHDRExposureEVStep as _$jni.JMethodIDPtr, f).check();
  }

  static final _id_getExposureEV = _class.instanceMethodId(
    r'getExposureEV',
    r'(I)F',
  );

  static final _getExposureEV = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallFloatMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();
  /// from: `public float getExposureEV(int i)`
  double getExposureEV(int i, ){
    
    return _getExposureEV(reference.pointer, _id_getExposureEV as _$jni.JMethodIDPtr, i).float;
  }

  static final _id_setAEBCaptureNum = _class.instanceMethodId(
    r'setAEBCaptureNum',
    r'(I)V',
  );

  static final _setAEBCaptureNum = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();
  /// from: `public void setAEBCaptureNum(int i)`
  void setAEBCaptureNum(int i, ){
    
    _setAEBCaptureNum(reference.pointer, _id_setAEBCaptureNum as _$jni.JMethodIDPtr, i).check();
  }

  static final _id_setAEBCaptureNum$1 = _class.instanceMethodId(
    r'setAEBCaptureNum',
    r'(II)V',
  );

  static final _setAEBCaptureNum$1 = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32, _$jni.Int32)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int, int)>();
  /// from: `public void setAEBCaptureNum(int i, int i1)`
  void setAEBCaptureNum$1(int i, int i1, ){
    
    _setAEBCaptureNum$1(reference.pointer, _id_setAEBCaptureNum$1 as _$jni.JMethodIDPtr, i, i1).check();
  }

  static final _id_getAEBCaptureNum = _class.instanceMethodId(
    r'getAEBCaptureNum',
    r'()I',
  );

  static final _getAEBCaptureNum = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallIntMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public int getAEBCaptureNum()`
  int getAEBCaptureNum(){
    
    return _getAEBCaptureNum(reference.pointer, _id_getAEBCaptureNum as _$jni.JMethodIDPtr).integer;
  }

  static final _id_getAEBCaptureNum$1 = _class.instanceMethodId(
    r'getAEBCaptureNum',
    r'(I)I',
  );

  static final _getAEBCaptureNum$1 = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallIntMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();
  /// from: `public int getAEBCaptureNum(int i)`
  int getAEBCaptureNum$1(int i, ){
    
    return _getAEBCaptureNum$1(reference.pointer, _id_getAEBCaptureNum$1 as _$jni.JMethodIDPtr, i).integer;
  }

  static final _id_setWhiteBalance = _class.instanceMethodId(
    r'setWhiteBalance',
    r'(II)V',
  );

  static final _setWhiteBalance = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32, _$jni.Int32)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int, int)>();
  /// from: `public void setWhiteBalance(int i, int i1)`
  void setWhiteBalance(int i, int i1, ){
    
    _setWhiteBalance(reference.pointer, _id_setWhiteBalance as _$jni.JMethodIDPtr, i, i1).check();
  }

  static final _id_getWhiteBalance = _class.instanceMethodId(
    r'getWhiteBalance',
    r'(I)I',
  );

  static final _getWhiteBalance = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallIntMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();
  /// from: `public int getWhiteBalance(int i)`
  int getWhiteBalance(int i, ){
    
    return _getWhiteBalance(reference.pointer, _id_getWhiteBalance as _$jni.JMethodIDPtr, i).integer;
  }

  static final _id_getRawType = _class.instanceMethodId(
    r'getRawType',
    r'(I)I',
  );

  static final _getRawType = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallIntMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();
  /// from: `public int getRawType(int i)`
  int getRawType(int i, ){
    
    return _getRawType(reference.pointer, _id_getRawType as _$jni.JMethodIDPtr, i).integer;
  }

  static final _id_setWhiteBalanceValue = _class.instanceMethodId(
    r'setWhiteBalanceValue',
    r'(II)V',
  );

  static final _setWhiteBalanceValue = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32, _$jni.Int32)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int, int)>();
  /// from: `public void setWhiteBalanceValue(int i, int i1)`
  void setWhiteBalanceValue(int i, int i1, ){
    
    _setWhiteBalanceValue(reference.pointer, _id_setWhiteBalanceValue as _$jni.JMethodIDPtr, i, i1).check();
  }

  static final _id_getWhiteBalanceValue = _class.instanceMethodId(
    r'getWhiteBalanceValue',
    r'(I)I',
  );

  static final _getWhiteBalanceValue = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallIntMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();
  /// from: `public int getWhiteBalanceValue(int i)`
  int getWhiteBalanceValue(int i, ){
    
    return _getWhiteBalanceValue(reference.pointer, _id_getWhiteBalanceValue as _$jni.JMethodIDPtr, i).integer;
  }

  static final _id_getCurFirstStreamResolution = _class.instanceMethodId(
    r'getCurFirstStreamResolution',
    r'()Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
  );

  static final _getCurFirstStreamResolution = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallObjectMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution getCurFirstStreamResolution()`
  /// The returned object must be released after use, by calling the [release] method.
  PreviewStreamResolution getCurFirstStreamResolution(){
    
    return _getCurFirstStreamResolution(reference.pointer, _id_getCurFirstStreamResolution as _$jni.JMethodIDPtr).object(const $PreviewStreamResolution$Type());
  }

  static final _id_setCameraBeepSwitch = _class.instanceMethodId(
    r'setCameraBeepSwitch',
    r'(Z)V',
  );

  static final _setCameraBeepSwitch = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();
  /// from: `public void setCameraBeepSwitch(boolean z)`
  void setCameraBeepSwitch(bool z, ){
    
    _setCameraBeepSwitch(reference.pointer, _id_setCameraBeepSwitch as _$jni.JMethodIDPtr, z ? 1 : 0).check();
  }

  static final _id_isCameraBeep = _class.instanceMethodId(
    r'isCameraBeep',
    r'()Z',
  );

  static final _isCameraBeep = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallBooleanMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public boolean isCameraBeep()`
  bool isCameraBeep(){
    
    return _isCameraBeep(reference.pointer, _id_isCameraBeep as _$jni.JMethodIDPtr).boolean;
  }

  static final _id_setInternalSplicingEnable = _class.instanceMethodId(
    r'setInternalSplicingEnable',
    r'(Z)V',
  );

  static final _setInternalSplicingEnable = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();
  /// from: `public void setInternalSplicingEnable(boolean z)`
  void setInternalSplicingEnable(bool z, ){
    
    _setInternalSplicingEnable(reference.pointer, _id_setInternalSplicingEnable as _$jni.JMethodIDPtr, z ? 1 : 0).check();
  }

  static final _id_getInternalSplicingEnable = _class.instanceMethodId(
    r'getInternalSplicingEnable',
    r'()Z',
  );

  static final _getInternalSplicingEnable = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallBooleanMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public boolean getInternalSplicingEnable()`
  bool getInternalSplicingEnable(){
    
    return _getInternalSplicingEnable(reference.pointer, _id_getInternalSplicingEnable as _$jni.JMethodIDPtr).boolean;
  }

  static final _id_calibrateGyro = _class.instanceMethodId(
    r'calibrateGyro',
    r'(Lcom/arashivision/sdkcamera/camera/callback/ICameraOperateCallback;)V',
  );

  static final _calibrateGyro = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();
  /// from: `public void calibrateGyro(com.arashivision.sdkcamera.camera.callback.ICameraOperateCallback iCameraOperateCallback)`
  void calibrateGyro(ICameraOperateCallback iCameraOperateCallback, ){
    
    _calibrateGyro(reference.pointer, _id_calibrateGyro as _$jni.JMethodIDPtr, iCameraOperateCallback.reference.pointer).check();
  }

  static final _id_setGpsData = _class.instanceMethodId(
    r'setGpsData',
    r'([B)V',
  );

  static final _setGpsData = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();
  /// from: `public void setGpsData(byte[] bs)`
  void setGpsData(_$jni.JArray<_$jni.jbyte> bs, ){
    
    _setGpsData(reference.pointer, _id_setGpsData as _$jni.JMethodIDPtr, bs.reference.pointer).check();
  }

  static final _id_formatStorage = _class.instanceMethodId(
    r'formatStorage',
    r'(Lcom/arashivision/sdkcamera/camera/callback/ICameraOperateCallback;)V',
  );

  static final _formatStorage = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();
  /// from: `public void formatStorage(com.arashivision.sdkcamera.camera.callback.ICameraOperateCallback iCameraOperateCallback)`
  void formatStorage(ICameraOperateCallback iCameraOperateCallback, ){
    
    _formatStorage(reference.pointer, _id_formatStorage as _$jni.JMethodIDPtr, iCameraOperateCallback.reference.pointer).check();
  }

}
final class $InstaCameraManager$Type extends _$jni.JObjType<InstaCameraManager> {
  

  @_$jni.internal
  const $InstaCameraManager$Type(
    
  );

  @_$jni.internal
  @_$core.override
  String get signature => r'Lcom/arashivision/sdkcamera/camera/InstaCameraManager;';

  @_$jni.internal
  @_$core.override
  InstaCameraManager fromReference(_$jni.JReference reference) => InstaCameraManager.fromReference(
    
    reference
  );

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($InstaCameraManager$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($InstaCameraManager$Type) &&
        other is $InstaCameraManager$Type;
  }
}

/// from: `com.arashivision.sdkcamera.camera.callback.ICameraChangedCallback`
class ICameraChangedCallback extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<ICameraChangedCallback> $type;

  

  @_$jni.internal
  ICameraChangedCallback.fromReference(
    
    _$jni.JReference reference,
  ) :
    $type = type,
    super.fromReference(
      
      reference
    );

  static final _class = _$jni.JClass.forName(r'com/arashivision/sdkcamera/camera/callback/ICameraChangedCallback');

      /// The type which includes information such as the signature of this class.
static const type = $ICameraChangedCallback$Type();
  static final _id_onCameraStatusChanged = _class.instanceMethodId(
    r'onCameraStatusChanged',
    r'(Z)V',
  );

  static final _onCameraStatusChanged = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();
  /// from: `public void onCameraStatusChanged(boolean z)`
  void onCameraStatusChanged(bool z, ){
    
    _onCameraStatusChanged(reference.pointer, _id_onCameraStatusChanged as _$jni.JMethodIDPtr, z ? 1 : 0).check();
  }

  static final _id_onCameraConnectError = _class.instanceMethodId(
    r'onCameraConnectError',
    r'(I)V',
  );

  static final _onCameraConnectError = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();
  /// from: `public void onCameraConnectError(int i)`
  void onCameraConnectError(int i, ){
    
    _onCameraConnectError(reference.pointer, _id_onCameraConnectError as _$jni.JMethodIDPtr, i).check();
  }

  static final _id_onCameraSDCardStateChanged = _class.instanceMethodId(
    r'onCameraSDCardStateChanged',
    r'(Z)V',
  );

  static final _onCameraSDCardStateChanged = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();
  /// from: `public void onCameraSDCardStateChanged(boolean z)`
  void onCameraSDCardStateChanged(bool z, ){
    
    _onCameraSDCardStateChanged(reference.pointer, _id_onCameraSDCardStateChanged as _$jni.JMethodIDPtr, z ? 1 : 0).check();
  }

  static final _id_onCameraStorageChanged = _class.instanceMethodId(
    r'onCameraStorageChanged',
    r'(JJ)V',
  );

  static final _onCameraStorageChanged = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int64, _$jni.Int64)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int, int)>();
  /// from: `public void onCameraStorageChanged(long j, long j1)`
  void onCameraStorageChanged(int j, int j1, ){
    
    _onCameraStorageChanged(reference.pointer, _id_onCameraStorageChanged as _$jni.JMethodIDPtr, j, j1).check();
  }

  static final _id_onCameraBatteryLow = _class.instanceMethodId(
    r'onCameraBatteryLow',
    r'()V',
  );

  static final _onCameraBatteryLow = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public void onCameraBatteryLow()`
  void onCameraBatteryLow(){
    
    _onCameraBatteryLow(reference.pointer, _id_onCameraBatteryLow as _$jni.JMethodIDPtr).check();
  }

  static final _id_onCameraBatteryUpdate = _class.instanceMethodId(
    r'onCameraBatteryUpdate',
    r'(IZ)V',
  );

  static final _onCameraBatteryUpdate = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32, _$jni.Int32)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int, int)>();
  /// from: `public void onCameraBatteryUpdate(int i, boolean z)`
  void onCameraBatteryUpdate(int i, bool z, ){
    
    _onCameraBatteryUpdate(reference.pointer, _id_onCameraBatteryUpdate as _$jni.JMethodIDPtr, i, z ? 1 : 0).check();
  }

  static final _id_onCameraSensorModeChanged = _class.instanceMethodId(
    r'onCameraSensorModeChanged',
    r'(I)V',
  );

  static final _onCameraSensorModeChanged = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();
  /// from: `public void onCameraSensorModeChanged(int i)`
  void onCameraSensorModeChanged(int i, ){
    
    _onCameraSensorModeChanged(reference.pointer, _id_onCameraSensorModeChanged as _$jni.JMethodIDPtr, i).check();
  }

  static final _id_onCameraPreviewStreamParamsChanged = _class.instanceMethodId(
    r'onCameraPreviewStreamParamsChanged',
    r'(Lcom/arashivision/insta360/basecamera/camera/BaseCamera;Z)V',
  );

  static final _onCameraPreviewStreamParamsChanged = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>, _$jni.Int32)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, int)>();
  /// from: `public void onCameraPreviewStreamParamsChanged(com.arashivision.insta360.basecamera.camera.BaseCamera baseCamera, boolean z)`
  void onCameraPreviewStreamParamsChanged(_$jni.JObject baseCamera, bool z, ){
    
    _onCameraPreviewStreamParamsChanged(reference.pointer, _id_onCameraPreviewStreamParamsChanged as _$jni.JMethodIDPtr, baseCamera.reference.pointer, z ? 1 : 0).check();
  }

  /// Maps a specific port to the implemented interface.
  static final _$core.Map<int, $ICameraChangedCallback> _$impls = {};
  static _$jni.JObjectPtr _$invoke(
    int port,
    _$jni.JObjectPtr descriptor,
    _$jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      _$jni.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final _$jni.Pointer<
          _$jni.NativeFunction<
              _$jni.JObjectPtr Function(
                  _$jni.Int64, _$jni.JObjectPtr, _$jni.JObjectPtr)>>
      _$invokePointer = _$jni.Pointer.fromFunction(_$invoke);

  static _$jni.Pointer<_$jni.Void> _$invokeMethod(
    int $p,
    _$jni.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
            if ($d == r'onCameraStatusChanged(Z)V') {
          _$impls[$p]!.onCameraStatusChanged(
$a[0].as(const _$jni.JBooleanType(), releaseOriginal: true).booleanValue(releaseOriginal: true),
          );
          return _$jni.nullptr;
        }
        if ($d == r'onCameraConnectError(I)V') {
          _$impls[$p]!.onCameraConnectError(
$a[0].as(const _$jni.JIntegerType(), releaseOriginal: true).intValue(releaseOriginal: true),
          );
          return _$jni.nullptr;
        }
        if ($d == r'onCameraSDCardStateChanged(Z)V') {
          _$impls[$p]!.onCameraSDCardStateChanged(
$a[0].as(const _$jni.JBooleanType(), releaseOriginal: true).booleanValue(releaseOriginal: true),
          );
          return _$jni.nullptr;
        }
        if ($d == r'onCameraStorageChanged(JJ)V') {
          _$impls[$p]!.onCameraStorageChanged(
$a[0].as(const _$jni.JLongType(), releaseOriginal: true).longValue(releaseOriginal: true),
$a[1].as(const _$jni.JLongType(), releaseOriginal: true).longValue(releaseOriginal: true),
          );
          return _$jni.nullptr;
        }
        if ($d == r'onCameraBatteryLow()V') {
          _$impls[$p]!.onCameraBatteryLow(
          );
          return _$jni.nullptr;
        }
        if ($d == r'onCameraBatteryUpdate(IZ)V') {
          _$impls[$p]!.onCameraBatteryUpdate(
$a[0].as(const _$jni.JIntegerType(), releaseOriginal: true).intValue(releaseOriginal: true),
$a[1].as(const _$jni.JBooleanType(), releaseOriginal: true).booleanValue(releaseOriginal: true),
          );
          return _$jni.nullptr;
        }
        if ($d == r'onCameraSensorModeChanged(I)V') {
          _$impls[$p]!.onCameraSensorModeChanged(
$a[0].as(const _$jni.JIntegerType(), releaseOriginal: true).intValue(releaseOriginal: true),
          );
          return _$jni.nullptr;
        }
        if ($d == r'onCameraPreviewStreamParamsChanged(Lcom/arashivision/insta360/basecamera/camera/BaseCamera;Z)V') {
          _$impls[$p]!.onCameraPreviewStreamParamsChanged(
$a[0].as(const _$jni.JObjectType(), releaseOriginal: true),
$a[1].as(const _$jni.JBooleanType(), releaseOriginal: true).booleanValue(releaseOriginal: true),
          );
          return _$jni.nullptr;
        }
    } catch (e) {
      return _$jni.ProtectedJniExtensions.newDartException(e);
    }
    return _$jni.nullptr;
  }

  static void implementIn(
    _$jni.JImplementer implementer,
    $ICameraChangedCallback $impl,
  ) {
    late final _$jni.RawReceivePort $p;
    $p = _$jni.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = _$jni.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      _$jni.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'com.arashivision.sdkcamera.camera.callback.ICameraChangedCallback',
      $p,
      _$invokePointer,
      [
        if ($impl.onCameraStatusChanged$async) r'onCameraStatusChanged(Z)V',
        if ($impl.onCameraConnectError$async) r'onCameraConnectError(I)V',
        if ($impl.onCameraSDCardStateChanged$async) r'onCameraSDCardStateChanged(Z)V',
        if ($impl.onCameraStorageChanged$async) r'onCameraStorageChanged(JJ)V',
        if ($impl.onCameraBatteryLow$async) r'onCameraBatteryLow()V',
        if ($impl.onCameraBatteryUpdate$async) r'onCameraBatteryUpdate(IZ)V',
        if ($impl.onCameraSensorModeChanged$async) r'onCameraSensorModeChanged(I)V',
        if ($impl.onCameraPreviewStreamParamsChanged$async) r'onCameraPreviewStreamParamsChanged(Lcom/arashivision/insta360/basecamera/camera/BaseCamera;Z)V',
      ],
    );
    final $a = $p.sendPort.nativePort; 
    _$impls[$a] = $impl;
  }

  factory ICameraChangedCallback.implement(
    $ICameraChangedCallback $impl,
  ) {
    final $i = _$jni.JImplementer();
    implementIn($i, $impl);
    return ICameraChangedCallback.fromReference(
      
      $i.implementReference(),
    );
  }
  }
abstract base mixin class $ICameraChangedCallback {
  factory $ICameraChangedCallback(
    {required void Function(bool z) onCameraStatusChanged, bool onCameraStatusChanged$async,
    required void Function(int i) onCameraConnectError, bool onCameraConnectError$async,
    required void Function(bool z) onCameraSDCardStateChanged, bool onCameraSDCardStateChanged$async,
    required void Function(int j, int j1) onCameraStorageChanged, bool onCameraStorageChanged$async,
    required void Function() onCameraBatteryLow, bool onCameraBatteryLow$async,
    required void Function(int i, bool z) onCameraBatteryUpdate, bool onCameraBatteryUpdate$async,
    required void Function(int i) onCameraSensorModeChanged, bool onCameraSensorModeChanged$async,
    required void Function(_$jni.JObject baseCamera, bool z) onCameraPreviewStreamParamsChanged, bool onCameraPreviewStreamParamsChanged$async,}
  ) = _$ICameraChangedCallback;

  

  void onCameraStatusChanged(bool z);
  bool get onCameraStatusChanged$async => false;
  void onCameraConnectError(int i);
  bool get onCameraConnectError$async => false;
  void onCameraSDCardStateChanged(bool z);
  bool get onCameraSDCardStateChanged$async => false;
  void onCameraStorageChanged(int j, int j1);
  bool get onCameraStorageChanged$async => false;
  void onCameraBatteryLow();
  bool get onCameraBatteryLow$async => false;
  void onCameraBatteryUpdate(int i, bool z);
  bool get onCameraBatteryUpdate$async => false;
  void onCameraSensorModeChanged(int i);
  bool get onCameraSensorModeChanged$async => false;
  void onCameraPreviewStreamParamsChanged(_$jni.JObject baseCamera, bool z);
  bool get onCameraPreviewStreamParamsChanged$async => false;
}

final class _$ICameraChangedCallback with $ICameraChangedCallback {
  _$ICameraChangedCallback(
    {required void Function(bool z) onCameraStatusChanged, this.onCameraStatusChanged$async = false,
    required void Function(int i) onCameraConnectError, this.onCameraConnectError$async = false,
    required void Function(bool z) onCameraSDCardStateChanged, this.onCameraSDCardStateChanged$async = false,
    required void Function(int j, int j1) onCameraStorageChanged, this.onCameraStorageChanged$async = false,
    required void Function() onCameraBatteryLow, this.onCameraBatteryLow$async = false,
    required void Function(int i, bool z) onCameraBatteryUpdate, this.onCameraBatteryUpdate$async = false,
    required void Function(int i) onCameraSensorModeChanged, this.onCameraSensorModeChanged$async = false,
    required void Function(_$jni.JObject baseCamera, bool z) onCameraPreviewStreamParamsChanged, this.onCameraPreviewStreamParamsChanged$async = false,}
  ) :  _onCameraStatusChanged = onCameraStatusChanged, _onCameraConnectError = onCameraConnectError, _onCameraSDCardStateChanged = onCameraSDCardStateChanged, _onCameraStorageChanged = onCameraStorageChanged, _onCameraBatteryLow = onCameraBatteryLow, _onCameraBatteryUpdate = onCameraBatteryUpdate, _onCameraSensorModeChanged = onCameraSensorModeChanged, _onCameraPreviewStreamParamsChanged = onCameraPreviewStreamParamsChanged;

  

  final void Function(bool z) _onCameraStatusChanged;
  final bool onCameraStatusChanged$async;
  final void Function(int i) _onCameraConnectError;
  final bool onCameraConnectError$async;
  final void Function(bool z) _onCameraSDCardStateChanged;
  final bool onCameraSDCardStateChanged$async;
  final void Function(int j, int j1) _onCameraStorageChanged;
  final bool onCameraStorageChanged$async;
  final void Function() _onCameraBatteryLow;
  final bool onCameraBatteryLow$async;
  final void Function(int i, bool z) _onCameraBatteryUpdate;
  final bool onCameraBatteryUpdate$async;
  final void Function(int i) _onCameraSensorModeChanged;
  final bool onCameraSensorModeChanged$async;
  final void Function(_$jni.JObject baseCamera, bool z) _onCameraPreviewStreamParamsChanged;
  final bool onCameraPreviewStreamParamsChanged$async;

  void onCameraStatusChanged(bool z) {
    return _onCameraStatusChanged(z);
  }  void onCameraConnectError(int i) {
    return _onCameraConnectError(i);
  }  void onCameraSDCardStateChanged(bool z) {
    return _onCameraSDCardStateChanged(z);
  }  void onCameraStorageChanged(int j, int j1) {
    return _onCameraStorageChanged(j, j1);
  }  void onCameraBatteryLow() {
    return _onCameraBatteryLow();
  }  void onCameraBatteryUpdate(int i, bool z) {
    return _onCameraBatteryUpdate(i, z);
  }  void onCameraSensorModeChanged(int i) {
    return _onCameraSensorModeChanged(i);
  }  void onCameraPreviewStreamParamsChanged(_$jni.JObject baseCamera, bool z) {
    return _onCameraPreviewStreamParamsChanged(baseCamera, z);
  }}
final class $ICameraChangedCallback$Type extends _$jni.JObjType<ICameraChangedCallback> {
  

  @_$jni.internal
  const $ICameraChangedCallback$Type(
    
  );

  @_$jni.internal
  @_$core.override
  String get signature => r'Lcom/arashivision/sdkcamera/camera/callback/ICameraChangedCallback;';

  @_$jni.internal
  @_$core.override
  ICameraChangedCallback fromReference(_$jni.JReference reference) => ICameraChangedCallback.fromReference(
    
    reference
  );

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($ICameraChangedCallback$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ICameraChangedCallback$Type) &&
        other is $ICameraChangedCallback$Type;
  }
}

/// from: `com.arashivision.sdkcamera.camera.callback.ICameraOperateCallback`
class ICameraOperateCallback extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<ICameraOperateCallback> $type;

  

  @_$jni.internal
  ICameraOperateCallback.fromReference(
    
    _$jni.JReference reference,
  ) :
    $type = type,
    super.fromReference(
      
      reference
    );

  static final _class = _$jni.JClass.forName(r'com/arashivision/sdkcamera/camera/callback/ICameraOperateCallback');

      /// The type which includes information such as the signature of this class.
static const type = $ICameraOperateCallback$Type();
  static final _id_onSuccessful = _class.instanceMethodId(
    r'onSuccessful',
    r'()V',
  );

  static final _onSuccessful = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public abstract void onSuccessful()`
  void onSuccessful(){
    
    _onSuccessful(reference.pointer, _id_onSuccessful as _$jni.JMethodIDPtr).check();
  }

  static final _id_onFailed = _class.instanceMethodId(
    r'onFailed',
    r'()V',
  );

  static final _onFailed = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public abstract void onFailed()`
  void onFailed(){
    
    _onFailed(reference.pointer, _id_onFailed as _$jni.JMethodIDPtr).check();
  }

  static final _id_onCameraConnectError = _class.instanceMethodId(
    r'onCameraConnectError',
    r'()V',
  );

  static final _onCameraConnectError = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public abstract void onCameraConnectError()`
  void onCameraConnectError(){
    
    _onCameraConnectError(reference.pointer, _id_onCameraConnectError as _$jni.JMethodIDPtr).check();
  }

  /// Maps a specific port to the implemented interface.
  static final _$core.Map<int, $ICameraOperateCallback> _$impls = {};
  static _$jni.JObjectPtr _$invoke(
    int port,
    _$jni.JObjectPtr descriptor,
    _$jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      _$jni.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final _$jni.Pointer<
          _$jni.NativeFunction<
              _$jni.JObjectPtr Function(
                  _$jni.Int64, _$jni.JObjectPtr, _$jni.JObjectPtr)>>
      _$invokePointer = _$jni.Pointer.fromFunction(_$invoke);

  static _$jni.Pointer<_$jni.Void> _$invokeMethod(
    int $p,
    _$jni.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
            if ($d == r'onSuccessful()V') {
          _$impls[$p]!.onSuccessful(
          );
          return _$jni.nullptr;
        }
        if ($d == r'onFailed()V') {
          _$impls[$p]!.onFailed(
          );
          return _$jni.nullptr;
        }
        if ($d == r'onCameraConnectError()V') {
          _$impls[$p]!.onCameraConnectError(
          );
          return _$jni.nullptr;
        }
    } catch (e) {
      return _$jni.ProtectedJniExtensions.newDartException(e);
    }
    return _$jni.nullptr;
  }

  static void implementIn(
    _$jni.JImplementer implementer,
    $ICameraOperateCallback $impl,
  ) {
    late final _$jni.RawReceivePort $p;
    $p = _$jni.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = _$jni.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      _$jni.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'com.arashivision.sdkcamera.camera.callback.ICameraOperateCallback',
      $p,
      _$invokePointer,
      [
        if ($impl.onSuccessful$async) r'onSuccessful()V',
        if ($impl.onFailed$async) r'onFailed()V',
        if ($impl.onCameraConnectError$async) r'onCameraConnectError()V',
      ],
    );
    final $a = $p.sendPort.nativePort; 
    _$impls[$a] = $impl;
  }

  factory ICameraOperateCallback.implement(
    $ICameraOperateCallback $impl,
  ) {
    final $i = _$jni.JImplementer();
    implementIn($i, $impl);
    return ICameraOperateCallback.fromReference(
      
      $i.implementReference(),
    );
  }
  }
abstract base mixin class $ICameraOperateCallback {
  factory $ICameraOperateCallback(
    {required void Function() onSuccessful, bool onSuccessful$async,
    required void Function() onFailed, bool onFailed$async,
    required void Function() onCameraConnectError, bool onCameraConnectError$async,}
  ) = _$ICameraOperateCallback;

  

  void onSuccessful();
  bool get onSuccessful$async => false;
  void onFailed();
  bool get onFailed$async => false;
  void onCameraConnectError();
  bool get onCameraConnectError$async => false;
}

final class _$ICameraOperateCallback with $ICameraOperateCallback {
  _$ICameraOperateCallback(
    {required void Function() onSuccessful, this.onSuccessful$async = false,
    required void Function() onFailed, this.onFailed$async = false,
    required void Function() onCameraConnectError, this.onCameraConnectError$async = false,}
  ) :  _onSuccessful = onSuccessful, _onFailed = onFailed, _onCameraConnectError = onCameraConnectError;

  

  final void Function() _onSuccessful;
  final bool onSuccessful$async;
  final void Function() _onFailed;
  final bool onFailed$async;
  final void Function() _onCameraConnectError;
  final bool onCameraConnectError$async;

  void onSuccessful() {
    return _onSuccessful();
  }  void onFailed() {
    return _onFailed();
  }  void onCameraConnectError() {
    return _onCameraConnectError();
  }}
final class $ICameraOperateCallback$Type extends _$jni.JObjType<ICameraOperateCallback> {
  

  @_$jni.internal
  const $ICameraOperateCallback$Type(
    
  );

  @_$jni.internal
  @_$core.override
  String get signature => r'Lcom/arashivision/sdkcamera/camera/callback/ICameraOperateCallback;';

  @_$jni.internal
  @_$core.override
  ICameraOperateCallback fromReference(_$jni.JReference reference) => ICameraOperateCallback.fromReference(
    
    reference
  );

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($ICameraOperateCallback$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ICameraOperateCallback$Type) &&
        other is $ICameraOperateCallback$Type;
  }
}

/// from: `com.arashivision.sdkcamera.camera.callback.ICaptureStatusListener`
class ICaptureStatusListener extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<ICaptureStatusListener> $type;

  

  @_$jni.internal
  ICaptureStatusListener.fromReference(
    
    _$jni.JReference reference,
  ) :
    $type = type,
    super.fromReference(
      
      reference
    );

  static final _class = _$jni.JClass.forName(r'com/arashivision/sdkcamera/camera/callback/ICaptureStatusListener');

      /// The type which includes information such as the signature of this class.
static const type = $ICaptureStatusListener$Type();
  static final _id_onCaptureStarting = _class.instanceMethodId(
    r'onCaptureStarting',
    r'()V',
  );

  static final _onCaptureStarting = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public void onCaptureStarting()`
  void onCaptureStarting(){
    
    _onCaptureStarting(reference.pointer, _id_onCaptureStarting as _$jni.JMethodIDPtr).check();
  }

  static final _id_onCaptureWorking = _class.instanceMethodId(
    r'onCaptureWorking',
    r'()V',
  );

  static final _onCaptureWorking = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public void onCaptureWorking()`
  void onCaptureWorking(){
    
    _onCaptureWorking(reference.pointer, _id_onCaptureWorking as _$jni.JMethodIDPtr).check();
  }

  static final _id_onCaptureStopping = _class.instanceMethodId(
    r'onCaptureStopping',
    r'()V',
  );

  static final _onCaptureStopping = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public void onCaptureStopping()`
  void onCaptureStopping(){
    
    _onCaptureStopping(reference.pointer, _id_onCaptureStopping as _$jni.JMethodIDPtr).check();
  }

  static final _id_onCaptureFinish = _class.instanceMethodId(
    r'onCaptureFinish',
    r'([Ljava/lang/String;)V',
  );

  static final _onCaptureFinish = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();
  /// from: `public abstract void onCaptureFinish(java.lang.String[] strings)`
  void onCaptureFinish(_$jni.JArray<_$jni.JString> strings, ){
    
    _onCaptureFinish(reference.pointer, _id_onCaptureFinish as _$jni.JMethodIDPtr, strings.reference.pointer).check();
  }

  static final _id_onCaptureTimeChanged = _class.instanceMethodId(
    r'onCaptureTimeChanged',
    r'(J)V',
  );

  static final _onCaptureTimeChanged = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int64,)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();
  /// from: `public void onCaptureTimeChanged(long j)`
  void onCaptureTimeChanged(int j, ){
    
    _onCaptureTimeChanged(reference.pointer, _id_onCaptureTimeChanged as _$jni.JMethodIDPtr, j).check();
  }

  static final _id_onCaptureCountChanged = _class.instanceMethodId(
    r'onCaptureCountChanged',
    r'(I)V',
  );

  static final _onCaptureCountChanged = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();
  /// from: `public void onCaptureCountChanged(int i)`
  void onCaptureCountChanged(int i, ){
    
    _onCaptureCountChanged(reference.pointer, _id_onCaptureCountChanged as _$jni.JMethodIDPtr, i).check();
  }

  /// Maps a specific port to the implemented interface.
  static final _$core.Map<int, $ICaptureStatusListener> _$impls = {};
  static _$jni.JObjectPtr _$invoke(
    int port,
    _$jni.JObjectPtr descriptor,
    _$jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      _$jni.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final _$jni.Pointer<
          _$jni.NativeFunction<
              _$jni.JObjectPtr Function(
                  _$jni.Int64, _$jni.JObjectPtr, _$jni.JObjectPtr)>>
      _$invokePointer = _$jni.Pointer.fromFunction(_$invoke);

  static _$jni.Pointer<_$jni.Void> _$invokeMethod(
    int $p,
    _$jni.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
            if ($d == r'onCaptureStarting()V') {
          _$impls[$p]!.onCaptureStarting(
          );
          return _$jni.nullptr;
        }
        if ($d == r'onCaptureWorking()V') {
          _$impls[$p]!.onCaptureWorking(
          );
          return _$jni.nullptr;
        }
        if ($d == r'onCaptureStopping()V') {
          _$impls[$p]!.onCaptureStopping(
          );
          return _$jni.nullptr;
        }
        if ($d == r'onCaptureFinish([Ljava/lang/String;)V') {
          _$impls[$p]!.onCaptureFinish(
$a[0].as(const _$jni.JArrayType(_$jni.JStringType()), releaseOriginal: true),
          );
          return _$jni.nullptr;
        }
        if ($d == r'onCaptureTimeChanged(J)V') {
          _$impls[$p]!.onCaptureTimeChanged(
$a[0].as(const _$jni.JLongType(), releaseOriginal: true).longValue(releaseOriginal: true),
          );
          return _$jni.nullptr;
        }
        if ($d == r'onCaptureCountChanged(I)V') {
          _$impls[$p]!.onCaptureCountChanged(
$a[0].as(const _$jni.JIntegerType(), releaseOriginal: true).intValue(releaseOriginal: true),
          );
          return _$jni.nullptr;
        }
    } catch (e) {
      return _$jni.ProtectedJniExtensions.newDartException(e);
    }
    return _$jni.nullptr;
  }

  static void implementIn(
    _$jni.JImplementer implementer,
    $ICaptureStatusListener $impl,
  ) {
    late final _$jni.RawReceivePort $p;
    $p = _$jni.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = _$jni.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      _$jni.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'com.arashivision.sdkcamera.camera.callback.ICaptureStatusListener',
      $p,
      _$invokePointer,
      [
        if ($impl.onCaptureStarting$async) r'onCaptureStarting()V',
        if ($impl.onCaptureWorking$async) r'onCaptureWorking()V',
        if ($impl.onCaptureStopping$async) r'onCaptureStopping()V',
        if ($impl.onCaptureFinish$async) r'onCaptureFinish([Ljava/lang/String;)V',
        if ($impl.onCaptureTimeChanged$async) r'onCaptureTimeChanged(J)V',
        if ($impl.onCaptureCountChanged$async) r'onCaptureCountChanged(I)V',
      ],
    );
    final $a = $p.sendPort.nativePort; 
    _$impls[$a] = $impl;
  }

  factory ICaptureStatusListener.implement(
    $ICaptureStatusListener $impl,
  ) {
    final $i = _$jni.JImplementer();
    implementIn($i, $impl);
    return ICaptureStatusListener.fromReference(
      
      $i.implementReference(),
    );
  }
  }
abstract base mixin class $ICaptureStatusListener {
  factory $ICaptureStatusListener(
    {required void Function() onCaptureStarting, bool onCaptureStarting$async,
    required void Function() onCaptureWorking, bool onCaptureWorking$async,
    required void Function() onCaptureStopping, bool onCaptureStopping$async,
    required void Function(_$jni.JArray<_$jni.JString> strings) onCaptureFinish, bool onCaptureFinish$async,
    required void Function(int j) onCaptureTimeChanged, bool onCaptureTimeChanged$async,
    required void Function(int i) onCaptureCountChanged, bool onCaptureCountChanged$async,}
  ) = _$ICaptureStatusListener;

  

  void onCaptureStarting();
  bool get onCaptureStarting$async => false;
  void onCaptureWorking();
  bool get onCaptureWorking$async => false;
  void onCaptureStopping();
  bool get onCaptureStopping$async => false;
  void onCaptureFinish(_$jni.JArray<_$jni.JString> strings);
  bool get onCaptureFinish$async => false;
  void onCaptureTimeChanged(int j);
  bool get onCaptureTimeChanged$async => false;
  void onCaptureCountChanged(int i);
  bool get onCaptureCountChanged$async => false;
}

final class _$ICaptureStatusListener with $ICaptureStatusListener {
  _$ICaptureStatusListener(
    {required void Function() onCaptureStarting, this.onCaptureStarting$async = false,
    required void Function() onCaptureWorking, this.onCaptureWorking$async = false,
    required void Function() onCaptureStopping, this.onCaptureStopping$async = false,
    required void Function(_$jni.JArray<_$jni.JString> strings) onCaptureFinish, this.onCaptureFinish$async = false,
    required void Function(int j) onCaptureTimeChanged, this.onCaptureTimeChanged$async = false,
    required void Function(int i) onCaptureCountChanged, this.onCaptureCountChanged$async = false,}
  ) :  _onCaptureStarting = onCaptureStarting, _onCaptureWorking = onCaptureWorking, _onCaptureStopping = onCaptureStopping, _onCaptureFinish = onCaptureFinish, _onCaptureTimeChanged = onCaptureTimeChanged, _onCaptureCountChanged = onCaptureCountChanged;

  

  final void Function() _onCaptureStarting;
  final bool onCaptureStarting$async;
  final void Function() _onCaptureWorking;
  final bool onCaptureWorking$async;
  final void Function() _onCaptureStopping;
  final bool onCaptureStopping$async;
  final void Function(_$jni.JArray<_$jni.JString> strings) _onCaptureFinish;
  final bool onCaptureFinish$async;
  final void Function(int j) _onCaptureTimeChanged;
  final bool onCaptureTimeChanged$async;
  final void Function(int i) _onCaptureCountChanged;
  final bool onCaptureCountChanged$async;

  void onCaptureStarting() {
    return _onCaptureStarting();
  }  void onCaptureWorking() {
    return _onCaptureWorking();
  }  void onCaptureStopping() {
    return _onCaptureStopping();
  }  void onCaptureFinish(_$jni.JArray<_$jni.JString> strings) {
    return _onCaptureFinish(strings);
  }  void onCaptureTimeChanged(int j) {
    return _onCaptureTimeChanged(j);
  }  void onCaptureCountChanged(int i) {
    return _onCaptureCountChanged(i);
  }}
final class $ICaptureStatusListener$Type extends _$jni.JObjType<ICaptureStatusListener> {
  

  @_$jni.internal
  const $ICaptureStatusListener$Type(
    
  );

  @_$jni.internal
  @_$core.override
  String get signature => r'Lcom/arashivision/sdkcamera/camera/callback/ICaptureStatusListener;';

  @_$jni.internal
  @_$core.override
  ICaptureStatusListener fromReference(_$jni.JReference reference) => ICaptureStatusListener.fromReference(
    
    reference
  );

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($ICaptureStatusListener$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ICaptureStatusListener$Type) &&
        other is $ICaptureStatusListener$Type;
  }
}

/// from: `com.arashivision.sdkcamera.camera.callback.ILiveStatusListener`
class ILiveStatusListener extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<ILiveStatusListener> $type;

  

  @_$jni.internal
  ILiveStatusListener.fromReference(
    
    _$jni.JReference reference,
  ) :
    $type = type,
    super.fromReference(
      
      reference
    );

  static final _class = _$jni.JClass.forName(r'com/arashivision/sdkcamera/camera/callback/ILiveStatusListener');

      /// The type which includes information such as the signature of this class.
static const type = $ILiveStatusListener$Type();
  static final _id_onLivePushStarted = _class.instanceMethodId(
    r'onLivePushStarted',
    r'()V',
  );

  static final _onLivePushStarted = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public void onLivePushStarted()`
  void onLivePushStarted(){
    
    _onLivePushStarted(reference.pointer, _id_onLivePushStarted as _$jni.JMethodIDPtr).check();
  }

  static final _id_onLivePushFinished = _class.instanceMethodId(
    r'onLivePushFinished',
    r'()V',
  );

  static final _onLivePushFinished = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public void onLivePushFinished()`
  void onLivePushFinished(){
    
    _onLivePushFinished(reference.pointer, _id_onLivePushFinished as _$jni.JMethodIDPtr).check();
  }

  static final _id_onLivePushError = _class.instanceMethodId(
    r'onLivePushError',
    r'(ILjava/lang/String;)V',
  );

  static final _onLivePushError = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32, _$jni.Pointer<_$jni.Void>)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int, _$jni.Pointer<_$jni.Void>)>();
  /// from: `public void onLivePushError(int i, java.lang.String string)`
  void onLivePushError(int i, _$jni.JString string, ){
    
    _onLivePushError(reference.pointer, _id_onLivePushError as _$jni.JMethodIDPtr, i, string.reference.pointer).check();
  }

  static final _id_onLiveFpsUpdate = _class.instanceMethodId(
    r'onLiveFpsUpdate',
    r'(I)V',
  );

  static final _onLiveFpsUpdate = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();
  /// from: `public void onLiveFpsUpdate(int i)`
  void onLiveFpsUpdate(int i, ){
    
    _onLiveFpsUpdate(reference.pointer, _id_onLiveFpsUpdate as _$jni.JMethodIDPtr, i).check();
  }

  /// Maps a specific port to the implemented interface.
  static final _$core.Map<int, $ILiveStatusListener> _$impls = {};
  static _$jni.JObjectPtr _$invoke(
    int port,
    _$jni.JObjectPtr descriptor,
    _$jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      _$jni.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final _$jni.Pointer<
          _$jni.NativeFunction<
              _$jni.JObjectPtr Function(
                  _$jni.Int64, _$jni.JObjectPtr, _$jni.JObjectPtr)>>
      _$invokePointer = _$jni.Pointer.fromFunction(_$invoke);

  static _$jni.Pointer<_$jni.Void> _$invokeMethod(
    int $p,
    _$jni.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
            if ($d == r'onLivePushStarted()V') {
          _$impls[$p]!.onLivePushStarted(
          );
          return _$jni.nullptr;
        }
        if ($d == r'onLivePushFinished()V') {
          _$impls[$p]!.onLivePushFinished(
          );
          return _$jni.nullptr;
        }
        if ($d == r'onLivePushError(ILjava/lang/String;)V') {
          _$impls[$p]!.onLivePushError(
$a[0].as(const _$jni.JIntegerType(), releaseOriginal: true).intValue(releaseOriginal: true),
$a[1].as(const _$jni.JStringType(), releaseOriginal: true),
          );
          return _$jni.nullptr;
        }
        if ($d == r'onLiveFpsUpdate(I)V') {
          _$impls[$p]!.onLiveFpsUpdate(
$a[0].as(const _$jni.JIntegerType(), releaseOriginal: true).intValue(releaseOriginal: true),
          );
          return _$jni.nullptr;
        }
    } catch (e) {
      return _$jni.ProtectedJniExtensions.newDartException(e);
    }
    return _$jni.nullptr;
  }

  static void implementIn(
    _$jni.JImplementer implementer,
    $ILiveStatusListener $impl,
  ) {
    late final _$jni.RawReceivePort $p;
    $p = _$jni.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = _$jni.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      _$jni.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'com.arashivision.sdkcamera.camera.callback.ILiveStatusListener',
      $p,
      _$invokePointer,
      [
        if ($impl.onLivePushStarted$async) r'onLivePushStarted()V',
        if ($impl.onLivePushFinished$async) r'onLivePushFinished()V',
        if ($impl.onLivePushError$async) r'onLivePushError(ILjava/lang/String;)V',
        if ($impl.onLiveFpsUpdate$async) r'onLiveFpsUpdate(I)V',
      ],
    );
    final $a = $p.sendPort.nativePort; 
    _$impls[$a] = $impl;
  }

  factory ILiveStatusListener.implement(
    $ILiveStatusListener $impl,
  ) {
    final $i = _$jni.JImplementer();
    implementIn($i, $impl);
    return ILiveStatusListener.fromReference(
      
      $i.implementReference(),
    );
  }
  }
abstract base mixin class $ILiveStatusListener {
  factory $ILiveStatusListener(
    {required void Function() onLivePushStarted, bool onLivePushStarted$async,
    required void Function() onLivePushFinished, bool onLivePushFinished$async,
    required void Function(int i, _$jni.JString string) onLivePushError, bool onLivePushError$async,
    required void Function(int i) onLiveFpsUpdate, bool onLiveFpsUpdate$async,}
  ) = _$ILiveStatusListener;

  

  void onLivePushStarted();
  bool get onLivePushStarted$async => false;
  void onLivePushFinished();
  bool get onLivePushFinished$async => false;
  void onLivePushError(int i, _$jni.JString string);
  bool get onLivePushError$async => false;
  void onLiveFpsUpdate(int i);
  bool get onLiveFpsUpdate$async => false;
}

final class _$ILiveStatusListener with $ILiveStatusListener {
  _$ILiveStatusListener(
    {required void Function() onLivePushStarted, this.onLivePushStarted$async = false,
    required void Function() onLivePushFinished, this.onLivePushFinished$async = false,
    required void Function(int i, _$jni.JString string) onLivePushError, this.onLivePushError$async = false,
    required void Function(int i) onLiveFpsUpdate, this.onLiveFpsUpdate$async = false,}
  ) :  _onLivePushStarted = onLivePushStarted, _onLivePushFinished = onLivePushFinished, _onLivePushError = onLivePushError, _onLiveFpsUpdate = onLiveFpsUpdate;

  

  final void Function() _onLivePushStarted;
  final bool onLivePushStarted$async;
  final void Function() _onLivePushFinished;
  final bool onLivePushFinished$async;
  final void Function(int i, _$jni.JString string) _onLivePushError;
  final bool onLivePushError$async;
  final void Function(int i) _onLiveFpsUpdate;
  final bool onLiveFpsUpdate$async;

  void onLivePushStarted() {
    return _onLivePushStarted();
  }  void onLivePushFinished() {
    return _onLivePushFinished();
  }  void onLivePushError(int i, _$jni.JString string) {
    return _onLivePushError(i, string);
  }  void onLiveFpsUpdate(int i) {
    return _onLiveFpsUpdate(i);
  }}
final class $ILiveStatusListener$Type extends _$jni.JObjType<ILiveStatusListener> {
  

  @_$jni.internal
  const $ILiveStatusListener$Type(
    
  );

  @_$jni.internal
  @_$core.override
  String get signature => r'Lcom/arashivision/sdkcamera/camera/callback/ILiveStatusListener;';

  @_$jni.internal
  @_$core.override
  ILiveStatusListener fromReference(_$jni.JReference reference) => ILiveStatusListener.fromReference(
    
    reference
  );

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($ILiveStatusListener$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ILiveStatusListener$Type) &&
        other is $ILiveStatusListener$Type;
  }
}

/// from: `com.arashivision.sdkcamera.camera.callback.IPreviewStatusListener`
class IPreviewStatusListener extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<IPreviewStatusListener> $type;

  

  @_$jni.internal
  IPreviewStatusListener.fromReference(
    
    _$jni.JReference reference,
  ) :
    $type = type,
    super.fromReference(
      
      reference
    );

  static final _class = _$jni.JClass.forName(r'com/arashivision/sdkcamera/camera/callback/IPreviewStatusListener');

      /// The type which includes information such as the signature of this class.
static const type = $IPreviewStatusListener$Type();
  static final _id_onOpening = _class.instanceMethodId(
    r'onOpening',
    r'()V',
  );

  static final _onOpening = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public void onOpening()`
  void onOpening(){
    
    _onOpening(reference.pointer, _id_onOpening as _$jni.JMethodIDPtr).check();
  }

  static final _id_onOpened = _class.instanceMethodId(
    r'onOpened',
    r'()V',
  );

  static final _onOpened = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public void onOpened()`
  void onOpened(){
    
    _onOpened(reference.pointer, _id_onOpened as _$jni.JMethodIDPtr).check();
  }

  static final _id_onIdle = _class.instanceMethodId(
    r'onIdle',
    r'()V',
  );

  static final _onIdle = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public void onIdle()`
  void onIdle(){
    
    _onIdle(reference.pointer, _id_onIdle as _$jni.JMethodIDPtr).check();
  }

  static final _id_onError = _class.instanceMethodId(
    r'onError',
    r'()V',
  );

  static final _onError = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public void onError()`
  void onError(){
    
    _onError(reference.pointer, _id_onError as _$jni.JMethodIDPtr).check();
  }

  static final _id_onVideoData = _class.instanceMethodId(
    r'onVideoData',
    r'(Lcom/arashivision/sdkcamera/camera/preview/VideoData;)V',
  );

  static final _onVideoData = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();
  /// from: `public void onVideoData(com.arashivision.sdkcamera.camera.preview.VideoData videoData)`
  void onVideoData(VideoData videoData, ){
    
    _onVideoData(reference.pointer, _id_onVideoData as _$jni.JMethodIDPtr, videoData.reference.pointer).check();
  }

  static final _id_onGyroData = _class.instanceMethodId(
    r'onGyroData',
    r'(Ljava/util/List;)V',
  );

  static final _onGyroData = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();
  /// from: `public void onGyroData(java.util.List list)`
  void onGyroData(_$jni.JList<GyroData> list, ){
    
    _onGyroData(reference.pointer, _id_onGyroData as _$jni.JMethodIDPtr, list.reference.pointer).check();
  }

  static final _id_onExposureData = _class.instanceMethodId(
    r'onExposureData',
    r'(Lcom/arashivision/sdkcamera/camera/preview/ExposureData;)V',
  );

  static final _onExposureData = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();
  /// from: `public void onExposureData(com.arashivision.sdkcamera.camera.preview.ExposureData exposureData)`
  void onExposureData(ExposureData exposureData, ){
    
    _onExposureData(reference.pointer, _id_onExposureData as _$jni.JMethodIDPtr, exposureData.reference.pointer).check();
  }

  /// Maps a specific port to the implemented interface.
  static final _$core.Map<int, $IPreviewStatusListener> _$impls = {};
  static _$jni.JObjectPtr _$invoke(
    int port,
    _$jni.JObjectPtr descriptor,
    _$jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      _$jni.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final _$jni.Pointer<
          _$jni.NativeFunction<
              _$jni.JObjectPtr Function(
                  _$jni.Int64, _$jni.JObjectPtr, _$jni.JObjectPtr)>>
      _$invokePointer = _$jni.Pointer.fromFunction(_$invoke);

  static _$jni.Pointer<_$jni.Void> _$invokeMethod(
    int $p,
    _$jni.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
            if ($d == r'onOpening()V') {
          _$impls[$p]!.onOpening(
          );
          return _$jni.nullptr;
        }
        if ($d == r'onOpened()V') {
          _$impls[$p]!.onOpened(
          );
          return _$jni.nullptr;
        }
        if ($d == r'onIdle()V') {
          _$impls[$p]!.onIdle(
          );
          return _$jni.nullptr;
        }
        if ($d == r'onError()V') {
          _$impls[$p]!.onError(
          );
          return _$jni.nullptr;
        }
        if ($d == r'onVideoData(Lcom/arashivision/sdkcamera/camera/preview/VideoData;)V') {
          _$impls[$p]!.onVideoData(
$a[0].as(const $VideoData$Type(), releaseOriginal: true),
          );
          return _$jni.nullptr;
        }
        if ($d == r'onGyroData(Ljava/util/List;)V') {
          _$impls[$p]!.onGyroData(
$a[0].as(const _$jni.JListType($GyroData$Type()), releaseOriginal: true),
          );
          return _$jni.nullptr;
        }
        if ($d == r'onExposureData(Lcom/arashivision/sdkcamera/camera/preview/ExposureData;)V') {
          _$impls[$p]!.onExposureData(
$a[0].as(const $ExposureData$Type(), releaseOriginal: true),
          );
          return _$jni.nullptr;
        }
    } catch (e) {
      return _$jni.ProtectedJniExtensions.newDartException(e);
    }
    return _$jni.nullptr;
  }

  static void implementIn(
    _$jni.JImplementer implementer,
    $IPreviewStatusListener $impl,
  ) {
    late final _$jni.RawReceivePort $p;
    $p = _$jni.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = _$jni.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      _$jni.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'com.arashivision.sdkcamera.camera.callback.IPreviewStatusListener',
      $p,
      _$invokePointer,
      [
        if ($impl.onOpening$async) r'onOpening()V',
        if ($impl.onOpened$async) r'onOpened()V',
        if ($impl.onIdle$async) r'onIdle()V',
        if ($impl.onError$async) r'onError()V',
        if ($impl.onVideoData$async) r'onVideoData(Lcom/arashivision/sdkcamera/camera/preview/VideoData;)V',
        if ($impl.onGyroData$async) r'onGyroData(Ljava/util/List;)V',
        if ($impl.onExposureData$async) r'onExposureData(Lcom/arashivision/sdkcamera/camera/preview/ExposureData;)V',
      ],
    );
    final $a = $p.sendPort.nativePort; 
    _$impls[$a] = $impl;
  }

  factory IPreviewStatusListener.implement(
    $IPreviewStatusListener $impl,
  ) {
    final $i = _$jni.JImplementer();
    implementIn($i, $impl);
    return IPreviewStatusListener.fromReference(
      
      $i.implementReference(),
    );
  }
  }
abstract base mixin class $IPreviewStatusListener {
  factory $IPreviewStatusListener(
    {required void Function() onOpening, bool onOpening$async,
    required void Function() onOpened, bool onOpened$async,
    required void Function() onIdle, bool onIdle$async,
    required void Function() onError, bool onError$async,
    required void Function(VideoData videoData) onVideoData, bool onVideoData$async,
    required void Function(_$jni.JList<GyroData> list) onGyroData, bool onGyroData$async,
    required void Function(ExposureData exposureData) onExposureData, bool onExposureData$async,}
  ) = _$IPreviewStatusListener;

  

  void onOpening();
  bool get onOpening$async => false;
  void onOpened();
  bool get onOpened$async => false;
  void onIdle();
  bool get onIdle$async => false;
  void onError();
  bool get onError$async => false;
  void onVideoData(VideoData videoData);
  bool get onVideoData$async => false;
  void onGyroData(_$jni.JList<GyroData> list);
  bool get onGyroData$async => false;
  void onExposureData(ExposureData exposureData);
  bool get onExposureData$async => false;
}

final class _$IPreviewStatusListener with $IPreviewStatusListener {
  _$IPreviewStatusListener(
    {required void Function() onOpening, this.onOpening$async = false,
    required void Function() onOpened, this.onOpened$async = false,
    required void Function() onIdle, this.onIdle$async = false,
    required void Function() onError, this.onError$async = false,
    required void Function(VideoData videoData) onVideoData, this.onVideoData$async = false,
    required void Function(_$jni.JList<GyroData> list) onGyroData, this.onGyroData$async = false,
    required void Function(ExposureData exposureData) onExposureData, this.onExposureData$async = false,}
  ) :  _onOpening = onOpening, _onOpened = onOpened, _onIdle = onIdle, _onError = onError, _onVideoData = onVideoData, _onGyroData = onGyroData, _onExposureData = onExposureData;

  

  final void Function() _onOpening;
  final bool onOpening$async;
  final void Function() _onOpened;
  final bool onOpened$async;
  final void Function() _onIdle;
  final bool onIdle$async;
  final void Function() _onError;
  final bool onError$async;
  final void Function(VideoData videoData) _onVideoData;
  final bool onVideoData$async;
  final void Function(_$jni.JList<GyroData> list) _onGyroData;
  final bool onGyroData$async;
  final void Function(ExposureData exposureData) _onExposureData;
  final bool onExposureData$async;

  void onOpening() {
    return _onOpening();
  }  void onOpened() {
    return _onOpened();
  }  void onIdle() {
    return _onIdle();
  }  void onError() {
    return _onError();
  }  void onVideoData(VideoData videoData) {
    return _onVideoData(videoData);
  }  void onGyroData(_$jni.JList<GyroData> list) {
    return _onGyroData(list);
  }  void onExposureData(ExposureData exposureData) {
    return _onExposureData(exposureData);
  }}
final class $IPreviewStatusListener$Type extends _$jni.JObjType<IPreviewStatusListener> {
  

  @_$jni.internal
  const $IPreviewStatusListener$Type(
    
  );

  @_$jni.internal
  @_$core.override
  String get signature => r'Lcom/arashivision/sdkcamera/camera/callback/IPreviewStatusListener;';

  @_$jni.internal
  @_$core.override
  IPreviewStatusListener fromReference(_$jni.JReference reference) => IPreviewStatusListener.fromReference(
    
    reference
  );

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($IPreviewStatusListener$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($IPreviewStatusListener$Type) &&
        other is $IPreviewStatusListener$Type;
  }
}

/// from: `com.arashivision.sdkcamera.camera.callback.IScanBleListener`
class IScanBleListener extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<IScanBleListener> $type;

  

  @_$jni.internal
  IScanBleListener.fromReference(
    
    _$jni.JReference reference,
  ) :
    $type = type,
    super.fromReference(
      
      reference
    );

  static final _class = _$jni.JClass.forName(r'com/arashivision/sdkcamera/camera/callback/IScanBleListener');

      /// The type which includes information such as the signature of this class.
static const type = $IScanBleListener$Type();
  static final _id_onScanStartSuccess = _class.instanceMethodId(
    r'onScanStartSuccess',
    r'()V',
  );

  static final _onScanStartSuccess = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public abstract void onScanStartSuccess()`
  void onScanStartSuccess(){
    
    _onScanStartSuccess(reference.pointer, _id_onScanStartSuccess as _$jni.JMethodIDPtr).check();
  }

  static final _id_onScanStartFail = _class.instanceMethodId(
    r'onScanStartFail',
    r'()V',
  );

  static final _onScanStartFail = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public abstract void onScanStartFail()`
  void onScanStartFail(){
    
    _onScanStartFail(reference.pointer, _id_onScanStartFail as _$jni.JMethodIDPtr).check();
  }

  static final _id_onScanning = _class.instanceMethodId(
    r'onScanning',
    r'(Lcom/clj/fastble/data/BleDevice;)V',
  );

  static final _onScanning = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();
  /// from: `public abstract void onScanning(com.clj.fastble.data.BleDevice bleDevice)`
  void onScanning(_$jni.JObject bleDevice, ){
    
    _onScanning(reference.pointer, _id_onScanning as _$jni.JMethodIDPtr, bleDevice.reference.pointer).check();
  }

  static final _id_onScanFinish = _class.instanceMethodId(
    r'onScanFinish',
    r'(Ljava/util/List;)V',
  );

  static final _onScanFinish = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();
  /// from: `public abstract void onScanFinish(java.util.List list)`
  void onScanFinish(_$jni.JList<_$jni.JObject> list, ){
    
    _onScanFinish(reference.pointer, _id_onScanFinish as _$jni.JMethodIDPtr, list.reference.pointer).check();
  }

  /// Maps a specific port to the implemented interface.
  static final _$core.Map<int, $IScanBleListener> _$impls = {};
  static _$jni.JObjectPtr _$invoke(
    int port,
    _$jni.JObjectPtr descriptor,
    _$jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      _$jni.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final _$jni.Pointer<
          _$jni.NativeFunction<
              _$jni.JObjectPtr Function(
                  _$jni.Int64, _$jni.JObjectPtr, _$jni.JObjectPtr)>>
      _$invokePointer = _$jni.Pointer.fromFunction(_$invoke);

  static _$jni.Pointer<_$jni.Void> _$invokeMethod(
    int $p,
    _$jni.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
            if ($d == r'onScanStartSuccess()V') {
          _$impls[$p]!.onScanStartSuccess(
          );
          return _$jni.nullptr;
        }
        if ($d == r'onScanStartFail()V') {
          _$impls[$p]!.onScanStartFail(
          );
          return _$jni.nullptr;
        }
        if ($d == r'onScanning(Lcom/clj/fastble/data/BleDevice;)V') {
          _$impls[$p]!.onScanning(
$a[0].as(const _$jni.JObjectType(), releaseOriginal: true),
          );
          return _$jni.nullptr;
        }
        if ($d == r'onScanFinish(Ljava/util/List;)V') {
          _$impls[$p]!.onScanFinish(
$a[0].as(const _$jni.JListType(_$jni.JObjectType()), releaseOriginal: true),
          );
          return _$jni.nullptr;
        }
    } catch (e) {
      return _$jni.ProtectedJniExtensions.newDartException(e);
    }
    return _$jni.nullptr;
  }

  static void implementIn(
    _$jni.JImplementer implementer,
    $IScanBleListener $impl,
  ) {
    late final _$jni.RawReceivePort $p;
    $p = _$jni.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = _$jni.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      _$jni.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'com.arashivision.sdkcamera.camera.callback.IScanBleListener',
      $p,
      _$invokePointer,
      [
        if ($impl.onScanStartSuccess$async) r'onScanStartSuccess()V',
        if ($impl.onScanStartFail$async) r'onScanStartFail()V',
        if ($impl.onScanning$async) r'onScanning(Lcom/clj/fastble/data/BleDevice;)V',
        if ($impl.onScanFinish$async) r'onScanFinish(Ljava/util/List;)V',
      ],
    );
    final $a = $p.sendPort.nativePort; 
    _$impls[$a] = $impl;
  }

  factory IScanBleListener.implement(
    $IScanBleListener $impl,
  ) {
    final $i = _$jni.JImplementer();
    implementIn($i, $impl);
    return IScanBleListener.fromReference(
      
      $i.implementReference(),
    );
  }
  }
abstract base mixin class $IScanBleListener {
  factory $IScanBleListener(
    {required void Function() onScanStartSuccess, bool onScanStartSuccess$async,
    required void Function() onScanStartFail, bool onScanStartFail$async,
    required void Function(_$jni.JObject bleDevice) onScanning, bool onScanning$async,
    required void Function(_$jni.JList<_$jni.JObject> list) onScanFinish, bool onScanFinish$async,}
  ) = _$IScanBleListener;

  

  void onScanStartSuccess();
  bool get onScanStartSuccess$async => false;
  void onScanStartFail();
  bool get onScanStartFail$async => false;
  void onScanning(_$jni.JObject bleDevice);
  bool get onScanning$async => false;
  void onScanFinish(_$jni.JList<_$jni.JObject> list);
  bool get onScanFinish$async => false;
}

final class _$IScanBleListener with $IScanBleListener {
  _$IScanBleListener(
    {required void Function() onScanStartSuccess, this.onScanStartSuccess$async = false,
    required void Function() onScanStartFail, this.onScanStartFail$async = false,
    required void Function(_$jni.JObject bleDevice) onScanning, this.onScanning$async = false,
    required void Function(_$jni.JList<_$jni.JObject> list) onScanFinish, this.onScanFinish$async = false,}
  ) :  _onScanStartSuccess = onScanStartSuccess, _onScanStartFail = onScanStartFail, _onScanning = onScanning, _onScanFinish = onScanFinish;

  

  final void Function() _onScanStartSuccess;
  final bool onScanStartSuccess$async;
  final void Function() _onScanStartFail;
  final bool onScanStartFail$async;
  final void Function(_$jni.JObject bleDevice) _onScanning;
  final bool onScanning$async;
  final void Function(_$jni.JList<_$jni.JObject> list) _onScanFinish;
  final bool onScanFinish$async;

  void onScanStartSuccess() {
    return _onScanStartSuccess();
  }  void onScanStartFail() {
    return _onScanStartFail();
  }  void onScanning(_$jni.JObject bleDevice) {
    return _onScanning(bleDevice);
  }  void onScanFinish(_$jni.JList<_$jni.JObject> list) {
    return _onScanFinish(list);
  }}
final class $IScanBleListener$Type extends _$jni.JObjType<IScanBleListener> {
  

  @_$jni.internal
  const $IScanBleListener$Type(
    
  );

  @_$jni.internal
  @_$core.override
  String get signature => r'Lcom/arashivision/sdkcamera/camera/callback/IScanBleListener;';

  @_$jni.internal
  @_$core.override
  IScanBleListener fromReference(_$jni.JReference reference) => IScanBleListener.fromReference(
    
    reference
  );

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($IScanBleListener$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($IScanBleListener$Type) &&
        other is $IScanBleListener$Type;
  }
}

/// from: `com.arashivision.sdkcamera.camera.live.LiveParamsBuilder`
class LiveParamsBuilder extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<LiveParamsBuilder> $type;

  

  @_$jni.internal
  LiveParamsBuilder.fromReference(
    
    _$jni.JReference reference,
  ) :
    $type = type,
    super.fromReference(
      
      reference
    );

  static final _class = _$jni.JClass.forName(r'com/arashivision/sdkcamera/camera/live/LiveParamsBuilder');

      /// The type which includes information such as the signature of this class.
static const type = $LiveParamsBuilder$Type();
  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_NewObject')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory LiveParamsBuilder() {
    
    return LiveParamsBuilder.fromReference(
      
      _new$(_class.reference.pointer, _id_new$ as _$jni.JMethodIDPtr).reference
    );
  }

  static final _id_setRtmp = _class.instanceMethodId(
    r'setRtmp',
    r'(Ljava/lang/String;)Lcom/arashivision/sdkcamera/camera/live/LiveParamsBuilder;',
  );

  static final _setRtmp = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>('globalEnv_CallObjectMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();
  /// from: `public com.arashivision.sdkcamera.camera.live.LiveParamsBuilder setRtmp(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  LiveParamsBuilder setRtmp(_$jni.JString string, ){
    
    return _setRtmp(reference.pointer, _id_setRtmp as _$jni.JMethodIDPtr, string.reference.pointer).object(const $LiveParamsBuilder$Type());
  }

  static final _id_getRtmp = _class.instanceMethodId(
    r'getRtmp',
    r'()Ljava/lang/String;',
  );

  static final _getRtmp = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallObjectMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public java.lang.String getRtmp()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString getRtmp(){
    
    return _getRtmp(reference.pointer, _id_getRtmp as _$jni.JMethodIDPtr).object(const _$jni.JStringType());
  }

  static final _id_setWidth = _class.instanceMethodId(
    r'setWidth',
    r'(I)Lcom/arashivision/sdkcamera/camera/live/LiveParamsBuilder;',
  );

  static final _setWidth = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallObjectMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();
  /// from: `public com.arashivision.sdkcamera.camera.live.LiveParamsBuilder setWidth(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  LiveParamsBuilder setWidth(int i, ){
    
    return _setWidth(reference.pointer, _id_setWidth as _$jni.JMethodIDPtr, i).object(const $LiveParamsBuilder$Type());
  }

  static final _id_getWidth = _class.instanceMethodId(
    r'getWidth',
    r'()I',
  );

  static final _getWidth = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallIntMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public int getWidth()`
  int getWidth(){
    
    return _getWidth(reference.pointer, _id_getWidth as _$jni.JMethodIDPtr).integer;
  }

  static final _id_setHeight = _class.instanceMethodId(
    r'setHeight',
    r'(I)Lcom/arashivision/sdkcamera/camera/live/LiveParamsBuilder;',
  );

  static final _setHeight = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallObjectMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();
  /// from: `public com.arashivision.sdkcamera.camera.live.LiveParamsBuilder setHeight(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  LiveParamsBuilder setHeight(int i, ){
    
    return _setHeight(reference.pointer, _id_setHeight as _$jni.JMethodIDPtr, i).object(const $LiveParamsBuilder$Type());
  }

  static final _id_getHeight = _class.instanceMethodId(
    r'getHeight',
    r'()I',
  );

  static final _getHeight = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallIntMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public int getHeight()`
  int getHeight(){
    
    return _getHeight(reference.pointer, _id_getHeight as _$jni.JMethodIDPtr).integer;
  }

  static final _id_setFps = _class.instanceMethodId(
    r'setFps',
    r'(I)Lcom/arashivision/sdkcamera/camera/live/LiveParamsBuilder;',
  );

  static final _setFps = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallObjectMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();
  /// from: `public com.arashivision.sdkcamera.camera.live.LiveParamsBuilder setFps(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  LiveParamsBuilder setFps(int i, ){
    
    return _setFps(reference.pointer, _id_setFps as _$jni.JMethodIDPtr, i).object(const $LiveParamsBuilder$Type());
  }

  static final _id_getFps = _class.instanceMethodId(
    r'getFps',
    r'()I',
  );

  static final _getFps = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallIntMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public int getFps()`
  int getFps(){
    
    return _getFps(reference.pointer, _id_getFps as _$jni.JMethodIDPtr).integer;
  }

  static final _id_setBitrate = _class.instanceMethodId(
    r'setBitrate',
    r'(I)Lcom/arashivision/sdkcamera/camera/live/LiveParamsBuilder;',
  );

  static final _setBitrate = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallObjectMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();
  /// from: `public com.arashivision.sdkcamera.camera.live.LiveParamsBuilder setBitrate(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  LiveParamsBuilder setBitrate(int i, ){
    
    return _setBitrate(reference.pointer, _id_setBitrate as _$jni.JMethodIDPtr, i).object(const $LiveParamsBuilder$Type());
  }

  static final _id_getBitrate = _class.instanceMethodId(
    r'getBitrate',
    r'()I',
  );

  static final _getBitrate = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallIntMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public int getBitrate()`
  int getBitrate(){
    
    return _getBitrate(reference.pointer, _id_getBitrate as _$jni.JMethodIDPtr).integer;
  }

  static final _id_setPanorama = _class.instanceMethodId(
    r'setPanorama',
    r'(Z)Lcom/arashivision/sdkcamera/camera/live/LiveParamsBuilder;',
  );

  static final _setPanorama = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallObjectMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();
  /// from: `public com.arashivision.sdkcamera.camera.live.LiveParamsBuilder setPanorama(boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  LiveParamsBuilder setPanorama(bool z, ){
    
    return _setPanorama(reference.pointer, _id_setPanorama as _$jni.JMethodIDPtr, z ? 1 : 0).object(const $LiveParamsBuilder$Type());
  }

  static final _id_isPanorama = _class.instanceMethodId(
    r'isPanorama',
    r'()Z',
  );

  static final _isPanorama = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallBooleanMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public boolean isPanorama()`
  bool isPanorama(){
    
    return _isPanorama(reference.pointer, _id_isPanorama as _$jni.JMethodIDPtr).boolean;
  }

  static final _id_setNetId = _class.instanceMethodId(
    r'setNetId',
    r'(J)Lcom/arashivision/sdkcamera/camera/live/LiveParamsBuilder;',
  );

  static final _setNetId = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int64,)>)>>('globalEnv_CallObjectMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();
  /// from: `public com.arashivision.sdkcamera.camera.live.LiveParamsBuilder setNetId(long j)`
  /// The returned object must be released after use, by calling the [release] method.
  LiveParamsBuilder setNetId(int j, ){
    
    return _setNetId(reference.pointer, _id_setNetId as _$jni.JMethodIDPtr, j).object(const $LiveParamsBuilder$Type());
  }

  static final _id_getNetId = _class.instanceMethodId(
    r'getNetId',
    r'()J',
  );

  static final _getNetId = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallLongMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public long getNetId()`
  int getNetId(){
    
    return _getNetId(reference.pointer, _id_getNetId as _$jni.JMethodIDPtr).long;
  }

  static final _id_toString$1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString$1 = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallObjectMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public java.lang.String toString()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString toString$1(){
    
    return _toString$1(reference.pointer, _id_toString$1 as _$jni.JMethodIDPtr).object(const _$jni.JStringType());
  }

}
final class $LiveParamsBuilder$Type extends _$jni.JObjType<LiveParamsBuilder> {
  

  @_$jni.internal
  const $LiveParamsBuilder$Type(
    
  );

  @_$jni.internal
  @_$core.override
  String get signature => r'Lcom/arashivision/sdkcamera/camera/live/LiveParamsBuilder;';

  @_$jni.internal
  @_$core.override
  LiveParamsBuilder fromReference(_$jni.JReference reference) => LiveParamsBuilder.fromReference(
    
    reference
  );

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($LiveParamsBuilder$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($LiveParamsBuilder$Type) &&
        other is $LiveParamsBuilder$Type;
  }
}

/// from: `com.arashivision.sdkcamera.camera.model.RawType`
class RawType extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<RawType> $type;

  

  @_$jni.internal
  RawType.fromReference(
    
    _$jni.JReference reference,
  ) :
    $type = type,
    super.fromReference(
      
      reference
    );

  static final _class = _$jni.JClass.forName(r'com/arashivision/sdkcamera/camera/model/RawType');

      /// The type which includes information such as the signature of this class.
static const type = $RawType$Type();
  static final _id_OFF =
      _class.staticFieldId(
        r'OFF',
        r'Lcom/arashivision/sdkcamera/camera/model/RawType;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.model.RawType OFF`
  /// The returned object must be released after use, by calling the [release] method.
static RawType get OFF => _id_OFF.get(_class, const $RawType$Type());

  static final _id_DNG =
      _class.staticFieldId(
        r'DNG',
        r'Lcom/arashivision/sdkcamera/camera/model/RawType;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.model.RawType DNG`
  /// The returned object must be released after use, by calling the [release] method.
static RawType get DNG => _id_DNG.get(_class, const $RawType$Type());

  static final _id_PURESHOT =
      _class.staticFieldId(
        r'PURESHOT',
        r'Lcom/arashivision/sdkcamera/camera/model/RawType;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.model.RawType PURESHOT`
  /// The returned object must be released after use, by calling the [release] method.
static RawType get PURESHOT => _id_PURESHOT.get(_class, const $RawType$Type());

  static final _id_PURESHOT_RAW =
      _class.staticFieldId(
        r'PURESHOT_RAW',
        r'Lcom/arashivision/sdkcamera/camera/model/RawType;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.model.RawType PURESHOT_RAW`
  /// The returned object must be released after use, by calling the [release] method.
static RawType get PURESHOT_RAW => _id_PURESHOT_RAW.get(_class, const $RawType$Type());

  static final _id_INSP =
      _class.staticFieldId(
        r'INSP',
        r'Lcom/arashivision/sdkcamera/camera/model/RawType;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.model.RawType INSP`
  /// The returned object must be released after use, by calling the [release] method.
static RawType get INSP => _id_INSP.get(_class, const $RawType$Type());

  static final _id_INSP_RAW =
      _class.staticFieldId(
        r'INSP_RAW',
        r'Lcom/arashivision/sdkcamera/camera/model/RawType;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.model.RawType INSP_RAW`
  /// The returned object must be released after use, by calling the [release] method.
static RawType get INSP_RAW => _id_INSP_RAW.get(_class, const $RawType$Type());

  static final _id_values = _class.staticMethodId(
    r'values',
    r'()[Lcom/arashivision/sdkcamera/camera/model/RawType;',
  );

  static final _values = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallStaticObjectMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `static public com.arashivision.sdkcamera.camera.model.RawType[] values()`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JArray<RawType> values(){
    
    return _values(_class.reference.pointer, _id_values as _$jni.JMethodIDPtr).object(const _$jni.JArrayType($RawType$Type()));
  }

  static final _id_valueOf = _class.staticMethodId(
    r'valueOf',
    r'(Ljava/lang/String;)Lcom/arashivision/sdkcamera/camera/model/RawType;',
  );

  static final _valueOf = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>('globalEnv_CallStaticObjectMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();
  /// from: `static public com.arashivision.sdkcamera.camera.model.RawType valueOf(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static RawType valueOf(_$jni.JString string, ){
    
    return _valueOf(_class.reference.pointer, _id_valueOf as _$jni.JMethodIDPtr, string.reference.pointer).object(const $RawType$Type());
  }

  static final _id_nativeValueOf = _class.staticMethodId(
    r'nativeValueOf',
    r'(I)Lcom/arashivision/sdkcamera/camera/model/RawType;',
  );

  static final _nativeValueOf = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallStaticObjectMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();
  /// from: `static public com.arashivision.sdkcamera.camera.model.RawType nativeValueOf(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static RawType nativeValueOf(int i, ){
    
    return _nativeValueOf(_class.reference.pointer, _id_nativeValueOf as _$jni.JMethodIDPtr, i).object(const $RawType$Type());
  }

  

  static final _id_getNativeValue = _class.instanceMethodId(
    r'getNativeValue',
    r'()I',
  );

  static final _getNativeValue = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallIntMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public int getNativeValue()`
  int getNativeValue(){
    
    return _getNativeValue(reference.pointer, _id_getNativeValue as _$jni.JMethodIDPtr).integer;
  }

}
final class $RawType$Type extends _$jni.JObjType<RawType> {
  

  @_$jni.internal
  const $RawType$Type(
    
  );

  @_$jni.internal
  @_$core.override
  String get signature => r'Lcom/arashivision/sdkcamera/camera/model/RawType;';

  @_$jni.internal
  @_$core.override
  RawType fromReference(_$jni.JReference reference) => RawType.fromReference(
    
    reference
  );

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($RawType$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($RawType$Type) &&
        other is $RawType$Type;
  }
}

/// from: `com.arashivision.sdkcamera.camera.preview.ExposureData`
class ExposureData extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<ExposureData> $type;

  

  @_$jni.internal
  ExposureData.fromReference(
    
    _$jni.JReference reference,
  ) :
    $type = type,
    super.fromReference(
      
      reference
    );

  static final _class = _$jni.JClass.forName(r'com/arashivision/sdkcamera/camera/preview/ExposureData');

      /// The type which includes information such as the signature of this class.
static const type = $ExposureData$Type();
  static final _id_timestamp =
      _class.instanceFieldId(
        r'timestamp',
        r'J',
      );
  /// from: `public long timestamp`
int get timestamp => _id_timestamp.get(this, const _$jni.jlongType());

  /// from: `public long timestamp`
set timestamp(int value) => _id_timestamp.set(this, const _$jni.jlongType(), value);

  static final _id_exposureTime =
      _class.instanceFieldId(
        r'exposureTime',
        r'D',
      );
  /// from: `public double exposureTime`
double get exposureTime => _id_exposureTime.get(this, const _$jni.jdoubleType());

  /// from: `public double exposureTime`
set exposureTime(double value) => _id_exposureTime.set(this, const _$jni.jdoubleType(), value);

  static final _id_new$ = _class.constructorId(
    r'(JD)V',
  );

  static final _new$ = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int64, _$jni.Double)>)>>('globalEnv_NewObject')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int, double)>();
  /// from: `public void <init>(long j, double d)`
  /// The returned object must be released after use, by calling the [release] method.
  factory ExposureData(int j, double d, ) {
    
    return ExposureData.fromReference(
      
      _new$(_class.reference.pointer, _id_new$ as _$jni.JMethodIDPtr, j, d).reference
    );
  }

}
final class $ExposureData$Type extends _$jni.JObjType<ExposureData> {
  

  @_$jni.internal
  const $ExposureData$Type(
    
  );

  @_$jni.internal
  @_$core.override
  String get signature => r'Lcom/arashivision/sdkcamera/camera/preview/ExposureData;';

  @_$jni.internal
  @_$core.override
  ExposureData fromReference(_$jni.JReference reference) => ExposureData.fromReference(
    
    reference
  );

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($ExposureData$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ExposureData$Type) &&
        other is $ExposureData$Type;
  }
}

/// from: `com.arashivision.sdkcamera.camera.preview.GyroData`
class GyroData extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<GyroData> $type;

  

  @_$jni.internal
  GyroData.fromReference(
    
    _$jni.JReference reference,
  ) :
    $type = type,
    super.fromReference(
      
      reference
    );

  static final _class = _$jni.JClass.forName(r'com/arashivision/sdkcamera/camera/preview/GyroData');

      /// The type which includes information such as the signature of this class.
static const type = $GyroData$Type();
  static final _id_timestamp =
      _class.instanceFieldId(
        r'timestamp',
        r'J',
      );
  /// from: `public long timestamp`
int get timestamp => _id_timestamp.get(this, const _$jni.jlongType());

  /// from: `public long timestamp`
set timestamp(int value) => _id_timestamp.set(this, const _$jni.jlongType(), value);

  static final _id_ax =
      _class.instanceFieldId(
        r'ax',
        r'D',
      );
  /// from: `public double ax`
double get ax => _id_ax.get(this, const _$jni.jdoubleType());

  /// from: `public double ax`
set ax(double value) => _id_ax.set(this, const _$jni.jdoubleType(), value);

  static final _id_ay =
      _class.instanceFieldId(
        r'ay',
        r'D',
      );
  /// from: `public double ay`
double get ay => _id_ay.get(this, const _$jni.jdoubleType());

  /// from: `public double ay`
set ay(double value) => _id_ay.set(this, const _$jni.jdoubleType(), value);

  static final _id_az =
      _class.instanceFieldId(
        r'az',
        r'D',
      );
  /// from: `public double az`
double get az => _id_az.get(this, const _$jni.jdoubleType());

  /// from: `public double az`
set az(double value) => _id_az.set(this, const _$jni.jdoubleType(), value);

  static final _id_gx =
      _class.instanceFieldId(
        r'gx',
        r'D',
      );
  /// from: `public double gx`
double get gx => _id_gx.get(this, const _$jni.jdoubleType());

  /// from: `public double gx`
set gx(double value) => _id_gx.set(this, const _$jni.jdoubleType(), value);

  static final _id_gy =
      _class.instanceFieldId(
        r'gy',
        r'D',
      );
  /// from: `public double gy`
double get gy => _id_gy.get(this, const _$jni.jdoubleType());

  /// from: `public double gy`
set gy(double value) => _id_gy.set(this, const _$jni.jdoubleType(), value);

  static final _id_gz =
      _class.instanceFieldId(
        r'gz',
        r'D',
      );
  /// from: `public double gz`
double get gz => _id_gz.get(this, const _$jni.jdoubleType());

  /// from: `public double gz`
set gz(double value) => _id_gz.set(this, const _$jni.jdoubleType(), value);

  static final _id_new$ = _class.constructorId(
    r'(JDDDDDD)V',
  );

  static final _new$ = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int64, _$jni.Double, _$jni.Double, _$jni.Double, _$jni.Double, _$jni.Double, _$jni.Double)>)>>('globalEnv_NewObject')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int, double, double, double, double, double, double)>();
  /// from: `public void <init>(long j, double d, double d1, double d2, double d3, double d4, double d5)`
  /// The returned object must be released after use, by calling the [release] method.
  factory GyroData(int j, double d, double d1, double d2, double d3, double d4, double d5, ) {
    
    return GyroData.fromReference(
      
      _new$(_class.reference.pointer, _id_new$ as _$jni.JMethodIDPtr, j, d, d1, d2, d3, d4, d5).reference
    );
  }

}
final class $GyroData$Type extends _$jni.JObjType<GyroData> {
  

  @_$jni.internal
  const $GyroData$Type(
    
  );

  @_$jni.internal
  @_$core.override
  String get signature => r'Lcom/arashivision/sdkcamera/camera/preview/GyroData;';

  @_$jni.internal
  @_$core.override
  GyroData fromReference(_$jni.JReference reference) => GyroData.fromReference(
    
    reference
  );

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($GyroData$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($GyroData$Type) &&
        other is $GyroData$Type;
  }
}

/// from: `com.arashivision.sdkcamera.camera.preview.PreviewParamsBuilder`
class PreviewParamsBuilder extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<PreviewParamsBuilder> $type;

  

  @_$jni.internal
  PreviewParamsBuilder.fromReference(
    
    _$jni.JReference reference,
  ) :
    $type = type,
    super.fromReference(
      
      reference
    );

  static final _class = _$jni.JClass.forName(r'com/arashivision/sdkcamera/camera/preview/PreviewParamsBuilder');

      /// The type which includes information such as the signature of this class.
static const type = $PreviewParamsBuilder$Type();
  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_NewObject')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory PreviewParamsBuilder() {
    
    return PreviewParamsBuilder.fromReference(
      
      _new$(_class.reference.pointer, _id_new$ as _$jni.JMethodIDPtr).reference
    );
  }

  static final _id_getStreamResolution = _class.instanceMethodId(
    r'getStreamResolution',
    r'()Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
  );

  static final _getStreamResolution = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallObjectMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution getStreamResolution()`
  /// The returned object must be released after use, by calling the [release] method.
  PreviewStreamResolution getStreamResolution(){
    
    return _getStreamResolution(reference.pointer, _id_getStreamResolution as _$jni.JMethodIDPtr).object(const $PreviewStreamResolution$Type());
  }

  static final _id_setStreamResolution = _class.instanceMethodId(
    r'setStreamResolution',
    r'(Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;)Lcom/arashivision/sdkcamera/camera/preview/PreviewParamsBuilder;',
  );

  static final _setStreamResolution = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>('globalEnv_CallObjectMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();
  /// from: `public com.arashivision.sdkcamera.camera.preview.PreviewParamsBuilder setStreamResolution(com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution previewStreamResolution)`
  /// The returned object must be released after use, by calling the [release] method.
  PreviewParamsBuilder setStreamResolution(PreviewStreamResolution previewStreamResolution, ){
    
    return _setStreamResolution(reference.pointer, _id_setStreamResolution as _$jni.JMethodIDPtr, previewStreamResolution.reference.pointer).object(const $PreviewParamsBuilder$Type());
  }

  static final _id_getPreviewType = _class.instanceMethodId(
    r'getPreviewType',
    r'()I',
  );

  static final _getPreviewType = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallIntMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public int getPreviewType()`
  int getPreviewType(){
    
    return _getPreviewType(reference.pointer, _id_getPreviewType as _$jni.JMethodIDPtr).integer;
  }

  static final _id_setPreviewType = _class.instanceMethodId(
    r'setPreviewType',
    r'(I)Lcom/arashivision/sdkcamera/camera/preview/PreviewParamsBuilder;',
  );

  static final _setPreviewType = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallObjectMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();
  /// from: `public com.arashivision.sdkcamera.camera.preview.PreviewParamsBuilder setPreviewType(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  PreviewParamsBuilder setPreviewType(int i, ){
    
    return _setPreviewType(reference.pointer, _id_setPreviewType as _$jni.JMethodIDPtr, i).object(const $PreviewParamsBuilder$Type());
  }

  static final _id_isAudioEnabled = _class.instanceMethodId(
    r'isAudioEnabled',
    r'()Z',
  );

  static final _isAudioEnabled = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallBooleanMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public boolean isAudioEnabled()`
  bool isAudioEnabled(){
    
    return _isAudioEnabled(reference.pointer, _id_isAudioEnabled as _$jni.JMethodIDPtr).boolean;
  }

  static final _id_setAudioEnabled = _class.instanceMethodId(
    r'setAudioEnabled',
    r'(Z)Lcom/arashivision/sdkcamera/camera/preview/PreviewParamsBuilder;',
  );

  static final _setAudioEnabled = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallObjectMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();
  /// from: `public com.arashivision.sdkcamera.camera.preview.PreviewParamsBuilder setAudioEnabled(boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  PreviewParamsBuilder setAudioEnabled(bool z, ){
    
    return _setAudioEnabled(reference.pointer, _id_setAudioEnabled as _$jni.JMethodIDPtr, z ? 1 : 0).object(const $PreviewParamsBuilder$Type());
  }

  static final _id_toString$1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString$1 = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallObjectMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public java.lang.String toString()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString toString$1(){
    
    return _toString$1(reference.pointer, _id_toString$1 as _$jni.JMethodIDPtr).object(const _$jni.JStringType());
  }

}
final class $PreviewParamsBuilder$Type extends _$jni.JObjType<PreviewParamsBuilder> {
  

  @_$jni.internal
  const $PreviewParamsBuilder$Type(
    
  );

  @_$jni.internal
  @_$core.override
  String get signature => r'Lcom/arashivision/sdkcamera/camera/preview/PreviewParamsBuilder;';

  @_$jni.internal
  @_$core.override
  PreviewParamsBuilder fromReference(_$jni.JReference reference) => PreviewParamsBuilder.fromReference(
    
    reference
  );

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($PreviewParamsBuilder$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($PreviewParamsBuilder$Type) &&
        other is $PreviewParamsBuilder$Type;
  }
}

/// from: `com.arashivision.sdkcamera.camera.preview.VideoData`
class VideoData extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<VideoData> $type;

  

  @_$jni.internal
  VideoData.fromReference(
    
    _$jni.JReference reference,
  ) :
    $type = type,
    super.fromReference(
      
      reference
    );

  static final _class = _$jni.JClass.forName(r'com/arashivision/sdkcamera/camera/preview/VideoData');

      /// The type which includes information such as the signature of this class.
static const type = $VideoData$Type();
  static final _id_timestamp =
      _class.instanceFieldId(
        r'timestamp',
        r'J',
      );
  /// from: `public long timestamp`
int get timestamp => _id_timestamp.get(this, const _$jni.jlongType());

  /// from: `public long timestamp`
set timestamp(int value) => _id_timestamp.set(this, const _$jni.jlongType(), value);

  static final _id_data =
      _class.instanceFieldId(
        r'data',
        r'[B',
      );
  /// from: `public byte[] data`
  /// The returned object must be released after use, by calling the [release] method.
_$jni.JArray<_$jni.jbyte> get data => _id_data.get(this, const _$jni.JArrayType(_$jni.jbyteType()));

  /// from: `public byte[] data`
  /// The returned object must be released after use, by calling the [release] method.
set data(_$jni.JArray<_$jni.jbyte> value) => _id_data.set(this, const _$jni.JArrayType(_$jni.jbyteType()), value);

  static final _id_offset =
      _class.instanceFieldId(
        r'offset',
        r'I',
      );
  /// from: `public int offset`
int get offset => _id_offset.get(this, const _$jni.jintType());

  /// from: `public int offset`
set offset(int value) => _id_offset.set(this, const _$jni.jintType(), value);

  static final _id_size =
      _class.instanceFieldId(
        r'size',
        r'I',
      );
  /// from: `public int size`
int get size => _id_size.get(this, const _$jni.jintType());

  /// from: `public int size`
set size(int value) => _id_size.set(this, const _$jni.jintType(), value);

  static final _id_new$ = _class.constructorId(
    r'(J[BII)V',
  );

  static final _new$ = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int64, _$jni.Pointer<_$jni.Void>, _$jni.Int32, _$jni.Int32)>)>>('globalEnv_NewObject')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int, _$jni.Pointer<_$jni.Void>, int, int)>();
  /// from: `public void <init>(long j, byte[] bs, int i, int i1)`
  /// The returned object must be released after use, by calling the [release] method.
  factory VideoData(int j, _$jni.JArray<_$jni.jbyte> bs, int i, int i1, ) {
    
    return VideoData.fromReference(
      
      _new$(_class.reference.pointer, _id_new$ as _$jni.JMethodIDPtr, j, bs.reference.pointer, i, i1).reference
    );
  }

}
final class $VideoData$Type extends _$jni.JObjType<VideoData> {
  

  @_$jni.internal
  const $VideoData$Type(
    
  );

  @_$jni.internal
  @_$core.override
  String get signature => r'Lcom/arashivision/sdkcamera/camera/preview/VideoData;';

  @_$jni.internal
  @_$core.override
  VideoData fromReference(_$jni.JReference reference) => VideoData.fromReference(
    
    reference
  );

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($VideoData$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($VideoData$Type) &&
        other is $VideoData$Type;
  }
}

/// from: `com.arashivision.sdkcamera.camera.resolution.PhotoResolution`
class PhotoResolution extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<PhotoResolution> $type;

  

  @_$jni.internal
  PhotoResolution.fromReference(
    
    _$jni.JReference reference,
  ) :
    $type = type,
    super.fromReference(
      
      reference
    );

  static final _class = _$jni.JClass.forName(r'com/arashivision/sdkcamera/camera/resolution/PhotoResolution');

      /// The type which includes information such as the signature of this class.
static const type = $PhotoResolution$Type();
  static final _id_PHOTO_4000_3000 =
      _class.staticFieldId(
        r'PHOTO_4000_3000',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PhotoResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PhotoResolution PHOTO_4000_3000`
  /// The returned object must be released after use, by calling the [release] method.
static PhotoResolution get PHOTO_4000_3000 => _id_PHOTO_4000_3000.get(_class, const $PhotoResolution$Type());

  static final _id_PHOTO_4000_2250 =
      _class.staticFieldId(
        r'PHOTO_4000_2250',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PhotoResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PhotoResolution PHOTO_4000_2250`
  /// The returned object must be released after use, by calling the [release] method.
static PhotoResolution get PHOTO_4000_2250 => _id_PHOTO_4000_2250.get(_class, const $PhotoResolution$Type());

  static final _id_PHOTO_8000_6000 =
      _class.staticFieldId(
        r'PHOTO_8000_6000',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PhotoResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PhotoResolution PHOTO_8000_6000`
  /// The returned object must be released after use, by calling the [release] method.
static PhotoResolution get PHOTO_8000_6000 => _id_PHOTO_8000_6000.get(_class, const $PhotoResolution$Type());

  static final _id_PHOTO_8000_4500 =
      _class.staticFieldId(
        r'PHOTO_8000_4500',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PhotoResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PhotoResolution PHOTO_8000_4500`
  /// The returned object must be released after use, by calling the [release] method.
static PhotoResolution get PHOTO_8000_4500 => _id_PHOTO_8000_4500.get(_class, const $PhotoResolution$Type());

  static final _id_PHOTO_2976_2976 =
      _class.staticFieldId(
        r'PHOTO_2976_2976',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PhotoResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PhotoResolution PHOTO_2976_2976`
  /// The returned object must be released after use, by calling the [release] method.
static PhotoResolution get PHOTO_2976_2976 => _id_PHOTO_2976_2976.get(_class, const $PhotoResolution$Type());

  static final _id_PHOTO_5984_5984 =
      _class.staticFieldId(
        r'PHOTO_5984_5984',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PhotoResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PhotoResolution PHOTO_5984_5984`
  /// The returned object must be released after use, by calling the [release] method.
static PhotoResolution get PHOTO_5984_5984 => _id_PHOTO_5984_5984.get(_class, const $PhotoResolution$Type());

  static final _id_PHOTO_11968_5984 =
      _class.staticFieldId(
        r'PHOTO_11968_5984',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PhotoResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PhotoResolution PHOTO_11968_5984`
  /// The returned object must be released after use, by calling the [release] method.
static PhotoResolution get PHOTO_11968_5984 => _id_PHOTO_11968_5984.get(_class, const $PhotoResolution$Type());

  static final _id_PHOTO_5952_2976 =
      _class.staticFieldId(
        r'PHOTO_5952_2976',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PhotoResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PhotoResolution PHOTO_5952_2976`
  /// The returned object must be released after use, by calling the [release] method.
static PhotoResolution get PHOTO_5952_2976 => _id_PHOTO_5952_2976.get(_class, const $PhotoResolution$Type());

  static final _id_width =
      _class.instanceFieldId(
        r'width',
        r'I',
      );
  /// from: `public int width`
int get width => _id_width.get(this, const _$jni.jintType());

  /// from: `public int width`
set width(int value) => _id_width.set(this, const _$jni.jintType(), value);

  static final _id_height =
      _class.instanceFieldId(
        r'height',
        r'I',
      );
  /// from: `public int height`
int get height => _id_height.get(this, const _$jni.jintType());

  /// from: `public int height`
set height(int value) => _id_height.set(this, const _$jni.jintType(), value);

  static final _id_valueInCamera =
      _class.instanceFieldId(
        r'valueInCamera',
        r'I',
      );
  /// from: `public int valueInCamera`
int get valueInCamera => _id_valueInCamera.get(this, const _$jni.jintType());

  /// from: `public int valueInCamera`
set valueInCamera(int value) => _id_valueInCamera.set(this, const _$jni.jintType(), value);

  static final _id_values = _class.staticMethodId(
    r'values',
    r'()[Lcom/arashivision/sdkcamera/camera/resolution/PhotoResolution;',
  );

  static final _values = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallStaticObjectMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `static public com.arashivision.sdkcamera.camera.resolution.PhotoResolution[] values()`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JArray<PhotoResolution> values(){
    
    return _values(_class.reference.pointer, _id_values as _$jni.JMethodIDPtr).object(const _$jni.JArrayType($PhotoResolution$Type()));
  }

  static final _id_valueOf = _class.staticMethodId(
    r'valueOf',
    r'(Ljava/lang/String;)Lcom/arashivision/sdkcamera/camera/resolution/PhotoResolution;',
  );

  static final _valueOf = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>('globalEnv_CallStaticObjectMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();
  /// from: `static public com.arashivision.sdkcamera.camera.resolution.PhotoResolution valueOf(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static PhotoResolution valueOf(_$jni.JString string, ){
    
    return _valueOf(_class.reference.pointer, _id_valueOf as _$jni.JMethodIDPtr, string.reference.pointer).object(const $PhotoResolution$Type());
  }

  static final _id_new$ = _class.constructorId(
    r'(Ljava/lang/String;IIII)V',
  );

  static final _new$ = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>, _$jni.Int32, _$jni.Int32, _$jni.Int32, _$jni.Int32)>)>>('globalEnv_NewObject')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, int, int, int, int)>();
  /// from: `public void <init>(java.lang.String string, int i, int i1, int i2, int i3)`
  /// The returned object must be released after use, by calling the [release] method.
  factory PhotoResolution(_$jni.JString string, int i, int i1, int i2, int i3, ) {
    
    return PhotoResolution.fromReference(
      
      _new$(_class.reference.pointer, _id_new$ as _$jni.JMethodIDPtr, string.reference.pointer, i, i1, i2, i3).reference
    );
  }


}
final class $PhotoResolution$Type extends _$jni.JObjType<PhotoResolution> {
  

  @_$jni.internal
  const $PhotoResolution$Type(
    
  );

  @_$jni.internal
  @_$core.override
  String get signature => r'Lcom/arashivision/sdkcamera/camera/resolution/PhotoResolution;';

  @_$jni.internal
  @_$core.override
  PhotoResolution fromReference(_$jni.JReference reference) => PhotoResolution.fromReference(
    
    reference
  );

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($PhotoResolution$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($PhotoResolution$Type) &&
        other is $PhotoResolution$Type;
  }
}

/// from: `com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution`
class PreviewStreamResolution extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<PreviewStreamResolution> $type;

  

  @_$jni.internal
  PreviewStreamResolution.fromReference(
    
    _$jni.JReference reference,
  ) :
    $type = type,
    super.fromReference(
      
      reference
    );

  static final _class = _$jni.JClass.forName(r'com/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution');

      /// The type which includes information such as the signature of this class.
static const type = $PreviewStreamResolution$Type();
  static final _id_STREAM_3840_960_120FPS =
      _class.staticFieldId(
        r'STREAM_3840_960_120FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_3840_960_120FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_3840_960_120FPS => _id_STREAM_3840_960_120FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_2944_736_180FPS =
      _class.staticFieldId(
        r'STREAM_2944_736_180FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_2944_736_180FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_2944_736_180FPS => _id_STREAM_2944_736_180FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_2880_720_30FPS =
      _class.staticFieldId(
        r'STREAM_2880_720_30FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_2880_720_30FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_2880_720_30FPS => _id_STREAM_2880_720_30FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_7680_3840_30FPS =
      _class.staticFieldId(
        r'STREAM_7680_3840_30FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_7680_3840_30FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_7680_3840_30FPS => _id_STREAM_7680_3840_30FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_7680_3840_25FPS =
      _class.staticFieldId(
        r'STREAM_7680_3840_25FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_7680_3840_25FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_7680_3840_25FPS => _id_STREAM_7680_3840_25FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_7680_3840_24FPS =
      _class.staticFieldId(
        r'STREAM_7680_3840_24FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_7680_3840_24FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_7680_3840_24FPS => _id_STREAM_7680_3840_24FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_6400_3200_30FPS =
      _class.staticFieldId(
        r'STREAM_6400_3200_30FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_6400_3200_30FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_6400_3200_30FPS => _id_STREAM_6400_3200_30FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_6400_3200_25FPS =
      _class.staticFieldId(
        r'STREAM_6400_3200_25FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_6400_3200_25FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_6400_3200_25FPS => _id_STREAM_6400_3200_25FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_6400_3200_24FPS =
      _class.staticFieldId(
        r'STREAM_6400_3200_24FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_6400_3200_24FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_6400_3200_24FPS => _id_STREAM_6400_3200_24FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_6144_3072_30FPS =
      _class.staticFieldId(
        r'STREAM_6144_3072_30FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_6144_3072_30FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_6144_3072_30FPS => _id_STREAM_6144_3072_30FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_6144_3072_25FPS =
      _class.staticFieldId(
        r'STREAM_6144_3072_25FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_6144_3072_25FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_6144_3072_25FPS => _id_STREAM_6144_3072_25FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_6144_3072_24FPS =
      _class.staticFieldId(
        r'STREAM_6144_3072_24FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_6144_3072_24FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_6144_3072_24FPS => _id_STREAM_6144_3072_24FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_6080_3040_30FPS =
      _class.staticFieldId(
        r'STREAM_6080_3040_30FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_6080_3040_30FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_6080_3040_30FPS => _id_STREAM_6080_3040_30FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_6080_3040_25FPS =
      _class.staticFieldId(
        r'STREAM_6080_3040_25FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_6080_3040_25FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_6080_3040_25FPS => _id_STREAM_6080_3040_25FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_6080_3040_24FPS =
      _class.staticFieldId(
        r'STREAM_6080_3040_24FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_6080_3040_24FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_6080_3040_24FPS => _id_STREAM_6080_3040_24FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_5888_2944_30FPS =
      _class.staticFieldId(
        r'STREAM_5888_2944_30FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_5888_2944_30FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_5888_2944_30FPS => _id_STREAM_5888_2944_30FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_5888_2944_25FPS =
      _class.staticFieldId(
        r'STREAM_5888_2944_25FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_5888_2944_25FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_5888_2944_25FPS => _id_STREAM_5888_2944_25FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_5888_2944_24FPS =
      _class.staticFieldId(
        r'STREAM_5888_2944_24FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_5888_2944_24FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_5888_2944_24FPS => _id_STREAM_5888_2944_24FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_5888_2880_30FPS =
      _class.staticFieldId(
        r'STREAM_5888_2880_30FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_5888_2880_30FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_5888_2880_30FPS => _id_STREAM_5888_2880_30FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_5760_2880_60FPS =
      _class.staticFieldId(
        r'STREAM_5760_2880_60FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_5760_2880_60FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_5760_2880_60FPS => _id_STREAM_5760_2880_60FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_5760_2880_50FPS =
      _class.staticFieldId(
        r'STREAM_5760_2880_50FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_5760_2880_50FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_5760_2880_50FPS => _id_STREAM_5760_2880_50FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_5760_2880_48FPS =
      _class.staticFieldId(
        r'STREAM_5760_2880_48FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_5760_2880_48FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_5760_2880_48FPS => _id_STREAM_5760_2880_48FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_5760_2880_30FPS =
      _class.staticFieldId(
        r'STREAM_5760_2880_30FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_5760_2880_30FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_5760_2880_30FPS => _id_STREAM_5760_2880_30FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_5760_2880_25FPS =
      _class.staticFieldId(
        r'STREAM_5760_2880_25FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_5760_2880_25FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_5760_2880_25FPS => _id_STREAM_5760_2880_25FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_5760_2880_24FPS =
      _class.staticFieldId(
        r'STREAM_5760_2880_24FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_5760_2880_24FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_5760_2880_24FPS => _id_STREAM_5760_2880_24FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_3968_1920_30FPS =
      _class.staticFieldId(
        r'STREAM_3968_1920_30FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_3968_1920_30FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_3968_1920_30FPS => _id_STREAM_3968_1920_30FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_3840_1920_100FPS =
      _class.staticFieldId(
        r'STREAM_3840_1920_100FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_3840_1920_100FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_3840_1920_100FPS => _id_STREAM_3840_1920_100FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_3840_1920_60FPS =
      _class.staticFieldId(
        r'STREAM_3840_1920_60FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_3840_1920_60FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_3840_1920_60FPS => _id_STREAM_3840_1920_60FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_3840_1920_50FPS =
      _class.staticFieldId(
        r'STREAM_3840_1920_50FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_3840_1920_50FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_3840_1920_50FPS => _id_STREAM_3840_1920_50FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_3840_1920_48FPS =
      _class.staticFieldId(
        r'STREAM_3840_1920_48FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_3840_1920_48FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_3840_1920_48FPS => _id_STREAM_3840_1920_48FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_3840_1920_30FPS =
      _class.staticFieldId(
        r'STREAM_3840_1920_30FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_3840_1920_30FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_3840_1920_30FPS => _id_STREAM_3840_1920_30FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_3840_1920_25FPS =
      _class.staticFieldId(
        r'STREAM_3840_1920_25FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_3840_1920_25FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_3840_1920_25FPS => _id_STREAM_3840_1920_25FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_3840_1920_24FPS =
      _class.staticFieldId(
        r'STREAM_3840_1920_24FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_3840_1920_24FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_3840_1920_24FPS => _id_STREAM_3840_1920_24FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_3040_1520_50FPS =
      _class.staticFieldId(
        r'STREAM_3040_1520_50FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_3040_1520_50FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_3040_1520_50FPS => _id_STREAM_3040_1520_50FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_3040_1520_30FPS =
      _class.staticFieldId(
        r'STREAM_3040_1520_30FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_3040_1520_30FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_3040_1520_30FPS => _id_STREAM_3040_1520_30FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_3008_1504_100FPS =
      _class.staticFieldId(
        r'STREAM_3008_1504_100FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_3008_1504_100FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_3008_1504_100FPS => _id_STREAM_3008_1504_100FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_3000_1500_120FPS =
      _class.staticFieldId(
        r'STREAM_3000_1500_120FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_3000_1500_120FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_3000_1500_120FPS => _id_STREAM_3000_1500_120FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_2880_1440_60FPS =
      _class.staticFieldId(
        r'STREAM_2880_1440_60FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_2880_1440_60FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_2880_1440_60FPS => _id_STREAM_2880_1440_60FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_2880_1440_30FPS =
      _class.staticFieldId(
        r'STREAM_2880_1440_30FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_2880_1440_30FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_2880_1440_30FPS => _id_STREAM_2880_1440_30FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_2560_1280_30FPS =
      _class.staticFieldId(
        r'STREAM_2560_1280_30FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_2560_1280_30FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_2560_1280_30FPS => _id_STREAM_2560_1280_30FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_2176_1088_30FPS =
      _class.staticFieldId(
        r'STREAM_2176_1088_30FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_2176_1088_30FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_2176_1088_30FPS => _id_STREAM_2176_1088_30FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_1920_960_30FPS =
      _class.staticFieldId(
        r'STREAM_1920_960_30FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_1920_960_30FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_1920_960_30FPS => _id_STREAM_1920_960_30FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_1440_720_30FPS =
      _class.staticFieldId(
        r'STREAM_1440_720_30FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_1440_720_30FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_1440_720_30FPS => _id_STREAM_1440_720_30FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_720_360_30FPS =
      _class.staticFieldId(
        r'STREAM_720_360_30FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_720_360_30FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_720_360_30FPS => _id_STREAM_720_360_30FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_480_240_30FPS =
      _class.staticFieldId(
        r'STREAM_480_240_30FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_480_240_30FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_480_240_30FPS => _id_STREAM_480_240_30FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_1440_2880_60FPS =
      _class.staticFieldId(
        r'STREAM_1440_2880_60FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_1440_2880_60FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_1440_2880_60FPS => _id_STREAM_1440_2880_60FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_1440_2880_30FPS =
      _class.staticFieldId(
        r'STREAM_1440_2880_30FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_1440_2880_30FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_1440_2880_30FPS => _id_STREAM_1440_2880_30FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_4000_3000_60FPS =
      _class.staticFieldId(
        r'STREAM_4000_3000_60FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_4000_3000_60FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_4000_3000_60FPS => _id_STREAM_4000_3000_60FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_4000_3000_50FPS =
      _class.staticFieldId(
        r'STREAM_4000_3000_50FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_4000_3000_50FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_4000_3000_50FPS => _id_STREAM_4000_3000_50FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_4000_3000_30FPS =
      _class.staticFieldId(
        r'STREAM_4000_3000_30FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_4000_3000_30FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_4000_3000_30FPS => _id_STREAM_4000_3000_30FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_4000_3000_25FPS =
      _class.staticFieldId(
        r'STREAM_4000_3000_25FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_4000_3000_25FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_4000_3000_25FPS => _id_STREAM_4000_3000_25FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_4000_3000_24FPS =
      _class.staticFieldId(
        r'STREAM_4000_3000_24FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_4000_3000_24FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_4000_3000_24FPS => _id_STREAM_4000_3000_24FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_2720_2040_30FPS =
      _class.staticFieldId(
        r'STREAM_2720_2040_30FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_2720_2040_30FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_2720_2040_30FPS => _id_STREAM_2720_2040_30FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_2720_2040_25FPS =
      _class.staticFieldId(
        r'STREAM_2720_2040_25FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_2720_2040_25FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_2720_2040_25FPS => _id_STREAM_2720_2040_25FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_2720_2040_24FPS =
      _class.staticFieldId(
        r'STREAM_2720_2040_24FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_2720_2040_24FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_2720_2040_24FPS => _id_STREAM_2720_2040_24FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_1920_1440_30FPS =
      _class.staticFieldId(
        r'STREAM_1920_1440_30FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_1920_1440_30FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_1920_1440_30FPS => _id_STREAM_1920_1440_30FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_1920_1440_25FPS =
      _class.staticFieldId(
        r'STREAM_1920_1440_25FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_1920_1440_25FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_1920_1440_25FPS => _id_STREAM_1920_1440_25FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_1920_1440_24FPS =
      _class.staticFieldId(
        r'STREAM_1920_1440_24FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_1920_1440_24FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_1920_1440_24FPS => _id_STREAM_1920_1440_24FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_1280_960_30FPS =
      _class.staticFieldId(
        r'STREAM_1280_960_30FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_1280_960_30FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_1280_960_30FPS => _id_STREAM_1280_960_30FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_5312_2988_30FPS =
      _class.staticFieldId(
        r'STREAM_5312_2988_30FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_5312_2988_30FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_5312_2988_30FPS => _id_STREAM_5312_2988_30FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_5312_2988_25FPS =
      _class.staticFieldId(
        r'STREAM_5312_2988_25FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_5312_2988_25FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_5312_2988_25FPS => _id_STREAM_5312_2988_25FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_5312_2988_24FPS =
      _class.staticFieldId(
        r'STREAM_5312_2988_24FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_5312_2988_24FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_5312_2988_24FPS => _id_STREAM_5312_2988_24FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_3840_2160_60FPS =
      _class.staticFieldId(
        r'STREAM_3840_2160_60FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_3840_2160_60FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_3840_2160_60FPS => _id_STREAM_3840_2160_60FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_3840_2160_50FPS =
      _class.staticFieldId(
        r'STREAM_3840_2160_50FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_3840_2160_50FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_3840_2160_50FPS => _id_STREAM_3840_2160_50FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_3840_2160_30FPS =
      _class.staticFieldId(
        r'STREAM_3840_2160_30FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_3840_2160_30FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_3840_2160_30FPS => _id_STREAM_3840_2160_30FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_3840_2160_25FPS =
      _class.staticFieldId(
        r'STREAM_3840_2160_25FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_3840_2160_25FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_3840_2160_25FPS => _id_STREAM_3840_2160_25FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_3840_2160_24FPS =
      _class.staticFieldId(
        r'STREAM_3840_2160_24FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_3840_2160_24FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_3840_2160_24FPS => _id_STREAM_3840_2160_24FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_3584_2016_60FPS =
      _class.staticFieldId(
        r'STREAM_3584_2016_60FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_3584_2016_60FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_3584_2016_60FPS => _id_STREAM_3584_2016_60FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_3584_2016_50FPS =
      _class.staticFieldId(
        r'STREAM_3584_2016_50FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_3584_2016_50FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_3584_2016_50FPS => _id_STREAM_3584_2016_50FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_3584_2016_30FPS =
      _class.staticFieldId(
        r'STREAM_3584_2016_30FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_3584_2016_30FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_3584_2016_30FPS => _id_STREAM_3584_2016_30FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_3584_2016_25FPS =
      _class.staticFieldId(
        r'STREAM_3584_2016_25FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_3584_2016_25FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_3584_2016_25FPS => _id_STREAM_3584_2016_25FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_3584_2016_24FPS =
      _class.staticFieldId(
        r'STREAM_3584_2016_24FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_3584_2016_24FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_3584_2016_24FPS => _id_STREAM_3584_2016_24FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_2720_1530_100FPS =
      _class.staticFieldId(
        r'STREAM_2720_1530_100FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_2720_1530_100FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_2720_1530_100FPS => _id_STREAM_2720_1530_100FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_2720_1530_60FPS =
      _class.staticFieldId(
        r'STREAM_2720_1530_60FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_2720_1530_60FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_2720_1530_60FPS => _id_STREAM_2720_1530_60FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_2720_1530_50FPS =
      _class.staticFieldId(
        r'STREAM_2720_1530_50FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_2720_1530_50FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_2720_1530_50FPS => _id_STREAM_2720_1530_50FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_2720_1530_30FPS =
      _class.staticFieldId(
        r'STREAM_2720_1530_30FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_2720_1530_30FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_2720_1530_30FPS => _id_STREAM_2720_1530_30FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_2720_1530_25FPS =
      _class.staticFieldId(
        r'STREAM_2720_1530_25FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_2720_1530_25FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_2720_1530_25FPS => _id_STREAM_2720_1530_25FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_2720_1530_24FPS =
      _class.staticFieldId(
        r'STREAM_2720_1530_24FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_2720_1530_24FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_2720_1530_24FPS => _id_STREAM_2720_1530_24FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_2560_1440_60FPS =
      _class.staticFieldId(
        r'STREAM_2560_1440_60FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_2560_1440_60FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_2560_1440_60FPS => _id_STREAM_2560_1440_60FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_2560_1440_50FPS =
      _class.staticFieldId(
        r'STREAM_2560_1440_50FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_2560_1440_50FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_2560_1440_50FPS => _id_STREAM_2560_1440_50FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_2560_1440_30FPS =
      _class.staticFieldId(
        r'STREAM_2560_1440_30FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_2560_1440_30FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_2560_1440_30FPS => _id_STREAM_2560_1440_30FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_2560_1440_25FPS =
      _class.staticFieldId(
        r'STREAM_2560_1440_25FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_2560_1440_25FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_2560_1440_25FPS => _id_STREAM_2560_1440_25FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_2560_1440_24FPS =
      _class.staticFieldId(
        r'STREAM_2560_1440_24FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_2560_1440_24FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_2560_1440_24FPS => _id_STREAM_2560_1440_24FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_1920_1080_200FPS =
      _class.staticFieldId(
        r'STREAM_1920_1080_200FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_1920_1080_200FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_1920_1080_200FPS => _id_STREAM_1920_1080_200FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_1920_1080_120FPS =
      _class.staticFieldId(
        r'STREAM_1920_1080_120FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_1920_1080_120FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_1920_1080_120FPS => _id_STREAM_1920_1080_120FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_1920_1080_60FPS =
      _class.staticFieldId(
        r'STREAM_1920_1080_60FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_1920_1080_60FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_1920_1080_60FPS => _id_STREAM_1920_1080_60FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_1920_1080_50FPS =
      _class.staticFieldId(
        r'STREAM_1920_1080_50FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_1920_1080_50FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_1920_1080_50FPS => _id_STREAM_1920_1080_50FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_1920_1080_30FPS =
      _class.staticFieldId(
        r'STREAM_1920_1080_30FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_1920_1080_30FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_1920_1080_30FPS => _id_STREAM_1920_1080_30FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_1920_1080_25FPS =
      _class.staticFieldId(
        r'STREAM_1920_1080_25FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_1920_1080_25FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_1920_1080_25FPS => _id_STREAM_1920_1080_25FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_1920_1080_24FPS =
      _class.staticFieldId(
        r'STREAM_1920_1080_24FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_1920_1080_24FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_1920_1080_24FPS => _id_STREAM_1920_1080_24FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_1280_720_30FPS =
      _class.staticFieldId(
        r'STREAM_1280_720_30FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_1280_720_30FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_1280_720_30FPS => _id_STREAM_1280_720_30FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_1152_648_30FPS =
      _class.staticFieldId(
        r'STREAM_1152_648_30FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_1152_648_30FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_1152_648_30FPS => _id_STREAM_1152_648_30FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_424_240_15FPS =
      _class.staticFieldId(
        r'STREAM_424_240_15FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_424_240_15FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_424_240_15FPS => _id_STREAM_424_240_15FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_2160_3840_60 =
      _class.staticFieldId(
        r'STREAM_2160_3840_60',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_2160_3840_60`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_2160_3840_60 => _id_STREAM_2160_3840_60.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_2160_3840_50 =
      _class.staticFieldId(
        r'STREAM_2160_3840_50',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_2160_3840_50`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_2160_3840_50 => _id_STREAM_2160_3840_50.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_2160_3840_30 =
      _class.staticFieldId(
        r'STREAM_2160_3840_30',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_2160_3840_30`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_2160_3840_30 => _id_STREAM_2160_3840_30.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_2160_3840_25 =
      _class.staticFieldId(
        r'STREAM_2160_3840_25',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_2160_3840_25`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_2160_3840_25 => _id_STREAM_2160_3840_25.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_2160_3840_24 =
      _class.staticFieldId(
        r'STREAM_2160_3840_24',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_2160_3840_24`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_2160_3840_24 => _id_STREAM_2160_3840_24.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_2016_3584_60FPS =
      _class.staticFieldId(
        r'STREAM_2016_3584_60FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_2016_3584_60FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_2016_3584_60FPS => _id_STREAM_2016_3584_60FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_2016_3584_50FPS =
      _class.staticFieldId(
        r'STREAM_2016_3584_50FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_2016_3584_50FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_2016_3584_50FPS => _id_STREAM_2016_3584_50FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_2016_3584_30FPS =
      _class.staticFieldId(
        r'STREAM_2016_3584_30FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_2016_3584_30FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_2016_3584_30FPS => _id_STREAM_2016_3584_30FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_2016_3584_25FPS =
      _class.staticFieldId(
        r'STREAM_2016_3584_25FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_2016_3584_25FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_2016_3584_25FPS => _id_STREAM_2016_3584_25FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_2016_3584_24FPS =
      _class.staticFieldId(
        r'STREAM_2016_3584_24FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_2016_3584_24FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_2016_3584_24FPS => _id_STREAM_2016_3584_24FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_1530_2720_60 =
      _class.staticFieldId(
        r'STREAM_1530_2720_60',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_1530_2720_60`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_1530_2720_60 => _id_STREAM_1530_2720_60.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_1530_2720_50 =
      _class.staticFieldId(
        r'STREAM_1530_2720_50',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_1530_2720_50`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_1530_2720_50 => _id_STREAM_1530_2720_50.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_1530_2720_30 =
      _class.staticFieldId(
        r'STREAM_1530_2720_30',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_1530_2720_30`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_1530_2720_30 => _id_STREAM_1530_2720_30.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_1530_2720_25 =
      _class.staticFieldId(
        r'STREAM_1530_2720_25',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_1530_2720_25`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_1530_2720_25 => _id_STREAM_1530_2720_25.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_1530_2720_24 =
      _class.staticFieldId(
        r'STREAM_1530_2720_24',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_1530_2720_24`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_1530_2720_24 => _id_STREAM_1530_2720_24.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_1440_2560_60FPS =
      _class.staticFieldId(
        r'STREAM_1440_2560_60FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_1440_2560_60FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_1440_2560_60FPS => _id_STREAM_1440_2560_60FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_1440_2560_50FPS =
      _class.staticFieldId(
        r'STREAM_1440_2560_50FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_1440_2560_50FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_1440_2560_50FPS => _id_STREAM_1440_2560_50FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_1440_2560_30FPS =
      _class.staticFieldId(
        r'STREAM_1440_2560_30FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_1440_2560_30FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_1440_2560_30FPS => _id_STREAM_1440_2560_30FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_1440_2560_25FPS =
      _class.staticFieldId(
        r'STREAM_1440_2560_25FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_1440_2560_25FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_1440_2560_25FPS => _id_STREAM_1440_2560_25FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_1440_2560_24FPS =
      _class.staticFieldId(
        r'STREAM_1440_2560_24FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_1440_2560_24FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_1440_2560_24FPS => _id_STREAM_1440_2560_24FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_1080_1920_120FPS =
      _class.staticFieldId(
        r'STREAM_1080_1920_120FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_1080_1920_120FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_1080_1920_120FPS => _id_STREAM_1080_1920_120FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_1080_1920_60FPS =
      _class.staticFieldId(
        r'STREAM_1080_1920_60FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_1080_1920_60FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_1080_1920_60FPS => _id_STREAM_1080_1920_60FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_1080_1920_50FPS =
      _class.staticFieldId(
        r'STREAM_1080_1920_50FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_1080_1920_50FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_1080_1920_50FPS => _id_STREAM_1080_1920_50FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_1080_1920_30FPS =
      _class.staticFieldId(
        r'STREAM_1080_1920_30FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_1080_1920_30FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_1080_1920_30FPS => _id_STREAM_1080_1920_30FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_1080_1920_25FPS =
      _class.staticFieldId(
        r'STREAM_1080_1920_25FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_1080_1920_25FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_1080_1920_25FPS => _id_STREAM_1080_1920_25FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_1080_1920_24FPS =
      _class.staticFieldId(
        r'STREAM_1080_1920_24FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_1080_1920_24FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_1080_1920_24FPS => _id_STREAM_1080_1920_24FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_720_1280_30FPS =
      _class.staticFieldId(
        r'STREAM_720_1280_30FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_720_1280_30FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_720_1280_30FPS => _id_STREAM_720_1280_30FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_2880_2880_25FPS =
      _class.staticFieldId(
        r'STREAM_2880_2880_25FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_2880_2880_25FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_2880_2880_25FPS => _id_STREAM_2880_2880_25FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_2880_2880_30FPS =
      _class.staticFieldId(
        r'STREAM_2880_2880_30FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_2880_2880_30FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_2880_2880_30FPS => _id_STREAM_2880_2880_30FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_1152_1152_30FPS =
      _class.staticFieldId(
        r'STREAM_1152_1152_30FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_1152_1152_30FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_1152_1152_30FPS => _id_STREAM_1152_1152_30FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_368_368_30FPS =
      _class.staticFieldId(
        r'STREAM_368_368_30FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_368_368_30FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_368_368_30FPS => _id_STREAM_368_368_30FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_5312_3552_30FPS =
      _class.staticFieldId(
        r'STREAM_5312_3552_30FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_5312_3552_30FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_5312_3552_30FPS => _id_STREAM_5312_3552_30FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_5312_3552_25FPS =
      _class.staticFieldId(
        r'STREAM_5312_3552_25FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_5312_3552_25FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_5312_3552_25FPS => _id_STREAM_5312_3552_25FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_5312_3552_24FPS =
      _class.staticFieldId(
        r'STREAM_5312_3552_24FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_5312_3552_24FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_5312_3552_24FPS => _id_STREAM_5312_3552_24FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_3584_2400_30FPS =
      _class.staticFieldId(
        r'STREAM_3584_2400_30FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_3584_2400_30FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_3584_2400_30FPS => _id_STREAM_3584_2400_30FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_3584_2400_25FPS =
      _class.staticFieldId(
        r'STREAM_3584_2400_25FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_3584_2400_25FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_3584_2400_25FPS => _id_STREAM_3584_2400_25FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_3584_2400_24FPS =
      _class.staticFieldId(
        r'STREAM_3584_2400_24FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_3584_2400_24FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_3584_2400_24FPS => _id_STREAM_3584_2400_24FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_1152_768_30FPS =
      _class.staticFieldId(
        r'STREAM_1152_768_30FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_1152_768_30FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_1152_768_30FPS => _id_STREAM_1152_768_30FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_2400_3584_30FPS =
      _class.staticFieldId(
        r'STREAM_2400_3584_30FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_2400_3584_30FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_2400_3584_30FPS => _id_STREAM_2400_3584_30FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_2400_3584_25FPS =
      _class.staticFieldId(
        r'STREAM_2400_3584_25FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_2400_3584_25FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_2400_3584_25FPS => _id_STREAM_2400_3584_25FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_2400_3584_24FPS =
      _class.staticFieldId(
        r'STREAM_2400_3584_24FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_2400_3584_24FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_2400_3584_24FPS => _id_STREAM_2400_3584_24FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_6720_2856_25FPS =
      _class.staticFieldId(
        r'STREAM_6720_2856_25FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_6720_2856_25FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_6720_2856_25FPS => _id_STREAM_6720_2856_25FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_6720_2856_24FPS =
      _class.staticFieldId(
        r'STREAM_6720_2856_24FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_6720_2856_24FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_6720_2856_24FPS => _id_STREAM_6720_2856_24FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_6016_2560_25FPS =
      _class.staticFieldId(
        r'STREAM_6016_2560_25FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_6016_2560_25FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_6016_2560_25FPS => _id_STREAM_6016_2560_25FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_6016_2560_24FPS =
      _class.staticFieldId(
        r'STREAM_6016_2560_24FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_6016_2560_24FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_6016_2560_24FPS => _id_STREAM_6016_2560_24FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_5472_2328_30FPS =
      _class.staticFieldId(
        r'STREAM_5472_2328_30FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_5472_2328_30FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_5472_2328_30FPS => _id_STREAM_5472_2328_30FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_5472_2328_25FPS =
      _class.staticFieldId(
        r'STREAM_5472_2328_25FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_5472_2328_25FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_5472_2328_25FPS => _id_STREAM_5472_2328_25FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_STREAM_5472_2328_24FPS =
      _class.staticFieldId(
        r'STREAM_5472_2328_24FPS',
        r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
      );
  /// from: `static public final com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution STREAM_5472_2328_24FPS`
  /// The returned object must be released after use, by calling the [release] method.
static PreviewStreamResolution get STREAM_5472_2328_24FPS => _id_STREAM_5472_2328_24FPS.get(_class, const $PreviewStreamResolution$Type());

  static final _id_width =
      _class.instanceFieldId(
        r'width',
        r'I',
      );
  /// from: `public int width`
int get width => _id_width.get(this, const _$jni.jintType());

  /// from: `public int width`
set width(int value) => _id_width.set(this, const _$jni.jintType(), value);

  static final _id_height =
      _class.instanceFieldId(
        r'height',
        r'I',
      );
  /// from: `public int height`
int get height => _id_height.get(this, const _$jni.jintType());

  /// from: `public int height`
set height(int value) => _id_height.set(this, const _$jni.jintType(), value);

  static final _id_fps =
      _class.instanceFieldId(
        r'fps',
        r'I',
      );
  /// from: `public int fps`
int get fps => _id_fps.get(this, const _$jni.jintType());

  /// from: `public int fps`
set fps(int value) => _id_fps.set(this, const _$jni.jintType(), value);

  static final _id_values = _class.staticMethodId(
    r'values',
    r'()[Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
  );

  static final _values = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallStaticObjectMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `static public com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution[] values()`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JArray<PreviewStreamResolution> values(){
    
    return _values(_class.reference.pointer, _id_values as _$jni.JMethodIDPtr).object(const _$jni.JArrayType($PreviewStreamResolution$Type()));
  }

  static final _id_valueOf = _class.staticMethodId(
    r'valueOf',
    r'(Ljava/lang/String;)Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;',
  );

  static final _valueOf = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>('globalEnv_CallStaticObjectMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();
  /// from: `static public com.arashivision.sdkcamera.camera.resolution.PreviewStreamResolution valueOf(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static PreviewStreamResolution valueOf(_$jni.JString string, ){
    
    return _valueOf(_class.reference.pointer, _id_valueOf as _$jni.JMethodIDPtr, string.reference.pointer).object(const $PreviewStreamResolution$Type());
  }

  static final _id_new$ = _class.constructorId(
    r'(Ljava/lang/String;IIII)V',
  );

  static final _new$ = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>, _$jni.Int32, _$jni.Int32, _$jni.Int32, _$jni.Int32)>)>>('globalEnv_NewObject')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, int, int, int, int)>();
  /// from: `public void <init>(java.lang.String string, int i, int i1, int i2, int i3)`
  /// The returned object must be released after use, by calling the [release] method.
  factory PreviewStreamResolution(_$jni.JString string, int i, int i1, int i2, int i3, ) {
    
    return PreviewStreamResolution.fromReference(
      
      _new$(_class.reference.pointer, _id_new$ as _$jni.JMethodIDPtr, string.reference.pointer, i, i1, i2, i3).reference
    );
  }



}
final class $PreviewStreamResolution$Type extends _$jni.JObjType<PreviewStreamResolution> {
  

  @_$jni.internal
  const $PreviewStreamResolution$Type(
    
  );

  @_$jni.internal
  @_$core.override
  String get signature => r'Lcom/arashivision/sdkcamera/camera/resolution/PreviewStreamResolution;';

  @_$jni.internal
  @_$core.override
  PreviewStreamResolution fromReference(_$jni.JReference reference) => PreviewStreamResolution.fromReference(
    
    reference
  );

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($PreviewStreamResolution$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($PreviewStreamResolution$Type) &&
        other is $PreviewStreamResolution$Type;
  }
}

/// from: `com.arashivision.sdkcamera.upgrade.FwUpgradeErrorCode`
class FwUpgradeErrorCode extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<FwUpgradeErrorCode> $type;

  

  @_$jni.internal
  FwUpgradeErrorCode.fromReference(
    
    _$jni.JReference reference,
  ) :
    $type = type,
    super.fromReference(
      
      reference
    );

  static final _class = _$jni.JClass.forName(r'com/arashivision/sdkcamera/upgrade/FwUpgradeErrorCode');

      /// The type which includes information such as the signature of this class.
static const type = $FwUpgradeErrorCode$Type();
  /// from: `static public final int UPGRADING`
  static const UPGRADING = -1000;
  /// from: `static public final int CAMERA_NOT_CONNECTED`
  static const CAMERA_NOT_CONNECTED = -1001;
  /// from: `static public final int CAMERA_BATTERY_LOW`
  static const CAMERA_BATTERY_LOW = -1002;
  /// from: `static public final int OTHER_HTTP_ERROR`
  static const OTHER_HTTP_ERROR = -14004;
  /// from: `static public final int IO_EXCEPTION`
  static const IO_EXCEPTION = -14005;
  /// from: `static public final int UPGRADE_CANCEL`
  static const UPGRADE_CANCEL = -14046;
  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_NewObject')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory FwUpgradeErrorCode() {
    
    return FwUpgradeErrorCode.fromReference(
      
      _new$(_class.reference.pointer, _id_new$ as _$jni.JMethodIDPtr).reference
    );
  }

}
final class $FwUpgradeErrorCode$Type extends _$jni.JObjType<FwUpgradeErrorCode> {
  

  @_$jni.internal
  const $FwUpgradeErrorCode$Type(
    
  );

  @_$jni.internal
  @_$core.override
  String get signature => r'Lcom/arashivision/sdkcamera/upgrade/FwUpgradeErrorCode;';

  @_$jni.internal
  @_$core.override
  FwUpgradeErrorCode fromReference(_$jni.JReference reference) => FwUpgradeErrorCode.fromReference(
    
    reference
  );

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($FwUpgradeErrorCode$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($FwUpgradeErrorCode$Type) &&
        other is $FwUpgradeErrorCode$Type;
  }
}

/// from: `com.arashivision.sdkcamera.upgrade.FwUpgradeListener`
class FwUpgradeListener extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<FwUpgradeListener> $type;

  

  @_$jni.internal
  FwUpgradeListener.fromReference(
    
    _$jni.JReference reference,
  ) :
    $type = type,
    super.fromReference(
      
      reference
    );

  static final _class = _$jni.JClass.forName(r'com/arashivision/sdkcamera/upgrade/FwUpgradeListener');

      /// The type which includes information such as the signature of this class.
static const type = $FwUpgradeListener$Type();
  static final _id_onUpgradeSuccess = _class.instanceMethodId(
    r'onUpgradeSuccess',
    r'()V',
  );

  static final _onUpgradeSuccess = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public abstract void onUpgradeSuccess()`
  void onUpgradeSuccess(){
    
    _onUpgradeSuccess(reference.pointer, _id_onUpgradeSuccess as _$jni.JMethodIDPtr).check();
  }

  static final _id_onUpgradeFail = _class.instanceMethodId(
    r'onUpgradeFail',
    r'(ILjava/lang/String;)V',
  );

  static final _onUpgradeFail = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32, _$jni.Pointer<_$jni.Void>)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int, _$jni.Pointer<_$jni.Void>)>();
  /// from: `public abstract void onUpgradeFail(int i, java.lang.String string)`
  void onUpgradeFail(int i, _$jni.JString string, ){
    
    _onUpgradeFail(reference.pointer, _id_onUpgradeFail as _$jni.JMethodIDPtr, i, string.reference.pointer).check();
  }

  static final _id_onUpgradeCancel = _class.instanceMethodId(
    r'onUpgradeCancel',
    r'()V',
  );

  static final _onUpgradeCancel = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public abstract void onUpgradeCancel()`
  void onUpgradeCancel(){
    
    _onUpgradeCancel(reference.pointer, _id_onUpgradeCancel as _$jni.JMethodIDPtr).check();
  }

  static final _id_onUpgradeProgress = _class.instanceMethodId(
    r'onUpgradeProgress',
    r'(D)V',
  );

  static final _onUpgradeProgress = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Double,)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, double)>();
  /// from: `public abstract void onUpgradeProgress(double d)`
  void onUpgradeProgress(double d, ){
    
    _onUpgradeProgress(reference.pointer, _id_onUpgradeProgress as _$jni.JMethodIDPtr, d).check();
  }

  /// Maps a specific port to the implemented interface.
  static final _$core.Map<int, $FwUpgradeListener> _$impls = {};
  static _$jni.JObjectPtr _$invoke(
    int port,
    _$jni.JObjectPtr descriptor,
    _$jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      _$jni.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final _$jni.Pointer<
          _$jni.NativeFunction<
              _$jni.JObjectPtr Function(
                  _$jni.Int64, _$jni.JObjectPtr, _$jni.JObjectPtr)>>
      _$invokePointer = _$jni.Pointer.fromFunction(_$invoke);

  static _$jni.Pointer<_$jni.Void> _$invokeMethod(
    int $p,
    _$jni.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
            if ($d == r'onUpgradeSuccess()V') {
          _$impls[$p]!.onUpgradeSuccess(
          );
          return _$jni.nullptr;
        }
        if ($d == r'onUpgradeFail(ILjava/lang/String;)V') {
          _$impls[$p]!.onUpgradeFail(
$a[0].as(const _$jni.JIntegerType(), releaseOriginal: true).intValue(releaseOriginal: true),
$a[1].as(const _$jni.JStringType(), releaseOriginal: true),
          );
          return _$jni.nullptr;
        }
        if ($d == r'onUpgradeCancel()V') {
          _$impls[$p]!.onUpgradeCancel(
          );
          return _$jni.nullptr;
        }
        if ($d == r'onUpgradeProgress(D)V') {
          _$impls[$p]!.onUpgradeProgress(
$a[0].as(const _$jni.JDoubleType(), releaseOriginal: true).doubleValue(releaseOriginal: true),
          );
          return _$jni.nullptr;
        }
    } catch (e) {
      return _$jni.ProtectedJniExtensions.newDartException(e);
    }
    return _$jni.nullptr;
  }

  static void implementIn(
    _$jni.JImplementer implementer,
    $FwUpgradeListener $impl,
  ) {
    late final _$jni.RawReceivePort $p;
    $p = _$jni.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = _$jni.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      _$jni.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'com.arashivision.sdkcamera.upgrade.FwUpgradeListener',
      $p,
      _$invokePointer,
      [
        if ($impl.onUpgradeSuccess$async) r'onUpgradeSuccess()V',
        if ($impl.onUpgradeFail$async) r'onUpgradeFail(ILjava/lang/String;)V',
        if ($impl.onUpgradeCancel$async) r'onUpgradeCancel()V',
        if ($impl.onUpgradeProgress$async) r'onUpgradeProgress(D)V',
      ],
    );
    final $a = $p.sendPort.nativePort; 
    _$impls[$a] = $impl;
  }

  factory FwUpgradeListener.implement(
    $FwUpgradeListener $impl,
  ) {
    final $i = _$jni.JImplementer();
    implementIn($i, $impl);
    return FwUpgradeListener.fromReference(
      
      $i.implementReference(),
    );
  }
  }
abstract base mixin class $FwUpgradeListener {
  factory $FwUpgradeListener(
    {required void Function() onUpgradeSuccess, bool onUpgradeSuccess$async,
    required void Function(int i, _$jni.JString string) onUpgradeFail, bool onUpgradeFail$async,
    required void Function() onUpgradeCancel, bool onUpgradeCancel$async,
    required void Function(double d) onUpgradeProgress, bool onUpgradeProgress$async,}
  ) = _$FwUpgradeListener;

  

  void onUpgradeSuccess();
  bool get onUpgradeSuccess$async => false;
  void onUpgradeFail(int i, _$jni.JString string);
  bool get onUpgradeFail$async => false;
  void onUpgradeCancel();
  bool get onUpgradeCancel$async => false;
  void onUpgradeProgress(double d);
  bool get onUpgradeProgress$async => false;
}

final class _$FwUpgradeListener with $FwUpgradeListener {
  _$FwUpgradeListener(
    {required void Function() onUpgradeSuccess, this.onUpgradeSuccess$async = false,
    required void Function(int i, _$jni.JString string) onUpgradeFail, this.onUpgradeFail$async = false,
    required void Function() onUpgradeCancel, this.onUpgradeCancel$async = false,
    required void Function(double d) onUpgradeProgress, this.onUpgradeProgress$async = false,}
  ) :  _onUpgradeSuccess = onUpgradeSuccess, _onUpgradeFail = onUpgradeFail, _onUpgradeCancel = onUpgradeCancel, _onUpgradeProgress = onUpgradeProgress;

  

  final void Function() _onUpgradeSuccess;
  final bool onUpgradeSuccess$async;
  final void Function(int i, _$jni.JString string) _onUpgradeFail;
  final bool onUpgradeFail$async;
  final void Function() _onUpgradeCancel;
  final bool onUpgradeCancel$async;
  final void Function(double d) _onUpgradeProgress;
  final bool onUpgradeProgress$async;

  void onUpgradeSuccess() {
    return _onUpgradeSuccess();
  }  void onUpgradeFail(int i, _$jni.JString string) {
    return _onUpgradeFail(i, string);
  }  void onUpgradeCancel() {
    return _onUpgradeCancel();
  }  void onUpgradeProgress(double d) {
    return _onUpgradeProgress(d);
  }}
final class $FwUpgradeListener$Type extends _$jni.JObjType<FwUpgradeListener> {
  

  @_$jni.internal
  const $FwUpgradeListener$Type(
    
  );

  @_$jni.internal
  @_$core.override
  String get signature => r'Lcom/arashivision/sdkcamera/upgrade/FwUpgradeListener;';

  @_$jni.internal
  @_$core.override
  FwUpgradeListener fromReference(_$jni.JReference reference) => FwUpgradeListener.fromReference(
    
    reference
  );

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($FwUpgradeListener$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($FwUpgradeListener$Type) &&
        other is $FwUpgradeListener$Type;
  }
}

/// from: `com.arashivision.sdkcamera.upgrade.FwUpgradeManager`
class FwUpgradeManager extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<FwUpgradeManager> $type;

  

  @_$jni.internal
  FwUpgradeManager.fromReference(
    
    _$jni.JReference reference,
  ) :
    $type = type,
    super.fromReference(
      
      reference
    );

  static final _class = _$jni.JClass.forName(r'com/arashivision/sdkcamera/upgrade/FwUpgradeManager');

      /// The type which includes information such as the signature of this class.
static const type = $FwUpgradeManager$Type();
  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_NewObject')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory FwUpgradeManager() {
    
    return FwUpgradeManager.fromReference(
      
      _new$(_class.reference.pointer, _id_new$ as _$jni.JMethodIDPtr).reference
    );
  }

  static final _id_getInstance = _class.staticMethodId(
    r'getInstance',
    r'()Lcom/arashivision/sdkcamera/upgrade/FwUpgradeManager;',
  );

  static final _getInstance = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallStaticObjectMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `static public com.arashivision.sdkcamera.upgrade.FwUpgradeManager getInstance()`
  /// The returned object must be released after use, by calling the [release] method.
  static FwUpgradeManager getInstance(){
    
    return _getInstance(_class.reference.pointer, _id_getInstance as _$jni.JMethodIDPtr).object(const $FwUpgradeManager$Type());
  }

 

  static final _id_startUpgrade = _class.instanceMethodId(
    r'startUpgrade',
    r'(Ljava/lang/String;Lcom/arashivision/sdkcamera/upgrade/FwUpgradeListener;)V',
  );

  static final _startUpgrade = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>, _$jni.Pointer<_$jni.Void>)>)>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, _$jni.Pointer<_$jni.Void>)>();
  /// from: `public void startUpgrade(java.lang.String string, com.arashivision.sdkcamera.upgrade.FwUpgradeListener fwUpgradeListener)`
  void startUpgrade(_$jni.JString string, FwUpgradeListener fwUpgradeListener, ){
    
    _startUpgrade(reference.pointer, _id_startUpgrade as _$jni.JMethodIDPtr, string.reference.pointer, fwUpgradeListener.reference.pointer).check();
  }

  static final _id_cancelUpgrade = _class.instanceMethodId(
    r'cancelUpgrade',
    r'()V',
  );

  static final _cancelUpgrade = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallVoidMethod')
    .asFunction<_$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public void cancelUpgrade()`
  void cancelUpgrade(){
    
    _cancelUpgrade(reference.pointer, _id_cancelUpgrade as _$jni.JMethodIDPtr).check();
  }

  static final _id_isUpgrading = _class.instanceMethodId(
    r'isUpgrading',
    r'()Z',
  );

  static final _isUpgrading = _$jni.ProtectedJniExtensions
    .lookup<_$jni.NativeFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>>('globalEnv_CallBooleanMethod')
    .asFunction<_$jni.JniResult Function(_$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, )>();
  /// from: `public boolean isUpgrading()`
  bool isUpgrading(){
    
    return _isUpgrading(reference.pointer, _id_isUpgrading as _$jni.JMethodIDPtr).boolean;
  }

}
final class $FwUpgradeManager$Type extends _$jni.JObjType<FwUpgradeManager> {
  

  @_$jni.internal
  const $FwUpgradeManager$Type(
    
  );

  @_$jni.internal
  @_$core.override
  String get signature => r'Lcom/arashivision/sdkcamera/upgrade/FwUpgradeManager;';

  @_$jni.internal
  @_$core.override
  FwUpgradeManager fromReference(_$jni.JReference reference) => FwUpgradeManager.fromReference(
    
    reference
  );

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($FwUpgradeManager$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($FwUpgradeManager$Type) &&
        other is $FwUpgradeManager$Type;
  }
}

